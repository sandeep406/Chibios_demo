
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4834      	ldr	r0, [pc, #208]	; (8000294 <endfiniloop+0x4>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	f240 0000 	movw	r0, #0
 80001cc:	f2cc 0000 	movt	r0, #49152	; 0xc000
 80001d0:	f64e 7134 	movw	r1, #61236	; 0xef34
 80001d4:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001d8:	6008      	str	r0, [r1, #0]
 80001da:	f3bf 8f4f 	dsb	sy
 80001de:	f3bf 8f6f 	isb	sy
 80001e2:	f240 0000 	movw	r0, #0
 80001e6:	f2c0 00f0 	movt	r0, #240	; 0xf0
 80001ea:	f64e 5188 	movw	r1, #60808	; 0xed88
 80001ee:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001f2:	6008      	str	r0, [r1, #0]
 80001f4:	f3bf 8f4f 	dsb	sy
 80001f8:	f3bf 8f6f 	isb	sy
 80001fc:	f04f 0000 	mov.w	r0, #0
 8000200:	eee1 0a10 	vmsr	fpscr, r0
 8000204:	f64e 713c 	movw	r1, #61244	; 0xef3c
 8000208:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800020c:	6008      	str	r0, [r1, #0]
 800020e:	2006      	movs	r0, #6
 8000210:	f380 8814 	msr	CONTROL, r0
 8000214:	f3bf 8f6f 	isb	sy
 8000218:	f001 f902 	bl	8001420 <__core_init>
 800021c:	f001 ff38 	bl	8002090 <__early_init>
 8000220:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 8000224:	491c      	ldr	r1, [pc, #112]	; (8000298 <endfiniloop+0x8>)
 8000226:	4a1d      	ldr	r2, [pc, #116]	; (800029c <endfiniloop+0xc>)

08000228 <msloop>:
 8000228:	4291      	cmp	r1, r2
 800022a:	bf3c      	itt	cc
 800022c:	f841 0b04 	strcc.w	r0, [r1], #4
 8000230:	e7fa      	bcc.n	8000228 <msloop>
 8000232:	491b      	ldr	r1, [pc, #108]	; (80002a0 <endfiniloop+0x10>)
 8000234:	4a17      	ldr	r2, [pc, #92]	; (8000294 <endfiniloop+0x4>)

08000236 <psloop>:
 8000236:	4291      	cmp	r1, r2
 8000238:	bf3c      	itt	cc
 800023a:	f841 0b04 	strcc.w	r0, [r1], #4
 800023e:	e7fa      	bcc.n	8000236 <psloop>
 8000240:	4918      	ldr	r1, [pc, #96]	; (80002a4 <endfiniloop+0x14>)
 8000242:	4a19      	ldr	r2, [pc, #100]	; (80002a8 <endfiniloop+0x18>)
 8000244:	4b19      	ldr	r3, [pc, #100]	; (80002ac <endfiniloop+0x1c>)

08000246 <dloop>:
 8000246:	429a      	cmp	r2, r3
 8000248:	bf3e      	ittt	cc
 800024a:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800024e:	f842 0b04 	strcc.w	r0, [r2], #4
 8000252:	e7f8      	bcc.n	8000246 <dloop>
 8000254:	2000      	movs	r0, #0
 8000256:	4916      	ldr	r1, [pc, #88]	; (80002b0 <endfiniloop+0x20>)
 8000258:	4a16      	ldr	r2, [pc, #88]	; (80002b4 <endfiniloop+0x24>)

0800025a <bloop>:
 800025a:	4291      	cmp	r1, r2
 800025c:	bf3c      	itt	cc
 800025e:	f841 0b04 	strcc.w	r0, [r1], #4
 8000262:	e7fa      	bcc.n	800025a <bloop>
 8000264:	f001 f894 	bl	8001390 <__init_ram_areas>
 8000268:	f001 f8d2 	bl	8001410 <__late_init>
 800026c:	4c12      	ldr	r4, [pc, #72]	; (80002b8 <endfiniloop+0x28>)
 800026e:	4d13      	ldr	r5, [pc, #76]	; (80002bc <endfiniloop+0x2c>)

08000270 <initloop>:
 8000270:	42ac      	cmp	r4, r5
 8000272:	da03      	bge.n	800027c <endinitloop>
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
 8000278:	4788      	blx	r1
 800027a:	e7f9      	b.n	8000270 <initloop>

0800027c <endinitloop>:
 800027c:	f002 fe90 	bl	8002fa0 <main>
 8000280:	4c0f      	ldr	r4, [pc, #60]	; (80002c0 <endfiniloop+0x30>)
 8000282:	4d10      	ldr	r5, [pc, #64]	; (80002c4 <endfiniloop+0x34>)

08000284 <finiloop>:
 8000284:	42ac      	cmp	r4, r5
 8000286:	da03      	bge.n	8000290 <endfiniloop>
 8000288:	f854 1b04 	ldr.w	r1, [r4], #4
 800028c:	4788      	blx	r1
 800028e:	e7f9      	b.n	8000284 <finiloop>

08000290 <endfiniloop>:
 8000290:	f001 b8b6 	b.w	8001400 <__default_exit>
 8000294:	20000800 	.word	0x20000800
 8000298:	20000000 	.word	0x20000000
 800029c:	20000400 	.word	0x20000400
 80002a0:	20000400 	.word	0x20000400
 80002a4:	08003950 	.word	0x08003950
 80002a8:	20000800 	.word	0x20000800
 80002ac:	20000800 	.word	0x20000800
 80002b0:	20000800 	.word	0x20000800
 80002b4:	200011a8 	.word	0x200011a8
 80002b8:	080001c0 	.word	0x080001c0
 80002bc:	080001c0 	.word	0x080001c0
 80002c0:	080001c0 	.word	0x080001c0
 80002c4:	080001c0 	.word	0x080001c0
	...

080002d0 <_port_switch>:
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d4:	ed2d 8a10 	vpush	{s16-s31}
 80002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
 80002dc:	68c3      	ldr	r3, [r0, #12]
 80002de:	469d      	mov	sp, r3
 80002e0:	ecbd 8a10 	vpop	{s16-s31}
 80002e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002e8 <_port_thread_start>:
 80002e8:	2300      	movs	r3, #0
 80002ea:	f383 8811 	msr	BASEPRI, r3
 80002ee:	4628      	mov	r0, r5
 80002f0:	47a0      	blx	r4
 80002f2:	2000      	movs	r0, #0
 80002f4:	f001 f81c 	bl	8001330 <chThdExit>

080002f8 <_port_switch_from_isr>:
 80002f8:	f000 fde2 	bl	8000ec0 <chSchDoReschedule>

080002fc <_port_exit_from_isr>:
 80002fc:	df00      	svc	0
 80002fe:	e7fe      	b.n	80002fe <_port_exit_from_isr+0x2>

08000300 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 8000300:	b480      	push	{r7}
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8000302:	4a09      	ldr	r2, [pc, #36]	; (8000328 <SVC_Handler+0x28>)
 8000304:	6853      	ldr	r3, [r2, #4]
 8000306:	f023 0301 	bic.w	r3, r3, #1
void SVC_Handler(void) {
 800030a:	af00      	add	r7, sp, #0
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 800030c:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800030e:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8000312:	3368      	adds	r3, #104	; 0x68

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000314:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000318:	2300      	movs	r3, #0
 800031a:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	e000ef30 	.word	0xe000ef30
 800032c:	00000000 	.word	0x00000000

08000330 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000330:	b410      	push	{r4}
 8000332:	2320      	movs	r3, #32
 8000334:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000338:	4c09      	ldr	r4, [pc, #36]	; (8000360 <chCoreAlloc+0x30>)
 800033a:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <chCoreAlloc+0x34>)
 800033c:	6822      	ldr	r2, [r4, #0]
 800033e:	6819      	ldr	r1, [r3, #0]
  size = MEM_ALIGN_NEXT(size);
 8000340:	1dc3      	adds	r3, r0, #7
 8000342:	f023 0307 	bic.w	r3, r3, #7
  if ((size_t)(endmem - nextmem) < size) {
 8000346:	1a89      	subs	r1, r1, r2
 8000348:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800034a:	bf9d      	ittte	ls
 800034c:	189b      	addls	r3, r3, r2
 800034e:	6023      	strls	r3, [r4, #0]

  return p;
 8000350:	4610      	movls	r0, r2
    return NULL;
 8000352:	2000      	movhi	r0, #0
 8000354:	2300      	movs	r3, #0
 8000356:	f383 8811 	msr	BASEPRI, r3
}
 800035a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	20000e54 	.word	0x20000e54
 8000364:	20000e50 	.word	0x20000e50
	...

08000370 <wakeup.lto_priv.62>:
 8000370:	2320      	movs	r3, #32
 8000372:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000376:	7f03      	ldrb	r3, [r0, #28]
 8000378:	2b07      	cmp	r3, #7
 800037a:	d80e      	bhi.n	800039a <wakeup.lto_priv.62+0x2a>
 800037c:	e8df f003 	tbb	[pc, r3]
 8000380:	240d0d28 	.word	0x240d0d28
 8000384:	080d0408 	.word	0x080d0408
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 8000388:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800038a:	6893      	ldr	r3, [r2, #8]
 800038c:	3301      	adds	r3, #1
 800038e:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000390:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000394:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000396:	6802      	ldr	r2, [r0, #0]
 8000398:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 800039a:	b410      	push	{r4}
  tp->p_state = CH_STATE_READY;
 800039c:	2200      	movs	r2, #0
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800039e:	f04f 34ff 	mov.w	r4, #4294967295
 80003a2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <wakeup.lto_priv.62+0x68>)
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80003a6:	6204      	str	r4, [r0, #32]
  tp->p_state = CH_STATE_READY;
 80003a8:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 80003aa:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80003ac:	689a      	ldr	r2, [r3, #8]
 80003ae:	428a      	cmp	r2, r1
 80003b0:	d2fb      	bcs.n	80003aa <wakeup.lto_priv.62+0x3a>
  tp->p_prev = cp->p_prev;
 80003b2:	685a      	ldr	r2, [r3, #4]
 80003b4:	6042      	str	r2, [r0, #4]
  tp->p_next = cp;
 80003b6:	6003      	str	r3, [r0, #0]
 80003b8:	2100      	movs	r1, #0
  tp->p_prev->p_next = tp;
 80003ba:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80003bc:	6058      	str	r0, [r3, #4]
 80003be:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80003c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003c6:	4770      	bx	lr
    *tp->p_u.wttrp = NULL;
 80003c8:	6a03      	ldr	r3, [r0, #32]
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	e7e4      	b.n	800039a <wakeup.lto_priv.62+0x2a>
 80003d0:	2300      	movs	r3, #0
 80003d2:	f383 8811 	msr	BASEPRI, r3
 80003d6:	4770      	bx	lr
 80003d8:	20000b98 	.word	0x20000b98
 80003dc:	00000000 	.word	0x00000000

080003e0 <_idle_thread.lto_priv.64>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80003e0:	e7fe      	b.n	80003e0 <_idle_thread.lto_priv.64>
 80003e2:	bf00      	nop
	...

080003f0 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 80003f0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80003f4:	2a06      	cmp	r2, #6
 80003f6:	d80c      	bhi.n	8000412 <_usb_ep0out+0x22>
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 80003f8:	b538      	push	{r3, r4, r5, lr}
 80003fa:	2301      	movs	r3, #1
 80003fc:	4093      	lsls	r3, r2
 80003fe:	f013 0f67 	tst.w	r3, #103	; 0x67
 8000402:	4604      	mov	r4, r0
 8000404:	d112      	bne.n	800042c <_usb_ep0out+0x3c>
 8000406:	f013 0508 	ands.w	r5, r3, #8
 800040a:	d103      	bne.n	8000414 <_usb_ep0out+0x24>
 800040c:	06db      	lsls	r3, r3, #27
 800040e:	d423      	bmi.n	8000458 <_usb_ep0out+0x68>
 8000410:	bd38      	pop	{r3, r4, r5, pc}
 8000412:	4770      	bx	lr
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8000414:	68c3      	ldr	r3, [r0, #12]
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d1f8      	bne.n	8000410 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800041e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000420:	b103      	cbz	r3, 8000424 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
 8000422:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8000424:	2300      	movs	r3, #0
 8000426:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800042a:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 800042c:	6e03      	ldr	r3, [r0, #96]	; 0x60
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800042e:	6841      	ldr	r1, [r0, #4]
 8000430:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8000434:	680d      	ldr	r5, [r1, #0]
 8000436:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800043a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 800043e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8000442:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000446:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800044a:	b10d      	cbz	r5, 8000450 <_usb_ep0out+0x60>
 800044c:	2106      	movs	r1, #6
 800044e:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8000450:	2306      	movs	r3, #6
 8000452:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000456:	bd38      	pop	{r3, r4, r5, pc}
    usbp->ep0state = USB_EP0_SENDING_STS;
 8000458:	2305      	movs	r3, #5
 800045a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800045e:	2320      	movs	r3, #32
 8000460:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8000464:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000466:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8000468:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800046a:	f042 0201 	orr.w	r2, r2, #1
 800046e:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8000470:	4629      	mov	r1, r5
  isp->txbuf  = buf;
 8000472:	609d      	str	r5, [r3, #8]
  isp->txsize = n;
 8000474:	601d      	str	r5, [r3, #0]
  isp->txcnt  = 0;
 8000476:	605d      	str	r5, [r3, #4]
  usb_lld_start_in(usbp, ep);
 8000478:	f001 fe6a 	bl	8002150 <usb_lld_start_in>
 800047c:	f385 8811 	msr	BASEPRI, r5
 8000480:	bd38      	pop	{r3, r4, r5, pc}
 8000482:	bf00      	nop
	...

08000490 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8000490:	b538      	push	{r3, r4, r5, lr}
  switch (usbp->ep0state) {
 8000492:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8000496:	4604      	mov	r4, r0
  switch (usbp->ep0state) {
 8000498:	2b06      	cmp	r3, #6
 800049a:	d81a      	bhi.n	80004d2 <_usb_ep0in+0x42>
 800049c:	e8df f003 	tbb	[pc, r3]
 80004a0:	042a1a04 	.word	0x042a1a04
 80004a4:	4104      	.short	0x4104
 80004a6:	04          	.byte	0x04
 80004a7:	00          	.byte	0x00
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 80004a8:	6e03      	ldr	r3, [r0, #96]	; 0x60
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80004aa:	6841      	ldr	r1, [r0, #4]
 80004ac:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80004b0:	680d      	ldr	r5, [r1, #0]
 80004b2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80004b6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 80004ba:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80004be:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80004c2:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80004c6:	b10d      	cbz	r5, 80004cc <_usb_ep0in+0x3c>
 80004c8:	2106      	movs	r1, #6
 80004ca:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 80004cc:	2306      	movs	r3, #6
 80004ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80004d2:	bd38      	pop	{r3, r4, r5, pc}
  hw |= (uint16_t)*p << 8U;
 80004d4:	f890 1057 	ldrb.w	r1, [r0, #87]	; 0x57
 80004d8:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
    if ((usbp->ep0n < max) &&
 80004dc:	6c82      	ldr	r2, [r0, #72]	; 0x48
    max = (size_t)get_hword(&usbp->setup[6]);
 80004de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    if ((usbp->ep0n < max) &&
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d906      	bls.n	80004f4 <_usb_ep0in+0x64>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 80004e6:	68c3      	ldr	r3, [r0, #12]
 80004e8:	8a1b      	ldrh	r3, [r3, #16]
 80004ea:	fbb2 f5f3 	udiv	r5, r2, r3
 80004ee:	fb03 2515 	mls	r5, r3, r5, r2
    if ((usbp->ep0n < max) &&
 80004f2:	b1ed      	cbz	r5, 8000530 <_usb_ep0in+0xa0>
    usbp->ep0state = USB_EP0_WAITING_STS;
 80004f4:	2303      	movs	r3, #3
 80004f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80004fa:	2320      	movs	r3, #32
 80004fc:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 8000500:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000502:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8000504:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 8000506:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000508:	f042 0201 	orr.w	r2, r2, #1
 800050c:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800050e:	4620      	mov	r0, r4
  osp->rxbuf  = buf;
 8000510:	609d      	str	r5, [r3, #8]
  osp->rxsize = n;
 8000512:	601d      	str	r5, [r3, #0]
  osp->rxcnt  = 0;
 8000514:	605d      	str	r5, [r3, #4]
  usb_lld_start_out(usbp, ep);
 8000516:	4629      	mov	r1, r5
 8000518:	f001 fe72 	bl	8002200 <usb_lld_start_out>
 800051c:	f385 8811 	msr	BASEPRI, r5
 8000520:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 8000522:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000524:	b103      	cbz	r3, 8000528 <_usb_ep0in+0x98>
      usbp->ep0endcb(usbp);
 8000526:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8000528:	2300      	movs	r3, #0
 800052a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800052e:	bd38      	pop	{r3, r4, r5, pc}
 8000530:	2320      	movs	r3, #32
 8000532:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 8000536:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000538:	8902      	ldrh	r2, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 800053a:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800053c:	f042 0201 	orr.w	r2, r2, #1
 8000540:	8102      	strh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8000542:	4629      	mov	r1, r5
  isp->txbuf  = buf;
 8000544:	609d      	str	r5, [r3, #8]
  isp->txsize = n;
 8000546:	601d      	str	r5, [r3, #0]
  isp->txcnt  = 0;
 8000548:	605d      	str	r5, [r3, #4]
  usb_lld_start_in(usbp, ep);
 800054a:	f001 fe01 	bl	8002150 <usb_lld_start_in>
 800054e:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_WAITING_TX0;
 8000552:	2302      	movs	r3, #2
 8000554:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000558:	bd38      	pop	{r3, r4, r5, pc}
 800055a:	bf00      	nop
 800055c:	0000      	movs	r0, r0
	...

08000560 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8000560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8000562:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8000566:	2300      	movs	r3, #0
 8000568:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800056c:	68cb      	ldr	r3, [r1, #12]
  if ((usbp->config->requests_hook_cb == NULL) ||
 800056e:	6842      	ldr	r2, [r0, #4]
 8000570:	6a1b      	ldr	r3, [r3, #32]
 8000572:	6819      	ldr	r1, [r3, #0]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	6543      	str	r3, [r0, #84]	; 0x54
 8000578:	6501      	str	r1, [r0, #80]	; 0x50
 800057a:	6893      	ldr	r3, [r2, #8]
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 800057c:	4604      	mov	r4, r0
  if ((usbp->config->requests_hook_cb == NULL) ||
 800057e:	b353      	cbz	r3, 80005d6 <_usb_ep0setup+0x76>
      !(usbp->config->requests_hook_cb(usbp))) {
 8000580:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 8000582:	b340      	cbz	r0, 80005d6 <_usb_ep0setup+0x76>
 8000584:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000586:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  hw |= (uint16_t)*p << 8U;
 800058a:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
 800058e:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
  max = (size_t)get_hword(&usbp->setup[6]);
 8000592:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  if (usbp->ep0n > max) {
 8000596:	428a      	cmp	r2, r1
 8000598:	bf2c      	ite	cs
 800059a:	460a      	movcs	r2, r1
    usbp->ep0n = max;
 800059c:	64a2      	strcc	r2, [r4, #72]	; 0x48
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800059e:	0619      	lsls	r1, r3, #24
 80005a0:	f100 8094 	bmi.w	80006cc <_usb_ep0setup+0x16c>
    if (usbp->ep0n != 0U) {
 80005a4:	2a00      	cmp	r2, #0
 80005a6:	d156      	bne.n	8000656 <_usb_ep0setup+0xf6>
      usbp->ep0state = USB_EP0_SENDING_STS;
 80005a8:	2305      	movs	r3, #5
 80005aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80005ae:	2320      	movs	r3, #32
 80005b0:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 80005b4:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80005b6:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 80005b8:	695b      	ldr	r3, [r3, #20]
  isp->txbuf  = buf;
 80005ba:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80005bc:	f042 0201 	orr.w	r2, r2, #1
 80005c0:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 80005c2:	4620      	mov	r0, r4
  isp->txbuf  = buf;
 80005c4:	609d      	str	r5, [r3, #8]
  isp->txsize = n;
 80005c6:	601d      	str	r5, [r3, #0]
  isp->txcnt  = 0;
 80005c8:	605d      	str	r5, [r3, #4]
  usb_lld_start_in(usbp, ep);
 80005ca:	4629      	mov	r1, r5
 80005cc:	f001 fdc0 	bl	8002150 <usb_lld_start_in>
 80005d0:	f385 8811 	msr	BASEPRI, r5
 80005d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 80005d6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80005da:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 80005de:	4619      	mov	r1, r3
 80005e0:	d016      	beq.n	8000610 <_usb_ep0setup+0xb0>
 80005e2:	6e22      	ldr	r2, [r4, #96]	; 0x60
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 80005e4:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80005e8:	6861      	ldr	r1, [r4, #4]
 80005ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005ee:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 80005f2:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80005f6:	680d      	ldr	r5, [r1, #0]
 80005f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005fc:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8000600:	b115      	cbz	r5, 8000608 <_usb_ep0setup+0xa8>
 8000602:	2106      	movs	r1, #6
 8000604:	4620      	mov	r0, r4
 8000606:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8000608:	2306      	movs	r3, #6
 800060a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800060e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           ((uint32_t)usbp->setup[1] << 8U))) {
 8000610:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000614:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8000618:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800061c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8000620:	f000 814f 	beq.w	80008c2 <_usb_ep0setup+0x362>
 8000624:	d92f      	bls.n	8000686 <_usb_ep0setup+0x126>
 8000626:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 800062a:	f000 8131 	beq.w	8000890 <_usb_ep0setup+0x330>
 800062e:	d966      	bls.n	80006fe <_usb_ep0setup+0x19e>
 8000630:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 8000634:	f000 808f 	beq.w	8000756 <_usb_ep0setup+0x1f6>
 8000638:	f640 4102 	movw	r1, #3074	; 0xc02
 800063c:	428a      	cmp	r2, r1
 800063e:	f000 8125 	beq.w	800088c <_usb_ep0setup+0x32c>
 8000642:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000646:	d1cc      	bne.n	80005e2 <_usb_ep0setup+0x82>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8000648:	f104 025b 	add.w	r2, r4, #91	; 0x5b
 800064c:	2101      	movs	r1, #1
 800064e:	64e5      	str	r5, [r4, #76]	; 0x4c
 8000650:	6462      	str	r2, [r4, #68]	; 0x44
 8000652:	64a1      	str	r1, [r4, #72]	; 0x48
 8000654:	e799      	b.n	800058a <_usb_ep0setup+0x2a>
      usbp->ep0state = USB_EP0_RX;
 8000656:	2304      	movs	r3, #4
 8000658:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800065c:	2320      	movs	r3, #32
 800065e:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 8000662:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000664:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8000666:	699b      	ldr	r3, [r3, #24]
      usbStartReceiveI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8000668:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800066a:	6c66      	ldr	r6, [r4, #68]	; 0x44
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800066c:	f042 0201 	orr.w	r2, r2, #1
  osp->rxcnt  = 0;
 8000670:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000672:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8000674:	4620      	mov	r0, r4
  osp->rxcnt  = 0;
 8000676:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_out(usbp, ep);
 800067a:	4629      	mov	r1, r5
 800067c:	f001 fdc0 	bl	8002200 <usb_lld_start_out>
 8000680:	f385 8811 	msr	BASEPRI, r5
 8000684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000686:	2a02      	cmp	r2, #2
 8000688:	f000 80e6 	beq.w	8000858 <_usb_ep0setup+0x2f8>
 800068c:	f240 80dc 	bls.w	8000848 <_usb_ep0setup+0x2e8>
 8000690:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000694:	f000 808e 	beq.w	80007b4 <_usb_ep0setup+0x254>
 8000698:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800069c:	d1a1      	bne.n	80005e2 <_usb_ep0setup+0x82>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800069e:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d19d      	bne.n	80005e2 <_usb_ep0setup+0x82>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 80006a6:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80006aa:	f013 020f 	ands.w	r2, r3, #15
 80006ae:	d034      	beq.n	800071a <_usb_ep0setup+0x1ba>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80006b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80006b4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80006b6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80006ba:	f040 812b 	bne.w	8000914 <_usb_ep0setup+0x3b4>
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 80006be:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80006c2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80006c6:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80006ca:	e026      	b.n	800071a <_usb_ep0setup+0x1ba>
    if (usbp->ep0n != 0U) {
 80006cc:	b362      	cbz	r2, 8000728 <_usb_ep0setup+0x1c8>
      usbp->ep0state = USB_EP0_TX;
 80006ce:	2301      	movs	r3, #1
 80006d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80006d4:	2320      	movs	r3, #32
 80006d6:	f383 8811 	msr	BASEPRI, r3
  isp = usbp->epc[ep]->in_state;
 80006da:	68e3      	ldr	r3, [r4, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80006dc:	8922      	ldrh	r2, [r4, #8]
  isp = usbp->epc[ep]->in_state;
 80006de:	695b      	ldr	r3, [r3, #20]
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 80006e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80006e2:	6c66      	ldr	r6, [r4, #68]	; 0x44
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80006e4:	f042 0201 	orr.w	r2, r2, #1
  isp->txcnt  = 0;
 80006e8:	2500      	movs	r5, #0
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80006ea:	8122      	strh	r2, [r4, #8]
  usb_lld_start_in(usbp, ep);
 80006ec:	4620      	mov	r0, r4
  isp->txcnt  = 0;
 80006ee:	e883 0062 	stmia.w	r3, {r1, r5, r6}
  usb_lld_start_in(usbp, ep);
 80006f2:	4629      	mov	r1, r5
 80006f4:	f001 fd2c 	bl	8002150 <usb_lld_start_in>
 80006f8:	f385 8811 	msr	BASEPRI, r5
 80006fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 80006fe:	f240 3302 	movw	r3, #770	; 0x302
 8000702:	429a      	cmp	r2, r3
 8000704:	d03e      	beq.n	8000784 <_usb_ep0setup+0x224>
 8000706:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800070a:	f47f af6a 	bne.w	80005e2 <_usb_ep0setup+0x82>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 800070e:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8000712:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000716:	f000 80e5 	beq.w	80008e4 <_usb_ep0setup+0x384>
    usbSetupTransfer(usbp, NULL, 0, NULL);
 800071a:	2300      	movs	r3, #0
 800071c:	6463      	str	r3, [r4, #68]	; 0x44
 800071e:	64a3      	str	r3, [r4, #72]	; 0x48
 8000720:	64e3      	str	r3, [r4, #76]	; 0x4c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8000722:	060b      	lsls	r3, r1, #24
 8000724:	f57f af40 	bpl.w	80005a8 <_usb_ep0setup+0x48>
      usbp->ep0state = USB_EP0_WAITING_STS;
 8000728:	2303      	movs	r3, #3
 800072a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800072e:	2320      	movs	r3, #32
 8000730:	f383 8811 	msr	BASEPRI, r3
  osp = usbp->epc[ep]->out_state;
 8000734:	68e3      	ldr	r3, [r4, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000736:	8962      	ldrh	r2, [r4, #10]
  osp = usbp->epc[ep]->out_state;
 8000738:	699b      	ldr	r3, [r3, #24]
  osp->rxbuf  = buf;
 800073a:	2500      	movs	r5, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800073c:	f042 0201 	orr.w	r2, r2, #1
 8000740:	8162      	strh	r2, [r4, #10]
  usb_lld_start_out(usbp, ep);
 8000742:	4620      	mov	r0, r4
  osp->rxbuf  = buf;
 8000744:	609d      	str	r5, [r3, #8]
  osp->rxsize = n;
 8000746:	601d      	str	r5, [r3, #0]
  osp->rxcnt  = 0;
 8000748:	605d      	str	r5, [r3, #4]
  usb_lld_start_out(usbp, ep);
 800074a:	4629      	mov	r1, r5
 800074c:	f001 fd58 	bl	8002200 <usb_lld_start_out>
 8000750:	f385 8811 	msr	BASEPRI, r5
 8000754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (usbp->configuration != usbp->setup[2]) {
 8000756:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 800075a:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
 800075e:	429a      	cmp	r2, r3
 8000760:	d0db      	beq.n	800071a <_usb_ep0setup+0x1ba>
      if (usbp->state == USB_ACTIVE) {
 8000762:	7822      	ldrb	r2, [r4, #0]
 8000764:	2a04      	cmp	r2, #4
 8000766:	d034      	beq.n	80007d2 <_usb_ep0setup+0x272>
      if (usbp->setup[2] != 0U) {
 8000768:	b14b      	cbz	r3, 800077e <_usb_ep0setup+0x21e>
        usbp->state = USB_ACTIVE;
 800076a:	2104      	movs	r1, #4
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 800076c:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 800076e:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
        usbp->state = USB_ACTIVE;
 8000772:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8000774:	6813      	ldr	r3, [r2, #0]
 8000776:	b113      	cbz	r3, 800077e <_usb_ep0setup+0x21e>
 8000778:	2102      	movs	r1, #2
 800077a:	4620      	mov	r0, r4
 800077c:	4798      	blx	r3
 800077e:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 8000782:	e7ca      	b.n	800071a <_usb_ep0setup+0x1ba>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8000784:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8000788:	2b00      	cmp	r3, #0
 800078a:	f47f af2a 	bne.w	80005e2 <_usb_ep0setup+0x82>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800078e:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8000792:	f013 020f 	ands.w	r2, r3, #15
 8000796:	d0c0      	beq.n	800071a <_usb_ep0setup+0x1ba>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8000798:	f013 0f80 	tst.w	r3, #128	; 0x80
 800079c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800079e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80007a2:	f040 80be 	bne.w	8000922 <_usb_ep0setup+0x3c2>
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 80007a6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80007aa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80007ae:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80007b2:	e7b2      	b.n	800071a <_usb_ep0setup+0x1ba>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80007b4:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	f47f af12 	bne.w	80005e2 <_usb_ep0setup+0x82>
      usbp->status &= ~2U;
 80007be:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80007c2:	6465      	str	r5, [r4, #68]	; 0x44
      usbp->status &= ~2U;
 80007c4:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80007c8:	64a5      	str	r5, [r4, #72]	; 0x48
 80007ca:	64e5      	str	r5, [r4, #76]	; 0x4c
      usbp->status &= ~2U;
 80007cc:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 80007d0:	e7a7      	b.n	8000722 <_usb_ep0setup+0x1c2>
 80007d2:	2320      	movs	r3, #32
 80007d4:	f383 8811 	msr	BASEPRI, r3
 80007d8:	6e60      	ldr	r0, [r4, #100]	; 0x64
  usbp->transmitting &= 1U;
 80007da:	8922      	ldrh	r2, [r4, #8]
  usbp->receiving    &= 1U;
 80007dc:	8963      	ldrh	r3, [r4, #10]
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 80007de:	6801      	ldr	r1, [r0, #0]
 80007e0:	66a1      	str	r1, [r4, #104]	; 0x68
  usbp->transmitting &= 1U;
 80007e2:	f002 0201 	and.w	r2, r2, #1
  usbp->receiving    &= 1U;
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	6e26      	ldr	r6, [r4, #96]	; 0x60
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80007ec:	6887      	ldr	r7, [r0, #8]
  usbp->transmitting &= 1U;
 80007ee:	8122      	strh	r2, [r4, #8]
 80007f0:	4629      	mov	r1, r5
    usbp->epc[i] = NULL;
 80007f2:	6125      	str	r5, [r4, #16]
 80007f4:	6165      	str	r5, [r4, #20]
 80007f6:	61a5      	str	r5, [r4, #24]
 80007f8:	61e5      	str	r5, [r4, #28]
  usbp->receiving    &= 1U;
 80007fa:	8163      	strh	r3, [r4, #10]
    otgp->ie[i].DIEPCTL = 0;
 80007fc:	462a      	mov	r2, r5
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80007fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000802:	eb06 1341 	add.w	r3, r6, r1, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8000806:	3101      	adds	r1, #1
 8000808:	428f      	cmp	r7, r1
    otgp->ie[i].DIEPCTL = 0;
 800080a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    otgp->ie[i].DIEPTSIZ = 0;
 800080e:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8000812:	f8c3 0908 	str.w	r0, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPCTL = 0;
 8000816:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
 800081a:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800081e:	f8c3 0b08 	str.w	r0, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8000822:	d2ee      	bcs.n	8000802 <_usb_ep0setup+0x2a2>
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8000824:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000828:	f8c6 381c 	str.w	r3, [r6, #2076]	; 0x81c
 800082c:	f382 8811 	msr	BASEPRI, r2
        usbp->state = USB_SELECTED;
 8000830:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8000832:	6863      	ldr	r3, [r4, #4]
        usbp->configuration = 0U;
 8000834:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
        usbp->state = USB_SELECTED;
 8000838:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	b10b      	cbz	r3, 8000842 <_usb_ep0setup+0x2e2>
 800083e:	4620      	mov	r0, r4
 8000840:	4798      	blx	r3
 8000842:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8000846:	e78f      	b.n	8000768 <_usb_ep0setup+0x208>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000848:	b9ea      	cbnz	r2, 8000886 <_usb_ep0setup+0x326>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 800084a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800084e:	2102      	movs	r1, #2
 8000850:	64e2      	str	r2, [r4, #76]	; 0x4c
 8000852:	6460      	str	r0, [r4, #68]	; 0x44
 8000854:	64a1      	str	r1, [r4, #72]	; 0x48
 8000856:	e698      	b.n	800058a <_usb_ep0setup+0x2a>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8000858:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
  ctl = usbp->otg->ie[ep].DIEPCTL;
 800085c:	f002 010f 	and.w	r1, r2, #15
 8000860:	0616      	lsls	r6, r2, #24
 8000862:	bf4c      	ite	mi
 8000864:	3148      	addmi	r1, #72	; 0x48
  ctl = usbp->otg->oe[ep].DOEPCTL;
 8000866:	3158      	addpl	r1, #88	; 0x58
 8000868:	0149      	lsls	r1, r1, #5
 800086a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800086c:	5851      	ldr	r1, [r2, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 800086e:	040d      	lsls	r5, r1, #16
 8000870:	f57f aeb8 	bpl.w	80005e4 <_usb_ep0setup+0x84>
  if (ctl & DOEPCTL_STALL)
 8000874:	0288      	lsls	r0, r1, #10
 8000876:	d433      	bmi.n	80008e0 <_usb_ep0setup+0x380>
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8000878:	4a2d      	ldr	r2, [pc, #180]	; (8000930 <_usb_ep0setup+0x3d0>)
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 800087a:	6462      	str	r2, [r4, #68]	; 0x44
 800087c:	2102      	movs	r1, #2
 800087e:	2200      	movs	r2, #0
 8000880:	64a1      	str	r1, [r4, #72]	; 0x48
 8000882:	64e2      	str	r2, [r4, #76]	; 0x4c
 8000884:	e681      	b.n	800058a <_usb_ep0setup+0x2a>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000886:	2a01      	cmp	r2, #1
 8000888:	f47f aeab 	bne.w	80005e2 <_usb_ep0setup+0x82>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 800088c:	4a29      	ldr	r2, [pc, #164]	; (8000934 <_usb_ep0setup+0x3d4>)
 800088e:	e7f4      	b.n	800087a <_usb_ep0setup+0x31a>
  hw |= (uint16_t)*p << 8U;
 8000890:	f894 0055 	ldrb.w	r0, [r4, #85]	; 0x55
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8000894:	6861      	ldr	r1, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 8000896:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800089a:	684e      	ldr	r6, [r1, #4]
 800089c:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 80008a0:	f894 1053 	ldrb.w	r1, [r4, #83]	; 0x53
 80008a4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80008a8:	4620      	mov	r0, r4
 80008aa:	47b0      	blx	r6
    if (dp == NULL) {
 80008ac:	2800      	cmp	r0, #0
 80008ae:	f43f ae98 	beq.w	80005e2 <_usb_ep0setup+0x82>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 80008b2:	e890 000a 	ldmia.w	r0, {r1, r3}
 80008b6:	64e5      	str	r5, [r4, #76]	; 0x4c
 80008b8:	6463      	str	r3, [r4, #68]	; 0x44
 80008ba:	64a1      	str	r1, [r4, #72]	; 0x48
 80008bc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80008c0:	e663      	b.n	800058a <_usb_ep0setup+0x2a>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 80008c2:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	f47f ae8b 	bne.w	80005e2 <_usb_ep0setup+0x82>
      usbp->status |= 2U;
 80008cc:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80008d0:	6465      	str	r5, [r4, #68]	; 0x44
      usbp->status |= 2U;
 80008d2:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80008d6:	64a5      	str	r5, [r4, #72]	; 0x48
 80008d8:	64e5      	str	r5, [r4, #76]	; 0x4c
      usbp->status |= 2U;
 80008da:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 80008de:	e720      	b.n	8000722 <_usb_ep0setup+0x1c2>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 80008e0:	4a15      	ldr	r2, [pc, #84]	; (8000938 <_usb_ep0setup+0x3d8>)
 80008e2:	e7ca      	b.n	800087a <_usb_ep0setup+0x31a>
  usbp->address = usbp->setup[2];
 80008e4:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
  stm32_otg_t *otgp = usbp->otg;
 80008e8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80008ea:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 80008ee:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 80008f2:	6865      	ldr	r5, [r4, #4]
 80008f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80008f8:	682d      	ldr	r5, [r5, #0]
 80008fa:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80008fe:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 8000902:	b125      	cbz	r5, 800090e <_usb_ep0setup+0x3ae>
 8000904:	2101      	movs	r1, #1
 8000906:	4620      	mov	r0, r4
 8000908:	47a8      	blx	r5
 800090a:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
  usbp->state = USB_SELECTED;
 800090e:	2303      	movs	r3, #3
 8000910:	7023      	strb	r3, [r4, #0]
 8000912:	e702      	b.n	800071a <_usb_ep0setup+0x1ba>
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8000914:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8000918:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800091c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8000920:	e6fb      	b.n	800071a <_usb_ep0setup+0x1ba>
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8000922:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8000926:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800092a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800092e:	e6f4      	b.n	800071a <_usb_ep0setup+0x1ba>
 8000930:	08003620 	.word	0x08003620
 8000934:	080036c0 	.word	0x080036c0
 8000938:	08003630 	.word	0x08003630
 800093c:	00000000 	.word	0x00000000

08000940 <dmaStreamRelease>:
  /* Check if the streams is not taken.*/
  osalDbgAssert((dma_streams_mask & (1U << dmastp->selfindex)) != 0U,
                "not allocated");

  /* Disables the associated IRQ vector.*/
  nvicDisableVector(dmastp->vector);
 8000940:	7a82      	ldrb	r2, [r0, #10]
void dmaStreamRelease(const stm32_dma_stream_t *dmastp) {
 8000942:	b470      	push	{r4, r5, r6}
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8000944:	0953      	lsrs	r3, r2, #5
 8000946:	4e13      	ldr	r6, [pc, #76]	; (8000994 <dmaStreamRelease+0x54>)

  /* Marks the stream as not allocated.*/
  dma_streams_mask &= ~(1U << dmastp->selfindex);
 8000948:	4d13      	ldr	r5, [pc, #76]	; (8000998 <dmaStreamRelease+0x58>)
 800094a:	3320      	adds	r3, #32
 800094c:	f002 041f 	and.w	r4, r2, #31
 8000950:	2101      	movs	r1, #1
 8000952:	fa01 f404 	lsl.w	r4, r1, r4
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 8000956:	4432      	add	r2, r6
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8000958:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
  NVIC->IP[n] = 0U;
 800095c:	2300      	movs	r3, #0
 800095e:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
 8000962:	7a42      	ldrb	r2, [r0, #9]
 8000964:	682b      	ldr	r3, [r5, #0]
 8000966:	4091      	lsls	r1, r2
 8000968:	ea23 0301 	bic.w	r3, r3, r1

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 800096c:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma_streams_mask &= ~(1U << dmastp->selfindex);
 8000970:	602b      	str	r3, [r5, #0]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8000972:	d104      	bne.n	800097e <dmaStreamRelease+0x3e>
    rccDisableDMA1(false);
 8000974:	4909      	ldr	r1, [pc, #36]	; (800099c <dmaStreamRelease+0x5c>)
 8000976:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000978:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800097c:	630a      	str	r2, [r1, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
 800097e:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000982:	d104      	bne.n	800098e <dmaStreamRelease+0x4e>
    rccDisableDMA2(false);
 8000984:	4a05      	ldr	r2, [pc, #20]	; (800099c <dmaStreamRelease+0x5c>)
 8000986:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000988:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
  }
}
 800098e:	bc70      	pop	{r4, r5, r6}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000e100 	.word	0xe000e100
 8000998:	20000e4c 	.word	0x20000e4c
 800099c:	40023800 	.word	0x40023800

080009a0 <dmaStreamAllocate>:
                       void *param) {
 80009a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 80009a2:	4f29      	ldr	r7, [pc, #164]	; (8000a48 <dmaStreamAllocate+0xa8>)
 80009a4:	7a46      	ldrb	r6, [r0, #9]
 80009a6:	f8d7 e000 	ldr.w	lr, [r7]
 80009aa:	2401      	movs	r4, #1
 80009ac:	fa04 f506 	lsl.w	r5, r4, r6
 80009b0:	ea15 0f0e 	tst.w	r5, lr
 80009b4:	d144      	bne.n	8000a40 <dmaStreamAllocate+0xa0>
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 80009b6:	4c25      	ldr	r4, [pc, #148]	; (8000a4c <dmaStreamAllocate+0xac>)
  dma_streams_mask |= (1U << dmastp->selfindex);
 80009b8:	ea45 050e 	orr.w	r5, r5, lr
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80009bc:	eb04 0ec6 	add.w	lr, r4, r6, lsl #3
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 80009c0:	f015 0fff 	tst.w	r5, #255	; 0xff
  dma_streams_mask |= (1U << dmastp->selfindex);
 80009c4:	603d      	str	r5, [r7, #0]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 80009c6:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80009ca:	f8ce 3004 	str.w	r3, [lr, #4]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 80009ce:	d004      	beq.n	80009da <dmaStreamAllocate+0x3a>
    rccEnableDMA1(false);
 80009d0:	4c1f      	ldr	r4, [pc, #124]	; (8000a50 <dmaStreamAllocate+0xb0>)
 80009d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009d8:	6323      	str	r3, [r4, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 80009da:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 80009de:	d129      	bne.n	8000a34 <dmaStreamAllocate+0x94>
  dmaStreamDisable(dmastp);
 80009e0:	6805      	ldr	r5, [r0, #0]
 80009e2:	682b      	ldr	r3, [r5, #0]
 80009e4:	f023 031f 	bic.w	r3, r3, #31
 80009e8:	602b      	str	r3, [r5, #0]
 80009ea:	682b      	ldr	r3, [r5, #0]
 80009ec:	f013 0301 	ands.w	r3, r3, #1
 80009f0:	d1fb      	bne.n	80009ea <dmaStreamAllocate+0x4a>
 80009f2:	7a07      	ldrb	r7, [r0, #8]
 80009f4:	6844      	ldr	r4, [r0, #4]
 80009f6:	263d      	movs	r6, #61	; 0x3d
 80009f8:	40be      	lsls	r6, r7
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80009fa:	2721      	movs	r7, #33	; 0x21
  dmaStreamDisable(dmastp);
 80009fc:	6026      	str	r6, [r4, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 80009fe:	602b      	str	r3, [r5, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8000a00:	616f      	str	r7, [r5, #20]
  if (func != NULL) {
 8000a02:	b1fa      	cbz	r2, 8000a44 <dmaStreamAllocate+0xa4>
    nvicEnableVector(dmastp->vector, priority);
 8000a04:	7a80      	ldrb	r0, [r0, #10]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000a06:	0942      	lsrs	r2, r0, #5
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000a08:	f100 4560 	add.w	r5, r0, #3758096384	; 0xe0000000
 8000a0c:	0092      	lsls	r2, r2, #2
 8000a0e:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8000a12:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8000a16:	0109      	lsls	r1, r1, #4
 8000a18:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000a1c:	f000 001f 	and.w	r0, r0, #31
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000a20:	b2c9      	uxtb	r1, r1
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000a22:	2401      	movs	r4, #1
 8000a24:	4084      	lsls	r4, r0
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000a26:	f885 1300 	strb.w	r1, [r5, #768]	; 0x300
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000a2a:	4618      	mov	r0, r3
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000a2c:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000a30:	6014      	str	r4, [r2, #0]
 8000a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rccEnableDMA2(false);
 8000a34:	4c06      	ldr	r4, [pc, #24]	; (8000a50 <dmaStreamAllocate+0xb0>)
 8000a36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a3c:	6323      	str	r3, [r4, #48]	; 0x30
 8000a3e:	e7cf      	b.n	80009e0 <dmaStreamAllocate+0x40>
    return true;
 8000a40:	4620      	mov	r0, r4
 8000a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (func != NULL) {
 8000a44:	4610      	mov	r0, r2
}
 8000a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a48:	20000e4c 	.word	0x20000e4c
 8000a4c:	20000dcc 	.word	0x20000dcc
 8000a50:	40023800 	.word	0x40023800
	...

08000a60 <_port_irq_epilogue>:
 8000a60:	2320      	movs	r3, #32
 8000a62:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <_port_irq_epilogue+0x58>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000a6e:	d102      	bne.n	8000a76 <_port_irq_epilogue+0x16>
 8000a70:	f383 8811 	msr	BASEPRI, r3
 8000a74:	4770      	bx	lr
void _port_irq_epilogue(void) {
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8000a7a:	eef1 3a10 	vmrs	r3, fpscr
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000a7e:	f3ef 8309 	mrs	r3, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8000a82:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <_port_irq_epilogue+0x5c>)
    ctxp->xpsr = (regarm_t)0x01000000;
 8000a84:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8000a88:	68d2      	ldr	r2, [r2, #12]
 8000a8a:	f843 2c08 	str.w	r2, [r3, #-8]
    ctxp->xpsr = (regarm_t)0x01000000;
 8000a8e:	f843 1c4c 	str.w	r1, [r3, #-76]
    ctxp--;
 8000a92:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000a96:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8000a9a:	4a09      	ldr	r2, [pc, #36]	; (8000ac0 <_port_irq_epilogue+0x60>)
 8000a9c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8000a9e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000aa0:	6889      	ldr	r1, [r1, #8]
 8000aa2:	6892      	ldr	r2, [r2, #8]
 8000aa4:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000aa6:	bf8c      	ite	hi
 8000aa8:	4a06      	ldrhi	r2, [pc, #24]	; (8000ac4 <_port_irq_epilogue+0x64>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000aaa:	4a07      	ldrls	r2, [pc, #28]	; (8000ac8 <_port_irq_epilogue+0x68>)
 8000aac:	f843 2c50 	str.w	r2, [r3, #-80]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00
 8000abc:	e000ef30 	.word	0xe000ef30
 8000ac0:	20000b98 	.word	0x20000b98
 8000ac4:	080002f9 	.word	0x080002f9
 8000ac8:	080002fc 	.word	0x080002fc
 8000acc:	00000000 	.word	0x00000000

08000ad0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000ad4:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8000ad8:	6933      	ldr	r3, [r6, #16]
 8000ada:	079b      	lsls	r3, r3, #30
 8000adc:	d403      	bmi.n	8000ae6 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8000ade:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8000ae2:	f7ff bfbd 	b.w	8000a60 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
 8000ae6:	2500      	movs	r5, #0
 8000ae8:	6135      	str	r5, [r6, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000aea:	2720      	movs	r7, #32
 8000aec:	f387 8811 	msr	BASEPRI, r7
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8000af0:	4c1b      	ldr	r4, [pc, #108]	; (8000b60 <VectorB0+0x90>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000af2:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8000af4:	69e3      	ldr	r3, [r4, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000af6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000af8:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8000afc:	1a88      	subs	r0, r1, r2
 8000afe:	4570      	cmp	r0, lr
 8000b00:	f104 081c 	add.w	r8, r4, #28
 8000b04:	d319      	bcc.n	8000b3a <VectorB0+0x6a>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000b06:	6819      	ldr	r1, [r3, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8000b08:	f8d3 900c 	ldr.w	r9, [r3, #12]
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000b0c:	4472      	add	r2, lr
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000b0e:	4541      	cmp	r1, r8
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000b10:	62a2      	str	r2, [r4, #40]	; 0x28
    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000b12:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8000b16:	61e1      	str	r1, [r4, #28]
    vtp->vt_func = NULL;
 8000b18:	60dd      	str	r5, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000b1a:	bf08      	it	eq
 8000b1c:	60f5      	streq	r5, [r6, #12]
 8000b1e:	f385 8811 	msr	BASEPRI, r5
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8000b22:	6918      	ldr	r0, [r3, #16]
 8000b24:	47c8      	blx	r9
 8000b26:	f387 8811 	msr	BASEPRI, r7
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8000b2a:	69e3      	ldr	r3, [r4, #28]
  return (systime_t)STM32_ST_TIM->CNT;
 8000b2c:	6a71      	ldr	r1, [r6, #36]	; 0x24
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000b2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b30:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8000b34:	1a88      	subs	r0, r1, r2
 8000b36:	4586      	cmp	lr, r0
 8000b38:	d9e5      	bls.n	8000b06 <VectorB0+0x36>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000b3a:	4543      	cmp	r3, r8
 8000b3c:	d008      	beq.n	8000b50 <VectorB0+0x80>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 8000b3e:	4472      	add	r2, lr
 8000b40:	1a52      	subs	r2, r2, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000b42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 8000b46:	2a02      	cmp	r2, #2
 8000b48:	bf2c      	ite	cs
 8000b4a:	188a      	addcs	r2, r1, r2
 8000b4c:	1c8a      	addcc	r2, r1, #2
 8000b4e:	635a      	str	r2, [r3, #52]	; 0x34
 8000b50:	2300      	movs	r3, #0
 8000b52:	f383 8811 	msr	BASEPRI, r3
}
 8000b56:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8000b5a:	f7ff bf81 	b.w	8000a60 <_port_irq_epilogue>
 8000b5e:	bf00      	nop
 8000b60:	20000b98 	.word	0x20000b98
	...

08000b70 <Vector158>:
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <Vector158+0x24>)
  if (dma_isr_redir[15].dma_func)
 8000b72:	4809      	ldr	r0, [pc, #36]	; (8000b98 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000b74:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
 8000b76:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000b78:	0d89      	lsrs	r1, r1, #22
 8000b7a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8000b7e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 8000b80:	058c      	lsls	r4, r1, #22
 8000b82:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8000b84:	b10a      	cbz	r2, 8000b8a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8000b86:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8000b88:	4790      	blx	r2
}
 8000b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000b8e:	f7ff bf67 	b.w	8000a60 <_port_irq_epilogue>
 8000b92:	bf00      	nop
 8000b94:	40026400 	.word	0x40026400
 8000b98:	20000dcc 	.word	0x20000dcc
 8000b9c:	00000000 	.word	0x00000000

08000ba0 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
 8000ba2:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000ba4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
 8000ba6:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000ba8:	0c09      	lsrs	r1, r1, #16
 8000baa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8000bae:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 8000bb0:	040c      	lsls	r4, r1, #16
 8000bb2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 8000bb4:	b10a      	cbz	r2, 8000bba <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8000bb6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8000bb8:	4790      	blx	r2
}
 8000bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000bbe:	f7ff bf4f 	b.w	8000a60 <_port_irq_epilogue>
 8000bc2:	bf00      	nop
 8000bc4:	40026400 	.word	0x40026400
 8000bc8:	20000dcc 	.word	0x20000dcc
 8000bcc:	00000000 	.word	0x00000000

08000bd0 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
 8000bd2:	4809      	ldr	r0, [pc, #36]	; (8000bf8 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000bd4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
 8000bd6:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000bd8:	0989      	lsrs	r1, r1, #6
 8000bda:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8000bde:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 8000be0:	018c      	lsls	r4, r1, #6
 8000be2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 8000be4:	b10a      	cbz	r2, 8000bea <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8000be6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8000be8:	4790      	blx	r2
}
 8000bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000bee:	f7ff bf37 	b.w	8000a60 <_port_irq_epilogue>
 8000bf2:	bf00      	nop
 8000bf4:	40026400 	.word	0x40026400
 8000bf8:	20000dcc 	.word	0x20000dcc
 8000bfc:	00000000 	.word	0x00000000

08000c00 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8000c00:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
 8000c04:	4807      	ldr	r0, [pc, #28]	; (8000c24 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000c06:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
 8000c08:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000c0a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8000c0e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8000c10:	b10a      	cbz	r2, 8000c16 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8000c12:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8000c14:	4790      	blx	r2
}
 8000c16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8000c1a:	f7ff bf21 	b.w	8000a60 <_port_irq_epilogue>
 8000c1e:	bf00      	nop
 8000c20:	40026400 	.word	0x40026400
 8000c24:	20000dcc 	.word	0x20000dcc
	...

08000c30 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
 8000c32:	4809      	ldr	r0, [pc, #36]	; (8000c58 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000c34:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
 8000c36:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000c38:	0d89      	lsrs	r1, r1, #22
 8000c3a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8000c3e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 8000c40:	058c      	lsls	r4, r1, #22
 8000c42:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 8000c44:	b10a      	cbz	r2, 8000c4a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8000c46:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8000c48:	4790      	blx	r2
}
 8000c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000c4e:	f7ff bf07 	b.w	8000a60 <_port_irq_epilogue>
 8000c52:	bf00      	nop
 8000c54:	40026400 	.word	0x40026400
 8000c58:	20000dcc 	.word	0x20000dcc
 8000c5c:	00000000 	.word	0x00000000

08000c60 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
 8000c62:	4809      	ldr	r0, [pc, #36]	; (8000c88 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000c64:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
 8000c66:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000c68:	0c09      	lsrs	r1, r1, #16
 8000c6a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8000c6e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 8000c70:	040c      	lsls	r4, r1, #16
 8000c72:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8000c74:	b10a      	cbz	r2, 8000c7a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8000c76:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8000c78:	4790      	blx	r2
}
 8000c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000c7e:	f7ff beef 	b.w	8000a60 <_port_irq_epilogue>
 8000c82:	bf00      	nop
 8000c84:	40026400 	.word	0x40026400
 8000c88:	20000dcc 	.word	0x20000dcc
 8000c8c:	00000000 	.word	0x00000000

08000c90 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
 8000c92:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000c94:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
 8000c96:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000c98:	0989      	lsrs	r1, r1, #6
 8000c9a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8000c9e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 8000ca0:	018c      	lsls	r4, r1, #6
 8000ca2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 8000ca4:	b10a      	cbz	r2, 8000caa <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8000ca6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8000ca8:	4790      	blx	r2
}
 8000caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000cae:	f7ff bed7 	b.w	8000a60 <_port_irq_epilogue>
 8000cb2:	bf00      	nop
 8000cb4:	40026400 	.word	0x40026400
 8000cb8:	20000dcc 	.word	0x20000dcc
 8000cbc:	00000000 	.word	0x00000000

08000cc0 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8000cc0:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
 8000cc4:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000cc6:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
 8000cc8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000cca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8000cce:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 8000cd0:	b10a      	cbz	r2, 8000cd6 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 8000cd2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000cd4:	4790      	blx	r2
}
 8000cd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8000cda:	f7ff bec1 	b.w	8000a60 <_port_irq_epilogue>
 8000cde:	bf00      	nop
 8000ce0:	40026400 	.word	0x40026400
 8000ce4:	20000dcc 	.word	0x20000dcc
	...

08000cf0 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
 8000cf2:	4809      	ldr	r0, [pc, #36]	; (8000d18 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000cf4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
 8000cf6:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000cf8:	0d89      	lsrs	r1, r1, #22
 8000cfa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8000cfe:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 8000d00:	058c      	lsls	r4, r1, #22
 8000d02:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 8000d04:	b10a      	cbz	r2, 8000d0a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 8000d06:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000d08:	4790      	blx	r2
}
 8000d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000d0e:	f7ff bea7 	b.w	8000a60 <_port_irq_epilogue>
 8000d12:	bf00      	nop
 8000d14:	40026000 	.word	0x40026000
 8000d18:	20000dcc 	.word	0x20000dcc
 8000d1c:	00000000 	.word	0x00000000

08000d20 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
 8000d22:	4809      	ldr	r0, [pc, #36]	; (8000d48 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000d24:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 8000d26:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000d28:	0c09      	lsrs	r1, r1, #16
 8000d2a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8000d2e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 8000d30:	040c      	lsls	r4, r1, #16
 8000d32:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 8000d34:	b10a      	cbz	r2, 8000d3a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8000d36:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000d38:	4790      	blx	r2
}
 8000d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000d3e:	f7ff be8f 	b.w	8000a60 <_port_irq_epilogue>
 8000d42:	bf00      	nop
 8000d44:	40026000 	.word	0x40026000
 8000d48:	20000dcc 	.word	0x20000dcc
 8000d4c:	00000000 	.word	0x00000000

08000d50 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
 8000d52:	4809      	ldr	r0, [pc, #36]	; (8000d78 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000d54:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 8000d56:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000d58:	0989      	lsrs	r1, r1, #6
 8000d5a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8000d5e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 8000d60:	018c      	lsls	r4, r1, #6
 8000d62:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8000d64:	b10a      	cbz	r2, 8000d6a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8000d66:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000d68:	4790      	blx	r2
}
 8000d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000d6e:	f7ff be77 	b.w	8000a60 <_port_irq_epilogue>
 8000d72:	bf00      	nop
 8000d74:	40026000 	.word	0x40026000
 8000d78:	20000dcc 	.word	0x20000dcc
 8000d7c:	00000000 	.word	0x00000000

08000d80 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8000d80:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
 8000d84:	4807      	ldr	r0, [pc, #28]	; (8000da4 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000d86:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 8000d88:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000d8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 8000d8e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8000d90:	b10a      	cbz	r2, 8000d96 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8000d92:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000d94:	4790      	blx	r2
}
 8000d96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8000d9a:	f7ff be61 	b.w	8000a60 <_port_irq_epilogue>
 8000d9e:	bf00      	nop
 8000da0:	40026000 	.word	0x40026000
 8000da4:	20000dcc 	.word	0x20000dcc
	...

08000db0 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
 8000db2:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000db4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
 8000db6:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000db8:	0d89      	lsrs	r1, r1, #22
 8000dba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8000dbe:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 8000dc0:	058c      	lsls	r4, r1, #22
 8000dc2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 8000dc4:	b10a      	cbz	r2, 8000dca <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8000dc6:	69c0      	ldr	r0, [r0, #28]
 8000dc8:	4790      	blx	r2
}
 8000dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000dce:	f7ff be47 	b.w	8000a60 <_port_irq_epilogue>
 8000dd2:	bf00      	nop
 8000dd4:	40026000 	.word	0x40026000
 8000dd8:	20000dcc 	.word	0x20000dcc
 8000ddc:	00000000 	.word	0x00000000

08000de0 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
 8000de2:	4809      	ldr	r0, [pc, #36]	; (8000e08 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000de4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
 8000de6:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000de8:	0c09      	lsrs	r1, r1, #16
 8000dea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8000dee:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 8000df0:	040c      	lsls	r4, r1, #16
 8000df2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 8000df4:	b10a      	cbz	r2, 8000dfa <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8000df6:	6940      	ldr	r0, [r0, #20]
 8000df8:	4790      	blx	r2
}
 8000dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000dfe:	f7ff be2f 	b.w	8000a60 <_port_irq_epilogue>
 8000e02:	bf00      	nop
 8000e04:	40026000 	.word	0x40026000
 8000e08:	20000dcc 	.word	0x20000dcc
 8000e0c:	00000000 	.word	0x00000000

08000e10 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
 8000e12:	4809      	ldr	r0, [pc, #36]	; (8000e38 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000e14:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
 8000e16:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000e18:	0989      	lsrs	r1, r1, #6
 8000e1a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8000e1e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 8000e20:	018c      	lsls	r4, r1, #6
 8000e22:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 8000e24:	b10a      	cbz	r2, 8000e2a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8000e26:	68c0      	ldr	r0, [r0, #12]
 8000e28:	4790      	blx	r2
}
 8000e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8000e2e:	f7ff be17 	b.w	8000a60 <_port_irq_epilogue>
 8000e32:	bf00      	nop
 8000e34:	40026000 	.word	0x40026000
 8000e38:	20000dcc 	.word	0x20000dcc
 8000e3c:	00000000 	.word	0x00000000

08000e40 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8000e40:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8000e46:	6819      	ldr	r1, [r3, #0]
 8000e48:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8000e4c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 8000e4e:	6813      	ldr	r3, [r2, #0]
 8000e50:	b10b      	cbz	r3, 8000e56 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8000e52:	6850      	ldr	r0, [r2, #4]
 8000e54:	4798      	blx	r3
}
 8000e56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8000e5a:	f7ff be01 	b.w	8000a60 <_port_irq_epilogue>
 8000e5e:	bf00      	nop
 8000e60:	40026000 	.word	0x40026000
 8000e64:	20000dcc 	.word	0x20000dcc
	...

08000e70 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000e72:	4a0f      	ldr	r2, [pc, #60]	; (8000eb0 <chTMStopMeasurementX+0x40>)
 8000e74:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 8000e76:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000e78:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 8000e7a:	6887      	ldr	r7, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000e7c:	6f56      	ldr	r6, [r2, #116]	; 0x74
  if (tmp->last > tmp->worst) {
 8000e7e:	6842      	ldr	r2, [r0, #4]
  tmp->cumulative += (rttime_t)tmp->last;
 8000e80:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8000e84:	1bdb      	subs	r3, r3, r7
 8000e86:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8000e88:	18e4      	adds	r4, r4, r3
 8000e8a:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000e8e:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8000e90:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 8000e92:	bf88      	it	hi
 8000e94:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 8000e96:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 8000e98:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 8000e9a:	e9c0 4504 	strd	r4, r5, [r0, #16]
  tmp->n++;
 8000e9e:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000ea0:	6083      	str	r3, [r0, #8]
    tmp->best = tmp->last;
 8000ea2:	bf38      	it	cc
 8000ea4:	6003      	strcc	r3, [r0, #0]
}
 8000ea6:	bcf0      	pop	{r4, r5, r6, r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e0001000 	.word	0xe0001000
 8000eb0:	20000b98 	.word	0x20000b98
	...

08000ec0 <chSchDoReschedule>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->p_next;
 8000ec2:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8000ec4:	b470      	push	{r4, r5, r6}
  tqp->p_next = tp->p_next;
 8000ec6:	6803      	ldr	r3, [r0, #0]
  otp = currp;
 8000ec8:	6994      	ldr	r4, [r2, #24]
 8000eca:	6013      	str	r3, [r2, #0]
  currp->p_state = CH_STATE_CURRENT;
 8000ecc:	2601      	movs	r6, #1
  otp->p_state = CH_STATE_READY;
 8000ece:	2500      	movs	r5, #0
  if (otp->p_prio == IDLEPRIO) {
 8000ed0:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000ed2:	605a      	str	r2, [r3, #4]
  currp->p_state = CH_STATE_CURRENT;
 8000ed4:	7706      	strb	r6, [r0, #28]
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000ed6:	6190      	str	r0, [r2, #24]
  otp->p_state = CH_STATE_READY;
 8000ed8:	7725      	strb	r5, [r4, #28]
 8000eda:	e000      	b.n	8000ede <chSchDoReschedule+0x1e>
 8000edc:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio > otp->p_prio);
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	4291      	cmp	r1, r2
 8000ee2:	d3fb      	bcc.n	8000edc <chSchDoReschedule+0x1c>
  otp->p_prev = cp->p_prev;
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	6062      	str	r2, [r4, #4]
  otp->p_next = cp;
 8000ee8:	6023      	str	r3, [r4, #0]
  chSysSwitch(currp, otp);
 8000eea:	4621      	mov	r1, r4
  otp->p_prev->p_next = otp;
 8000eec:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 8000eee:	605c      	str	r4, [r3, #4]
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 8000ef0:	bc70      	pop	{r4, r5, r6}
  chSysSwitch(currp, otp);
 8000ef2:	f7ff b9ed 	b.w	80002d0 <_port_switch>
 8000ef6:	bf00      	nop
 8000ef8:	20000b98 	.word	0x20000b98
 8000efc:	00000000 	.word	0x00000000

08000f00 <chSchGoSleepS>:
  otp = currp;
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <chSchGoSleepS+0x20>)
 8000f02:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->p_next;
 8000f04:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8000f06:	b410      	push	{r4}
  otp->p_state = newstate;
 8000f08:	7708      	strb	r0, [r1, #28]
  tqp->p_next = tp->p_next;
 8000f0a:	6810      	ldr	r0, [r2, #0]
 8000f0c:	6018      	str	r0, [r3, #0]
  currp->p_state = CH_STATE_CURRENT;
 8000f0e:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000f10:	6043      	str	r3, [r0, #4]
 8000f12:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 8000f14:	4610      	mov	r0, r2
}
 8000f16:	f85d 4b04 	ldr.w	r4, [sp], #4
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000f1a:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 8000f1c:	f7ff b9d8 	b.w	80002d0 <_port_switch>
 8000f20:	20000b98 	.word	0x20000b98
	...

08000f30 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000f30:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != time) {
 8000f32:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000f34:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
 8000f36:	d04c      	beq.n	8000fd2 <chSchGoSleepTimeoutS+0xa2>
    chVTDoSetI(&vt, time, wakeup, currp);
 8000f38:	4c40      	ldr	r4, [pc, #256]	; (800103c <chSchGoSleepTimeoutS+0x10c>)
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000f3a:	4625      	mov	r5, r4
  vtp->vt_par = par;
 8000f3c:	69a3      	ldr	r3, [r4, #24]
 8000f3e:	9305      	str	r3, [sp, #20]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000f40:	f855 3f1c 	ldr.w	r3, [r5, #28]!
 8000f44:	2902      	cmp	r1, #2
  return (systime_t)STM32_ST_TIM->CNT;
 8000f46:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 8000f4a:	4607      	mov	r7, r0
 8000f4c:	bf38      	it	cc
 8000f4e:	2102      	movcc	r1, #2
  vtp->vt_func = vtfunc;
 8000f50:	483b      	ldr	r0, [pc, #236]	; (8001040 <chSchGoSleepTimeoutS+0x110>)
 8000f52:	f8de 2024 	ldr.w	r2, [lr, #36]	; 0x24
 8000f56:	9004      	str	r0, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000f58:	42ab      	cmp	r3, r5
 8000f5a:	d05a      	beq.n	8001012 <chSchGoSleepTimeoutS+0xe2>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.vt_next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.vt_lasttime + delay;
 8000f5c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000f5e:	1a12      	subs	r2, r2, r0

    if (delta < now - ch.vtlist.vt_lasttime) {
 8000f60:	1889      	adds	r1, r1, r2
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
 8000f62:	689a      	ldr	r2, [r3, #8]
    if (delta < now - ch.vtlist.vt_lasttime) {
 8000f64:	d231      	bcs.n	8000fca <chSchGoSleepTimeoutS+0x9a>
      p = p->vt_next;
    }
    else if (delta < p->vt_delta) {
 8000f66:	4291      	cmp	r1, r2
     /* A small delay that will become the first element in the delta list
        and next deadline.*/
      port_timer_set_alarm(ch.vtlist.vt_lasttime + delta);
 8000f68:	bf3c      	itt	cc
 8000f6a:	1840      	addcc	r0, r0, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000f6c:	f8ce 0034 	strcc.w	r0, [lr, #52]	; 0x34
  p = ch.vtlist.vt_next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
 8000f70:	4291      	cmp	r1, r2
 8000f72:	d904      	bls.n	8000f7e <chSchGoSleepTimeoutS+0x4e>
    delta -= p->vt_delta;
    p = p->vt_next;
 8000f74:	681b      	ldr	r3, [r3, #0]
    delta -= p->vt_delta;
 8000f76:	1a89      	subs	r1, r1, r2
  while (p->vt_delta < delta) {
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	428a      	cmp	r2, r1
 8000f7c:	d3fa      	bcc.n	8000f74 <chSchGoSleepTimeoutS+0x44>
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	9202      	str	r2, [sp, #8]
  vtp->vt_prev->vt_next = vtp;
 8000f82:	ae01      	add	r6, sp, #4
  vtp->vt_next = p;
 8000f84:	9301      	str	r3, [sp, #4]
  vtp->vt_prev->vt_next = vtp;
 8000f86:	6016      	str	r6, [r2, #0]
  p->vt_prev = vtp;
 8000f88:	605e      	str	r6, [r3, #4]
  vtp->vt_delta = delta
 8000f8a:	9103      	str	r1, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	1a51      	subs	r1, r2, r1
  ch.vtlist.vt_delta = (systime_t)-1;
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
  p->vt_delta -= delta;
 8000f94:	6099      	str	r1, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000f96:	6262      	str	r2, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000f98:	4638      	mov	r0, r7
 8000f9a:	f7ff ffb1 	bl	8000f00 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000f9e:	9b04      	ldr	r3, [sp, #16]
 8000fa0:	b17b      	cbz	r3, 8000fc2 <chSchGoSleepTimeoutS+0x92>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000fa2:	69e3      	ldr	r3, [r4, #28]
 8000fa4:	42b3      	cmp	r3, r6
 8000fa6:	d01b      	beq.n	8000fe0 <chSchGoSleepTimeoutS+0xb0>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8000fa8:	9a02      	ldr	r2, [sp, #8]
 8000faa:	9b01      	ldr	r3, [sp, #4]
 8000fac:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000fae:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_func = NULL;
 8000fb0:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000fb2:	42ab      	cmp	r3, r5
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000fb4:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 8000fb6:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000fb8:	d003      	beq.n	8000fc2 <chSchGoSleepTimeoutS+0x92>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	9903      	ldr	r1, [sp, #12]
 8000fbe:	440a      	add	r2, r1
 8000fc0:	609a      	str	r2, [r3, #8]
  return currp->p_u.rdymsg;
 8000fc2:	69a3      	ldr	r3, [r4, #24]
}
 8000fc4:	6a18      	ldr	r0, [r3, #32]
 8000fc6:	b007      	add	sp, #28
 8000fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      p = p->vt_next;
 8000fca:	681b      	ldr	r3, [r3, #0]
      delta -= p->vt_delta;
 8000fcc:	1a89      	subs	r1, r1, r2
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	e7ce      	b.n	8000f70 <chSchGoSleepTimeoutS+0x40>
 8000fd2:	4c1a      	ldr	r4, [pc, #104]	; (800103c <chSchGoSleepTimeoutS+0x10c>)
    chSchGoSleepS(newstate);
 8000fd4:	f7ff ff94 	bl	8000f00 <chSchGoSleepS>
  return currp->p_u.rdymsg;
 8000fd8:	69a3      	ldr	r3, [r4, #24]
}
 8000fda:	6a18      	ldr	r0, [r3, #32]
 8000fdc:	b007      	add	sp, #28
 8000fde:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8000fe0:	9a01      	ldr	r2, [sp, #4]
 8000fe2:	61e2      	str	r2, [r4, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8000fe4:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000fe6:	42aa      	cmp	r2, r5
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000fe8:	6055      	str	r5, [r2, #4]
  vtp->vt_func = NULL;
 8000fea:	9304      	str	r3, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000fec:	d022      	beq.n	8001034 <chSchGoSleepTimeoutS+0x104>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000fee:	6893      	ldr	r3, [r2, #8]
 8000ff0:	9803      	ldr	r0, [sp, #12]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000ff2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000ff4:	4403      	add	r3, r0
  return (systime_t)STM32_ST_TIM->CNT;
 8000ff6:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8000ffa:	6093      	str	r3, [r2, #8]
 8000ffc:	6a68      	ldr	r0, [r5, #36]	; 0x24
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000ffe:	1a42      	subs	r2, r0, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8001000:	4293      	cmp	r3, r2
 8001002:	d9de      	bls.n	8000fc2 <chSchGoSleepTimeoutS+0x92>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8001004:	1a9b      	subs	r3, r3, r2
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8001006:	2b02      	cmp	r3, #2
 8001008:	bf2c      	ite	cs
 800100a:	18c3      	addcs	r3, r0, r3
 800100c:	1c83      	addcc	r3, r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800100e:	636b      	str	r3, [r5, #52]	; 0x34
 8001010:	e7d7      	b.n	8000fc2 <chSchGoSleepTimeoutS+0x92>
      ch.vtlist.vt_lasttime = now;
 8001012:	62a2      	str	r2, [r4, #40]	; 0x28
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8001014:	1888      	adds	r0, r1, r2
      ch.vtlist.vt_next = vtp;
 8001016:	ae01      	add	r6, sp, #4
  STM32_ST_TIM->SR     = 0;
 8001018:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800101a:	2302      	movs	r3, #2
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 800101c:	9501      	str	r5, [sp, #4]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800101e:	9502      	str	r5, [sp, #8]
      vtp->vt_delta = delay;
 8001020:	9103      	str	r1, [sp, #12]
      ch.vtlist.vt_next = vtp;
 8001022:	61e6      	str	r6, [r4, #28]
      ch.vtlist.vt_prev = vtp;
 8001024:	6226      	str	r6, [r4, #32]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001026:	f8ce 0034 	str.w	r0, [lr, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800102a:	f8ce 2010 	str.w	r2, [lr, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800102e:	f8ce 300c 	str.w	r3, [lr, #12]
 8001032:	e7b1      	b.n	8000f98 <chSchGoSleepTimeoutS+0x68>
  STM32_ST_TIM->DIER = 0;
 8001034:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001038:	60d3      	str	r3, [r2, #12]
 800103a:	e7c2      	b.n	8000fc2 <chSchGoSleepTimeoutS+0x92>
 800103c:	20000b98 	.word	0x20000b98
 8001040:	08000371 	.word	0x08000371
	...

08001050 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8001050:	b169      	cbz	r1, 800106e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <chThdEnqueueTimeoutS+0x24>)
 8001054:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001056:	b410      	push	{r4}
  tp->p_next = (thread_t *)tqp;
 8001058:	6018      	str	r0, [r3, #0]
  tp->p_prev = tqp->p_prev;
 800105a:	6844      	ldr	r4, [r0, #4]
 800105c:	605c      	str	r4, [r3, #4]
 800105e:	4602      	mov	r2, r0
  tp->p_prev->p_next = tp;
 8001060:	6023      	str	r3, [r4, #0]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001062:	2004      	movs	r0, #4
  tqp->p_prev = tp;
 8001064:	6053      	str	r3, [r2, #4]
}
 8001066:	f85d 4b04 	ldr.w	r4, [sp], #4
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800106a:	f7ff bf61 	b.w	8000f30 <chSchGoSleepTimeoutS>
}
 800106e:	f04f 30ff 	mov.w	r0, #4294967295
 8001072:	4770      	bx	lr
 8001074:	20000b98 	.word	0x20000b98
	...

08001080 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8001080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001084:	b083      	sub	sp, #12
 8001086:	4604      	mov	r4, r0
 8001088:	460d      	mov	r5, r1
 800108a:	4616      	mov	r6, r2
 800108c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800108e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001092:	f04f 0920 	mov.w	r9, #32
 8001096:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 800109a:	2700      	movs	r7, #0
 800109c:	46ba      	mov	sl, r7
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800109e:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 80010a0:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 80010a4:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 80010a6:	b303      	cbz	r3, 80010ea <chOQWriteTimeout+0x6a>
    *oqp->q_wrptr++ = *bp++;
 80010a8:	6961      	ldr	r1, [r4, #20]
    oqp->q_counter--;
 80010aa:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80010ac:	1c4a      	adds	r2, r1, #1
    oqp->q_counter--;
 80010ae:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 80010b0:	6162      	str	r2, [r4, #20]
    oqp->q_counter--;
 80010b2:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80010b4:	782b      	ldrb	r3, [r5, #0]
 80010b6:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 80010b8:	6923      	ldr	r3, [r4, #16]
 80010ba:	6961      	ldr	r1, [r4, #20]
 80010bc:	4299      	cmp	r1, r3
      oqp->q_wrptr = oqp->q_buffer;
 80010be:	bf24      	itt	cs
 80010c0:	68e3      	ldrcs	r3, [r4, #12]
 80010c2:	6163      	strcs	r3, [r4, #20]
    if (nfy != NULL) {
 80010c4:	f1b8 0f00 	cmp.w	r8, #0
 80010c8:	d000      	beq.n	80010cc <chOQWriteTimeout+0x4c>
      nfy(oqp);
 80010ca:	47c0      	blx	r8
 80010cc:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 80010d0:	3e01      	subs	r6, #1
    w++;
 80010d2:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 80010d6:	d012      	beq.n	80010fe <chOQWriteTimeout+0x7e>
 80010d8:	f389 8811 	msr	BASEPRI, r9
 80010dc:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80010de:	465d      	mov	r5, fp
 80010e0:	f105 0b01 	add.w	fp, r5, #1
      nfy(oqp);
 80010e4:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1de      	bne.n	80010a8 <chOQWriteTimeout+0x28>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 80010ea:	9901      	ldr	r1, [sp, #4]
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	4620      	mov	r0, r4
 80010f0:	f7ff ffae 	bl	8001050 <chThdEnqueueTimeoutS>
 80010f4:	9b00      	ldr	r3, [sp, #0]
 80010f6:	2800      	cmp	r0, #0
 80010f8:	d0d1      	beq.n	800109e <chOQWriteTimeout+0x1e>
 80010fa:	f383 8811 	msr	BASEPRI, r3
      return w;
    }
    chSysLock();
  }
}
 80010fe:	4638      	mov	r0, r7
 8001100:	b003      	add	sp, #12
 8001102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001106:	bf00      	nop
	...

08001110 <writet.lto_priv.72>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001110:	3030      	adds	r0, #48	; 0x30
 8001112:	f7ff bfb5 	b.w	8001080 <chOQWriteTimeout>
 8001116:	bf00      	nop
	...

08001120 <write.lto_priv.66>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001120:	3030      	adds	r0, #48	; 0x30
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	f7ff bfab 	b.w	8001080 <chOQWriteTimeout>
 800112a:	bf00      	nop
 800112c:	0000      	movs	r0, r0
	...

08001130 <chOQPutTimeout>:
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8001130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001132:	4604      	mov	r4, r0
 8001134:	460f      	mov	r7, r1
 8001136:	4616      	mov	r6, r2
 8001138:	2320      	movs	r3, #32
 800113a:	f383 8811 	msr	BASEPRI, r3
 800113e:	e003      	b.n	8001148 <chOQPutTimeout+0x18>
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8001140:	f7ff ff86 	bl	8001050 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001144:	2800      	cmp	r0, #0
 8001146:	db19      	blt.n	800117c <chOQPutTimeout+0x4c>
 8001148:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800114a:	4631      	mov	r1, r6
 800114c:	4620      	mov	r0, r4
  while (chOQIsFullI(oqp)) {
 800114e:	2d00      	cmp	r5, #0
 8001150:	d0f6      	beq.n	8001140 <chOQPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
 8001152:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8001154:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001156:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8001158:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800115a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800115c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800115e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001160:	6923      	ldr	r3, [r4, #16]
 8001162:	6962      	ldr	r2, [r4, #20]
 8001164:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001166:	bf24      	itt	cs
 8001168:	68e3      	ldrcs	r3, [r4, #12]
 800116a:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 800116c:	69e3      	ldr	r3, [r4, #28]
 800116e:	b10b      	cbz	r3, 8001174 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 8001170:	4620      	mov	r0, r4
 8001172:	4798      	blx	r3
 8001174:	2000      	movs	r0, #0
 8001176:	f380 8811 	msr	BASEPRI, r0
}
 800117a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800117c:	f385 8811 	msr	BASEPRI, r5
 8001180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001182:	bf00      	nop
	...

08001190 <putt.lto_priv.70>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001190:	3030      	adds	r0, #48	; 0x30
 8001192:	f7ff bfcd 	b.w	8001130 <chOQPutTimeout>
 8001196:	bf00      	nop
	...

080011a0 <put.lto_priv.68>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80011a0:	3030      	adds	r0, #48	; 0x30
 80011a2:	f04f 32ff 	mov.w	r2, #4294967295
 80011a6:	f7ff bfc3 	b.w	8001130 <chOQPutTimeout>
 80011aa:	bf00      	nop
 80011ac:	0000      	movs	r0, r0
	...

080011b0 <chIQReadTimeout>:
                       size_t n, systime_t timeout) {
 80011b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011b4:	4604      	mov	r4, r0
 80011b6:	b083      	sub	sp, #12
 80011b8:	4689      	mov	r9, r1
 80011ba:	4693      	mov	fp, r2
 80011bc:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 80011be:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80011c2:	2720      	movs	r7, #32
 80011c4:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 80011c8:	2600      	movs	r6, #0
 80011ca:	9701      	str	r7, [sp, #4]
 80011cc:	46b2      	mov	sl, r6
    if (nfy != NULL) {
 80011ce:	f1b8 0f00 	cmp.w	r8, #0
 80011d2:	d005      	beq.n	80011e0 <chIQReadTimeout+0x30>
      nfy(iqp);
 80011d4:	4620      	mov	r0, r4
 80011d6:	47c0      	blx	r8
 80011d8:	e002      	b.n	80011e0 <chIQReadTimeout+0x30>
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 80011da:	f7ff ff39 	bl	8001050 <chThdEnqueueTimeoutS>
 80011de:	b9e0      	cbnz	r0, 800121a <chIQReadTimeout+0x6a>
  return (bool)(chQSpaceI(iqp) == 0U);
 80011e0:	68a7      	ldr	r7, [r4, #8]
 80011e2:	4629      	mov	r1, r5
 80011e4:	4620      	mov	r0, r4
    while (chIQIsEmptyI(iqp)) {
 80011e6:	2f00      	cmp	r7, #0
 80011e8:	d0f7      	beq.n	80011da <chIQReadTimeout+0x2a>
    *bp++ = *iqp->q_rdptr++;
 80011ea:	69a2      	ldr	r2, [r4, #24]
    iqp->q_counter--;
 80011ec:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80011ee:	1c51      	adds	r1, r2, #1
    iqp->q_counter--;
 80011f0:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 80011f2:	61a1      	str	r1, [r4, #24]
    iqp->q_counter--;
 80011f4:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80011f6:	7813      	ldrb	r3, [r2, #0]
 80011f8:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 80011fc:	6923      	ldr	r3, [r4, #16]
 80011fe:	69a2      	ldr	r2, [r4, #24]
 8001200:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8001202:	bf24      	itt	cs
 8001204:	68e3      	ldrcs	r3, [r4, #12]
 8001206:	61a3      	strcs	r3, [r4, #24]
 8001208:	f38a 8811 	msr	BASEPRI, sl
    r++;
 800120c:	3601      	adds	r6, #1
    if (--n == 0U) {
 800120e:	45b3      	cmp	fp, r6
 8001210:	d005      	beq.n	800121e <chIQReadTimeout+0x6e>
 8001212:	9b01      	ldr	r3, [sp, #4]
 8001214:	f383 8811 	msr	BASEPRI, r3
 8001218:	e7d9      	b.n	80011ce <chIQReadTimeout+0x1e>
 800121a:	f387 8811 	msr	BASEPRI, r7
}
 800121e:	4630      	mov	r0, r6
 8001220:	b003      	add	sp, #12
 8001222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001226:	bf00      	nop
	...

08001230 <readt.lto_priv.73>:
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001230:	300c      	adds	r0, #12
 8001232:	f7ff bfbd 	b.w	80011b0 <chIQReadTimeout>
 8001236:	bf00      	nop
	...

08001240 <read.lto_priv.67>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001240:	300c      	adds	r0, #12
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	f7ff bfb3 	b.w	80011b0 <chIQReadTimeout>
 800124a:	bf00      	nop
 800124c:	0000      	movs	r0, r0
	...

08001250 <chIQGetTimeout>:
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001250:	b570      	push	{r4, r5, r6, lr}
 8001252:	2320      	movs	r3, #32
 8001254:	460e      	mov	r6, r1
 8001256:	4604      	mov	r4, r0
 8001258:	f383 8811 	msr	BASEPRI, r3
  if (iqp->q_notify != NULL) {
 800125c:	69c3      	ldr	r3, [r0, #28]
 800125e:	b12b      	cbz	r3, 800126c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 8001260:	4798      	blx	r3
 8001262:	e003      	b.n	800126c <chIQGetTimeout+0x1c>
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001264:	f7ff fef4 	bl	8001050 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 8001268:	2800      	cmp	r0, #0
 800126a:	db15      	blt.n	8001298 <chIQGetTimeout+0x48>
 800126c:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800126e:	4631      	mov	r1, r6
 8001270:	4620      	mov	r0, r4
  while (chIQIsEmptyI(iqp)) {
 8001272:	2d00      	cmp	r5, #0
 8001274:	d0f6      	beq.n	8001264 <chIQGetTimeout+0x14>
  b = *iqp->q_rdptr++;
 8001276:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8001278:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 800127a:	6925      	ldr	r5, [r4, #16]
  b = *iqp->q_rdptr++;
 800127c:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 800127e:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8001280:	42aa      	cmp	r2, r5
  iqp->q_counter--;
 8001282:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8001284:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8001286:	bf28      	it	cs
 8001288:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 800128a:	7808      	ldrb	r0, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 800128c:	bf28      	it	cs
 800128e:	61a3      	strcs	r3, [r4, #24]
 8001290:	2300      	movs	r3, #0
 8001292:	f383 8811 	msr	BASEPRI, r3
}
 8001296:	bd70      	pop	{r4, r5, r6, pc}
 8001298:	f385 8811 	msr	BASEPRI, r5
 800129c:	bd70      	pop	{r4, r5, r6, pc}
 800129e:	bf00      	nop

080012a0 <gett.lto_priv.71>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80012a0:	300c      	adds	r0, #12
 80012a2:	f7ff bfd5 	b.w	8001250 <chIQGetTimeout>
 80012a6:	bf00      	nop
	...

080012b0 <get.lto_priv.69>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80012b0:	300c      	adds	r0, #12
 80012b2:	f04f 31ff 	mov.w	r1, #4294967295
 80012b6:	f7ff bfcb 	b.w	8001250 <chIQGetTimeout>
 80012ba:	bf00      	nop
 80012bc:	0000      	movs	r0, r0
	...

080012c0 <chThdSleep>:
void chThdSleep(systime_t time) {
 80012c0:	b508      	push	{r3, lr}
 80012c2:	4601      	mov	r1, r0
 80012c4:	2320      	movs	r3, #32
 80012c6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 80012ca:	2008      	movs	r0, #8
 80012cc:	f7ff fe30 	bl	8000f30 <chSchGoSleepTimeoutS>
 80012d0:	2300      	movs	r3, #0
 80012d2:	f383 8811 	msr	BASEPRI, r3
 80012d6:	bd08      	pop	{r3, pc}
	...

080012e0 <chSchReadyI>:
  tp->p_state = CH_STATE_READY;
 80012e0:	2200      	movs	r2, #0
 80012e2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <chSchReadyI+0x28>)
thread_t *chSchReadyI(thread_t *tp) {
 80012e6:	b410      	push	{r4}
 80012e8:	4604      	mov	r4, r0
  tp->p_state = CH_STATE_READY;
 80012ea:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 80012ec:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	428a      	cmp	r2, r1
 80012f2:	d2fb      	bcs.n	80012ec <chSchReadyI+0xc>
  tp->p_prev = cp->p_prev;
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	6062      	str	r2, [r4, #4]
  tp->p_next = cp;
 80012f8:	6023      	str	r3, [r4, #0]
}
 80012fa:	4620      	mov	r0, r4
  tp->p_prev->p_next = tp;
 80012fc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80012fe:	605c      	str	r4, [r3, #4]
}
 8001300:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000b98 	.word	0x20000b98
 800130c:	00000000 	.word	0x00000000

08001310 <chThdResumeI>:
  if (*trp != NULL) {
 8001310:	6803      	ldr	r3, [r0, #0]
 8001312:	b12b      	cbz	r3, 8001320 <chThdResumeI+0x10>
    *trp = NULL;
 8001314:	2200      	movs	r2, #0
 8001316:	6002      	str	r2, [r0, #0]
    (void) chSchReadyI(tp);
 8001318:	4618      	mov	r0, r3
    tp->p_u.rdymsg = msg;
 800131a:	6219      	str	r1, [r3, #32]
    (void) chSchReadyI(tp);
 800131c:	f7ff bfe0 	b.w	80012e0 <chSchReadyI>
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
	...

08001330 <chThdExit>:
void chThdExit(msg_t msg) {
 8001330:	b538      	push	{r3, r4, r5, lr}
 8001332:	2220      	movs	r2, #32
 8001334:	4603      	mov	r3, r0
 8001336:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 800133a:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <chThdExit+0x44>)
 800133c:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->p_next != (thread_t *)tlp);
 800133e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
 8001340:	6223      	str	r3, [r4, #32]
  while (list_notempty(&tp->p_waiting)) {
 8001342:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8001346:	4285      	cmp	r5, r0
 8001348:	d006      	beq.n	8001358 <chThdExit+0x28>
  tlp->p_next = tp->p_next;
 800134a:	6803      	ldr	r3, [r0, #0]
 800134c:	6263      	str	r3, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800134e:	f7ff ffc7 	bl	80012e0 <chSchReadyI>
  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001352:	6a60      	ldr	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->p_waiting)) {
 8001354:	42a8      	cmp	r0, r5
 8001356:	d1f8      	bne.n	800134a <chThdExit+0x1a>
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001358:	7f63      	ldrb	r3, [r4, #29]
 800135a:	079b      	lsls	r3, r3, #30
 800135c:	d104      	bne.n	8001368 <chThdExit+0x38>
    REG_REMOVE(tp);
 800135e:	6963      	ldr	r3, [r4, #20]
 8001360:	6922      	ldr	r2, [r4, #16]
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	6922      	ldr	r2, [r4, #16]
 8001366:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8001368:	200f      	movs	r0, #15
}
 800136a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 800136e:	f7ff bdc7 	b.w	8000f00 <chSchGoSleepS>
 8001372:	bf00      	nop
 8001374:	20000b98 	.word	0x20000b98
	...

08001380 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8001380:	e7fe      	b.n	8001380 <BusFault_Handler>
 8001382:	bf00      	nop
	...

08001390 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001392:	4f13      	ldr	r7, [pc, #76]	; (80013e0 <__init_ram_areas+0x50>)
 8001394:	4d13      	ldr	r5, [pc, #76]	; (80013e4 <__init_ram_areas+0x54>)
 8001396:	4c14      	ldr	r4, [pc, #80]	; (80013e8 <__init_ram_areas+0x58>)
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <__init_ram_areas+0x5c>)
 800139a:	4915      	ldr	r1, [pc, #84]	; (80013f0 <__init_ram_areas+0x60>)
 800139c:	f107 0e70 	add.w	lr, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 80013a0:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 80013a2:	429c      	cmp	r4, r3
 80013a4:	d911      	bls.n	80013ca <__init_ram_areas+0x3a>
 80013a6:	3904      	subs	r1, #4
 80013a8:	461a      	mov	r2, r3
      *p = *tp;
 80013aa:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80013ae:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 80013b2:	4294      	cmp	r4, r2
 80013b4:	d8f9      	bhi.n	80013aa <__init_ram_areas+0x1a>
 80013b6:	43da      	mvns	r2, r3
 80013b8:	4414      	add	r4, r2
 80013ba:	f024 0403 	bic.w	r4, r4, #3
 80013be:	3404      	adds	r4, #4
 80013c0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 80013c2:	429d      	cmp	r5, r3
 80013c4:	d903      	bls.n	80013ce <__init_ram_areas+0x3e>
      *p = 0;
 80013c6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 80013ca:	429d      	cmp	r5, r3
 80013cc:	d8fb      	bhi.n	80013c6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80013ce:	4577      	cmp	r7, lr
 80013d0:	d004      	beq.n	80013dc <__init_ram_areas+0x4c>
 80013d2:	f107 0110 	add.w	r1, r7, #16
 80013d6:	c93a      	ldmia	r1, {r1, r3, r4, r5}
 80013d8:	3710      	adds	r7, #16
 80013da:	e7e2      	b.n	80013a2 <__init_ram_areas+0x12>
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013de:	bf00      	nop
 80013e0:	08003640 	.word	0x08003640
 80013e4:	200011a8 	.word	0x200011a8
 80013e8:	200011a8 	.word	0x200011a8
 80013ec:	200011a8 	.word	0x200011a8
 80013f0:	08003950 	.word	0x08003950
	...

08001400 <__default_exit>:
void __default_exit(void) {
 8001400:	e7fe      	b.n	8001400 <__default_exit>
 8001402:	bf00      	nop
	...

08001410 <__late_init>:
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
	...

08001420 <__core_init>:
void __core_init(void) {
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
	...

08001430 <notify2.lto_priv.65>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8001430:	4a02      	ldr	r2, [pc, #8]	; (800143c <notify2.lto_priv.65+0xc>)
 8001432:	68d3      	ldr	r3, [r2, #12]
 8001434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001438:	60d3      	str	r3, [r2, #12]
 800143a:	4770      	bx	lr
 800143c:	40004400 	.word	0x40004400

08001440 <spi_lld_serve_tx_interrupt.lto_priv.76>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001440:	f011 0f0c 	tst.w	r1, #12
 8001444:	d100      	bne.n	8001448 <spi_lld_serve_tx_interrupt.lto_priv.76+0x8>
 8001446:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 800144a:	4b02      	ldr	r3, [pc, #8]	; (8001454 <spi_lld_serve_tx_interrupt.lto_priv.76+0x14>)
 800144c:	4a02      	ldr	r2, [pc, #8]	; (8001458 <spi_lld_serve_tx_interrupt.lto_priv.76+0x18>)
 800144e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001450:	e7fe      	b.n	8001450 <spi_lld_serve_tx_interrupt.lto_priv.76+0x10>
 8001452:	bf00      	nop
 8001454:	20000b98 	.word	0x20000b98
 8001458:	08003710 	.word	0x08003710
 800145c:	00000000 	.word	0x00000000

08001460 <i2c_lld_serve_tx_end_irq.lto_priv.61>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001460:	f011 0f0c 	tst.w	r1, #12
 8001464:	d113      	bne.n	800148e <i2c_lld_serve_tx_end_irq.lto_priv.61+0x2e>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 8001466:	6b02      	ldr	r2, [r0, #48]	; 0x30
  I2C_TypeDef *dp = i2cp->i2c;
 8001468:	6b40      	ldr	r0, [r0, #52]	; 0x34
  dmaStreamDisable(i2cp->dmatx);
 800146a:	6813      	ldr	r3, [r2, #0]
 800146c:	6819      	ldr	r1, [r3, #0]
 800146e:	f021 011f 	bic.w	r1, r1, #31
 8001472:	6019      	str	r1, [r3, #0]
 8001474:	6819      	ldr	r1, [r3, #0]
 8001476:	07c9      	lsls	r1, r1, #31
 8001478:	d4fc      	bmi.n	8001474 <i2c_lld_serve_tx_end_irq.lto_priv.61+0x14>
 800147a:	7a11      	ldrb	r1, [r2, #8]
 800147c:	6852      	ldr	r2, [r2, #4]
 800147e:	233d      	movs	r3, #61	; 0x3d
 8001480:	408b      	lsls	r3, r1
 8001482:	6013      	str	r3, [r2, #0]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8001484:	6843      	ldr	r3, [r0, #4]
 8001486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800148a:	6043      	str	r3, [r0, #4]
 800148c:	4770      	bx	lr
 800148e:	b672      	cpsid	i
 8001490:	4b01      	ldr	r3, [pc, #4]	; (8001498 <i2c_lld_serve_tx_end_irq.lto_priv.61+0x38>)
 8001492:	4a02      	ldr	r2, [pc, #8]	; (800149c <i2c_lld_serve_tx_end_irq.lto_priv.61+0x3c>)
 8001494:	62da      	str	r2, [r3, #44]	; 0x2c
 8001496:	e7fe      	b.n	8001496 <i2c_lld_serve_tx_end_irq.lto_priv.61+0x36>
 8001498:	20000b98 	.word	0x20000b98
 800149c:	08003710 	.word	0x08003710

080014a0 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80014a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  USART_TypeDef *u = sdp->usart;
 80014a4:	4d67      	ldr	r5, [pc, #412]	; (8001644 <VectorD8+0x1a4>)
 80014a6:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 80014a8:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 80014ac:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80014ae:	05da      	lsls	r2, r3, #23
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80014b0:	b083      	sub	sp, #12
  uint16_t sr = u->SR;
 80014b2:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 80014b4:	d47d      	bmi.n	80015b2 <VectorD8+0x112>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80014b6:	2320      	movs	r3, #32
 80014b8:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80014bc:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80014c0:	d046      	beq.n	8001550 <VectorD8+0xb0>
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 80014c2:	4f61      	ldr	r7, [pc, #388]	; (8001648 <VectorD8+0x1a8>)

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 80014c4:	f04f 0800 	mov.w	r8, #0
 80014c8:	e007      	b.n	80014da <VectorD8+0x3a>
    if (sr & USART_SR_RXNE)
 80014ca:	06a1      	lsls	r1, r4, #26
    b = u->DR;
 80014cc:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 80014ce:	d41c      	bmi.n	800150a <VectorD8+0x6a>
    sr = u->SR;
 80014d0:	6834      	ldr	r4, [r6, #0]
 80014d2:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80014d4:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80014d8:	d03a      	beq.n	8001550 <VectorD8+0xb0>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80014da:	0723      	lsls	r3, r4, #28
 80014dc:	d0f5      	beq.n	80014ca <VectorD8+0x2a>
    sts |= SD_OVERRUN_ERROR;
 80014de:	f014 0f08 	tst.w	r4, #8
 80014e2:	bf0c      	ite	eq
 80014e4:	2000      	moveq	r0, #0
 80014e6:	2080      	movne	r0, #128	; 0x80
  if (sr & USART_SR_PE)
 80014e8:	07e1      	lsls	r1, r4, #31
    sts |= SD_PARITY_ERROR;
 80014ea:	bf48      	it	mi
 80014ec:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 80014f0:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 80014f2:	bf48      	it	mi
 80014f4:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 80014f8:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 80014fa:	bf48      	it	mi
 80014fc:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001500:	f001 f9ce 	bl	80028a0 <chEvtBroadcastFlagsI.constprop.50>
    if (sr & USART_SR_RXNE)
 8001504:	06a1      	lsls	r1, r4, #26
    b = u->DR;
 8001506:	6873      	ldr	r3, [r6, #4]
    if (sr & USART_SR_RXNE)
 8001508:	d5e2      	bpl.n	80014d0 <VectorD8+0x30>
 800150a:	696a      	ldr	r2, [r5, #20]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800150c:	2a00      	cmp	r2, #0
 800150e:	d040      	beq.n	8001592 <VectorD8+0xf2>
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8001510:	6a2a      	ldr	r2, [r5, #32]
 8001512:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001514:	428a      	cmp	r2, r1
 8001516:	d045      	beq.n	80015a4 <VectorD8+0x104>
  iqp->q_counter++;
 8001518:	6969      	ldr	r1, [r5, #20]
  *iqp->q_wrptr++ = b;
 800151a:	1c50      	adds	r0, r2, #1
  iqp->q_counter++;
 800151c:	3101      	adds	r1, #1
  *iqp->q_wrptr++ = b;
 800151e:	6228      	str	r0, [r5, #32]
  iqp->q_counter++;
 8001520:	6169      	str	r1, [r5, #20]
    b = u->DR;
 8001522:	7013      	strb	r3, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8001524:	6a2a      	ldr	r2, [r5, #32]
 8001526:	69eb      	ldr	r3, [r5, #28]
 8001528:	429a      	cmp	r2, r3
 800152a:	d301      	bcc.n	8001530 <VectorD8+0x90>
    iqp->q_wrptr = iqp->q_buffer;
 800152c:	69ab      	ldr	r3, [r5, #24]
 800152e:	622b      	str	r3, [r5, #32]
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001530:	68eb      	ldr	r3, [r5, #12]
 8001532:	42bb      	cmp	r3, r7
 8001534:	d0cc      	beq.n	80014d0 <VectorD8+0x30>
  tqp->p_next = tp->p_next;
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	60ea      	str	r2, [r5, #12]
  (void) chSchReadyI(tp);
 800153a:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 800153c:	6057      	str	r7, [r2, #4]
  tp->p_u.rdymsg = msg;
 800153e:	f8c3 8020 	str.w	r8, [r3, #32]
  (void) chSchReadyI(tp);
 8001542:	f7ff fecd 	bl	80012e0 <chSchReadyI>
    sr = u->SR;
 8001546:	6834      	ldr	r4, [r6, #0]
 8001548:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800154a:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800154e:	d1c4      	bne.n	80014da <VectorD8+0x3a>
 8001550:	2300      	movs	r3, #0
 8001552:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8001556:	f019 0f80 	tst.w	r9, #128	; 0x80
 800155a:	d001      	beq.n	8001560 <VectorD8+0xc0>
 800155c:	0622      	lsls	r2, r4, #24
 800155e:	d436      	bmi.n	80015ce <VectorD8+0x12e>
  if (sr & USART_SR_TC) {
 8001560:	0663      	lsls	r3, r4, #25
 8001562:	d511      	bpl.n	8001588 <VectorD8+0xe8>
 8001564:	2320      	movs	r3, #32
 8001566:	f383 8811 	msr	BASEPRI, r3
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800156a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800156c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800156e:	429a      	cmp	r2, r3
 8001570:	d052      	beq.n	8001618 <VectorD8+0x178>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001572:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8001576:	ea09 0303 	and.w	r3, r9, r3
    u->SR = ~USART_SR_TC;
 800157a:	f06f 0240 	mvn.w	r2, #64	; 0x40
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800157e:	60f3      	str	r3, [r6, #12]
 8001580:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8001582:	6032      	str	r2, [r6, #0]
 8001584:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
}
 8001588:	b003      	add	sp, #12
 800158a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800158e:	f7ff ba67 	b.w	8000a60 <_port_irq_epilogue>
 8001592:	2004      	movs	r0, #4
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	f001 f983 	bl	80028a0 <chEvtBroadcastFlagsI.constprop.50>
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 800159a:	6a2a      	ldr	r2, [r5, #32]
 800159c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800159e:	9b01      	ldr	r3, [sp, #4]
 80015a0:	428a      	cmp	r2, r1
 80015a2:	d1b9      	bne.n	8001518 <VectorD8+0x78>
 80015a4:	6969      	ldr	r1, [r5, #20]
 80015a6:	2900      	cmp	r1, #0
 80015a8:	d0b6      	beq.n	8001518 <VectorD8+0x78>
 80015aa:	2080      	movs	r0, #128	; 0x80
 80015ac:	f001 f978 	bl	80028a0 <chEvtBroadcastFlagsI.constprop.50>
 80015b0:	e78e      	b.n	80014d0 <VectorD8+0x30>
 80015b2:	2320      	movs	r3, #32
 80015b4:	f383 8811 	msr	BASEPRI, r3
 80015b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015bc:	f001 f970 	bl	80028a0 <chEvtBroadcastFlagsI.constprop.50>
    u->SR = ~USART_SR_LBD;
 80015c0:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80015c4:	6033      	str	r3, [r6, #0]
 80015c6:	2300      	movs	r3, #0
 80015c8:	f383 8811 	msr	BASEPRI, r3
 80015cc:	e773      	b.n	80014b6 <VectorD8+0x16>
 80015ce:	2320      	movs	r3, #32
 80015d0:	f383 8811 	msr	BASEPRI, r3
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 80015d4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80015d6:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80015d8:	429a      	cmp	r2, r3
 80015da:	d024      	beq.n	8001626 <VectorD8+0x186>
  oqp->q_counter++;
 80015dc:	6baa      	ldr	r2, [r5, #56]	; 0x38
  if (oqp->q_rdptr >= oqp->q_top) {
 80015de:	6c29      	ldr	r1, [r5, #64]	; 0x40
  b = *oqp->q_rdptr++;
 80015e0:	1c58      	adds	r0, r3, #1
  oqp->q_counter++;
 80015e2:	3201      	adds	r2, #1
 80015e4:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 80015e6:	64a8      	str	r0, [r5, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
 80015e8:	4288      	cmp	r0, r1
  b = *oqp->q_rdptr++;
 80015ea:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 80015ec:	d301      	bcc.n	80015f2 <VectorD8+0x152>
    oqp->q_rdptr = oqp->q_buffer;
 80015ee:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80015f0:	64ab      	str	r3, [r5, #72]	; 0x48
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 80015f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80015f4:	4a15      	ldr	r2, [pc, #84]	; (800164c <VectorD8+0x1ac>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d009      	beq.n	800160e <VectorD8+0x16e>
  tqp->p_next = tp->p_next;
 80015fa:	6819      	ldr	r1, [r3, #0]
 80015fc:	6329      	str	r1, [r5, #48]	; 0x30
  tp->p_u.rdymsg = msg;
 80015fe:	f04f 0e00 	mov.w	lr, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001602:	604a      	str	r2, [r1, #4]
  (void) chSchReadyI(tp);
 8001604:	4618      	mov	r0, r3
  tp->p_u.rdymsg = msg;
 8001606:	f8c3 e020 	str.w	lr, [r3, #32]
  (void) chSchReadyI(tp);
 800160a:	f7ff fe69 	bl	80012e0 <chSchReadyI>
      u->DR = b;
 800160e:	6077      	str	r7, [r6, #4]
 8001610:	2300      	movs	r3, #0
 8001612:	f383 8811 	msr	BASEPRI, r3
 8001616:	e7a3      	b.n	8001560 <VectorD8+0xc0>
 8001618:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0a9      	beq.n	8001572 <VectorD8+0xd2>
 800161e:	2010      	movs	r0, #16
 8001620:	f001 f93e 	bl	80028a0 <chEvtBroadcastFlagsI.constprop.50>
 8001624:	e7a5      	b.n	8001572 <VectorD8+0xd2>
 8001626:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001628:	2a00      	cmp	r2, #0
 800162a:	d0d7      	beq.n	80015dc <VectorD8+0x13c>
 800162c:	2008      	movs	r0, #8
 800162e:	f001 f937 	bl	80028a0 <chEvtBroadcastFlagsI.constprop.50>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8001632:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8001636:	ea09 0303 	and.w	r3, r9, r3
 800163a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800163e:	60f3      	str	r3, [r6, #12]
 8001640:	e7e6      	b.n	8001610 <VectorD8+0x170>
 8001642:	bf00      	nop
 8001644:	200008a8 	.word	0x200008a8
 8001648:	200008b4 	.word	0x200008b4
 800164c:	200008d8 	.word	0x200008d8

08001650 <spi_lld_serve_rx_interrupt.lto_priv.75>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001650:	f011 0f0c 	tst.w	r1, #12
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8001654:	b538      	push	{r3, r4, r5, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001656:	d132      	bne.n	80016be <spi_lld_serve_rx_interrupt.lto_priv.75+0x6e>
  dmaStreamDisable(spip->dmatx);
 8001658:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800165a:	680b      	ldr	r3, [r1, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	f022 021f 	bic.w	r2, r2, #31
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	07d4      	lsls	r4, r2, #31
 8001668:	d4fc      	bmi.n	8001664 <spi_lld_serve_rx_interrupt.lto_priv.75+0x14>
 800166a:	7a0d      	ldrb	r5, [r1, #8]
  dmaStreamDisable(spip->dmarx);
 800166c:	6a02      	ldr	r2, [r0, #32]
  dmaStreamDisable(spip->dmatx);
 800166e:	684c      	ldr	r4, [r1, #4]
  dmaStreamDisable(spip->dmarx);
 8001670:	6813      	ldr	r3, [r2, #0]
  dmaStreamDisable(spip->dmatx);
 8001672:	213d      	movs	r1, #61	; 0x3d
 8001674:	40a9      	lsls	r1, r5
 8001676:	6021      	str	r1, [r4, #0]
  dmaStreamDisable(spip->dmarx);
 8001678:	6819      	ldr	r1, [r3, #0]
 800167a:	f021 011f 	bic.w	r1, r1, #31
 800167e:	6019      	str	r1, [r3, #0]
 8001680:	6819      	ldr	r1, [r3, #0]
 8001682:	07c9      	lsls	r1, r1, #31
 8001684:	d4fc      	bmi.n	8001680 <spi_lld_serve_rx_interrupt.lto_priv.75+0x30>
  _spi_isr_code(spip);
 8001686:	6843      	ldr	r3, [r0, #4]
  dmaStreamDisable(spip->dmarx);
 8001688:	6851      	ldr	r1, [r2, #4]
 800168a:	4604      	mov	r4, r0
 800168c:	7a10      	ldrb	r0, [r2, #8]
  _spi_isr_code(spip);
 800168e:	681a      	ldr	r2, [r3, #0]
  dmaStreamDisable(spip->dmarx);
 8001690:	233d      	movs	r3, #61	; 0x3d
 8001692:	4083      	lsls	r3, r0
 8001694:	600b      	str	r3, [r1, #0]
  _spi_isr_code(spip);
 8001696:	b1ba      	cbz	r2, 80016c8 <spi_lld_serve_rx_interrupt.lto_priv.75+0x78>
 8001698:	2304      	movs	r3, #4
 800169a:	7023      	strb	r3, [r4, #0]
 800169c:	4620      	mov	r0, r4
 800169e:	4790      	blx	r2
 80016a0:	7823      	ldrb	r3, [r4, #0]
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d010      	beq.n	80016c8 <spi_lld_serve_rx_interrupt.lto_priv.75+0x78>
 80016a6:	2320      	movs	r3, #32
 80016a8:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 80016ac:	2100      	movs	r1, #0
 80016ae:	f104 0008 	add.w	r0, r4, #8
 80016b2:	f7ff fe2d 	bl	8001310 <chThdResumeI>
 80016b6:	2300      	movs	r3, #0
 80016b8:	f383 8811 	msr	BASEPRI, r3
 80016bc:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 80016be:	b672      	cpsid	i
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <spi_lld_serve_rx_interrupt.lto_priv.75+0x80>)
 80016c2:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <spi_lld_serve_rx_interrupt.lto_priv.75+0x84>)
 80016c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80016c6:	e7fe      	b.n	80016c6 <spi_lld_serve_rx_interrupt.lto_priv.75+0x76>
 80016c8:	2302      	movs	r3, #2
 80016ca:	7023      	strb	r3, [r4, #0]
 80016cc:	e7eb      	b.n	80016a6 <spi_lld_serve_rx_interrupt.lto_priv.75+0x56>
 80016ce:	bf00      	nop
 80016d0:	20000b98 	.word	0x20000b98
 80016d4:	08003710 	.word	0x08003710
	...

080016e0 <VectorC0>:

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 80016e0:	4833      	ldr	r0, [pc, #204]	; (80017b0 <VectorC0+0xd0>)
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 80016e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD1.i2c->SR1;
 80016e4:	6b44      	ldr	r4, [r0, #52]	; 0x34
  dmaStreamDisable(i2cp->dmatx);
 80016e6:	6b07      	ldr	r7, [r0, #48]	; 0x30
  uint16_t sr = I2CD1.i2c->SR1;
 80016e8:	6965      	ldr	r5, [r4, #20]
  dmaStreamDisable(i2cp->dmatx);
 80016ea:	683a      	ldr	r2, [r7, #0]

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 80016ec:	f405 435f 	and.w	r3, r5, #57088	; 0xdf00
 80016f0:	43db      	mvns	r3, r3
 80016f2:	6163      	str	r3, [r4, #20]
  dmaStreamDisable(i2cp->dmatx);
 80016f4:	6813      	ldr	r3, [r2, #0]
 80016f6:	f023 031f 	bic.w	r3, r3, #31
 80016fa:	6013      	str	r3, [r2, #0]
  uint16_t sr = I2CD1.i2c->SR1;
 80016fc:	b2a9      	uxth	r1, r5
  dmaStreamDisable(i2cp->dmatx);
 80016fe:	6813      	ldr	r3, [r2, #0]
 8001700:	07db      	lsls	r3, r3, #31
 8001702:	d4fc      	bmi.n	80016fe <VectorC0+0x1e>
 8001704:	7a3a      	ldrb	r2, [r7, #8]
  dmaStreamDisable(i2cp->dmarx);
 8001706:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8001708:	687f      	ldr	r7, [r7, #4]
 800170a:	233d      	movs	r3, #61	; 0x3d
 800170c:	4093      	lsls	r3, r2
  dmaStreamDisable(i2cp->dmarx);
 800170e:	6832      	ldr	r2, [r6, #0]
  dmaStreamDisable(i2cp->dmatx);
 8001710:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 8001712:	6813      	ldr	r3, [r2, #0]
 8001714:	f023 031f 	bic.w	r3, r3, #31
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	6813      	ldr	r3, [r2, #0]
 800171c:	07df      	lsls	r7, r3, #31
 800171e:	d4fc      	bmi.n	800171a <VectorC0+0x3a>
 8001720:	7a37      	ldrb	r7, [r6, #8]
 8001722:	6872      	ldr	r2, [r6, #4]
 8001724:	233d      	movs	r3, #61	; 0x3d
 8001726:	40bb      	lsls	r3, r7
 8001728:	6013      	str	r3, [r2, #0]
  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 800172a:	f411 7380 	ands.w	r3, r1, #256	; 0x100
    i2cp->errors |= I2C_BUS_ERROR;
 800172e:	bf18      	it	ne
 8001730:	2301      	movne	r3, #1
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8001732:	058e      	lsls	r6, r1, #22
    i2cp->errors |= I2C_BUS_ERROR;
 8001734:	6083      	str	r3, [r0, #8]
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8001736:	bf44      	itt	mi
 8001738:	f043 0302 	orrmi.w	r3, r3, #2
 800173c:	6083      	strmi	r3, [r0, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 800173e:	054a      	lsls	r2, r1, #21
 8001740:	d50a      	bpl.n	8001758 <VectorC0+0x78>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8001742:	6862      	ldr	r2, [r4, #4]
 8001744:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001748:	6062      	str	r2, [r4, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800174a:	6822      	ldr	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800174c:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8001750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001754:	6022      	str	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8001756:	6083      	str	r3, [r0, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8001758:	050f      	lsls	r7, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 800175a:	bf44      	itt	mi
 800175c:	f043 0308 	orrmi.w	r3, r3, #8
 8001760:	6083      	strmi	r3, [r0, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8001762:	044e      	lsls	r6, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 8001764:	bf44      	itt	mi
 8001766:	f043 0320 	orrmi.w	r3, r3, #32
 800176a:	6083      	strmi	r3, [r0, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 800176c:	04cc      	lsls	r4, r1, #19
 800176e:	d513      	bpl.n	8001798 <VectorC0+0xb8>
    i2cp->errors |= I2C_PEC_ERROR;
 8001770:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8001774:	0429      	lsls	r1, r5, #16
    i2cp->errors |= I2C_PEC_ERROR;
 8001776:	6083      	str	r3, [r0, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8001778:	d416      	bmi.n	80017a8 <VectorC0+0xc8>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800177a:	2320      	movs	r3, #32
 800177c:	f383 8811 	msr	BASEPRI, r3
 8001780:	f06f 0101 	mvn.w	r1, #1
 8001784:	480b      	ldr	r0, [pc, #44]	; (80017b4 <VectorC0+0xd4>)
 8001786:	f7ff fdc3 	bl	8001310 <chThdResumeI>
 800178a:	2300      	movs	r3, #0
 800178c:	f383 8811 	msr	BASEPRI, r3
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 8001790:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8001794:	f7ff b964 	b.w	8000a60 <_port_irq_epilogue>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8001798:	042a      	lsls	r2, r5, #16
 800179a:	d405      	bmi.n	80017a8 <VectorC0+0xc8>
  if (i2cp->errors != I2C_NO_ERROR)
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1ec      	bne.n	800177a <VectorC0+0x9a>
}
 80017a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 80017a4:	f7ff b95c 	b.w	8000a60 <_port_irq_epilogue>
    i2cp->errors |= I2C_SMB_ALERT;
 80017a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ac:	6083      	str	r3, [r0, #8]
 80017ae:	e7e4      	b.n	800177a <VectorC0+0x9a>
 80017b0:	20000870 	.word	0x20000870
 80017b4:	2000088c 	.word	0x2000088c
	...

080017c0 <VectorBC>:
  I2C_TypeDef *dp = i2cp->i2c;
 80017c0:	483a      	ldr	r0, [pc, #232]	; (80018ac <VectorBC+0xec>)
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80017c2:	4a3b      	ldr	r2, [pc, #236]	; (80018b0 <VectorBC+0xf0>)
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 80017c4:	b570      	push	{r4, r5, r6, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 80017c6:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 80017c8:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 80017ca:	6965      	ldr	r5, [r4, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80017cc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80017d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d04c      	beq.n	8001872 <VectorBC+0xb2>
 80017d8:	d81e      	bhi.n	8001818 <VectorBC+0x58>
 80017da:	3a07      	subs	r2, #7
 80017dc:	4293      	cmp	r3, r2
 80017de:	d03c      	beq.n	800185a <VectorBC+0x9a>
 80017e0:	3201      	adds	r2, #1
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d110      	bne.n	8001808 <VectorBC+0x48>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80017e6:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 80017e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80017ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 80017ee:	681b      	ldr	r3, [r3, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80017f0:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	f042 0201 	orr.w	r2, r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 80017fa:	6862      	ldr	r2, [r4, #4]
 80017fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001800:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d94b      	bls.n	80018a0 <VectorBC+0xe0>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8001808:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 800180c:	bf18      	it	ne
 800180e:	69a3      	ldrne	r3, [r4, #24]
}
 8001810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8001814:	f7ff b924 	b.w	8000a60 <_port_irq_epilogue>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8001818:	4a26      	ldr	r2, [pc, #152]	; (80018b4 <VectorBC+0xf4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d012      	beq.n	8001844 <VectorBC+0x84>
 800181e:	3202      	adds	r2, #2
 8001820:	4293      	cmp	r3, r2
 8001822:	d1f1      	bne.n	8001808 <VectorBC+0x48>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8001824:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685e      	ldr	r6, [r3, #4]
 800182a:	b33e      	cbz	r6, 800187c <VectorBC+0xbc>
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800182c:	6823      	ldr	r3, [r4, #0]
      i2cp->addr |= 0x01;
 800182e:	8c02      	ldrh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8001830:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 8001834:	f042 0201 	orr.w	r2, r2, #1
 8001838:	8402      	strh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800183a:	6023      	str	r3, [r4, #0]
}
 800183c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 8001840:	f7ff b90e 	b.w	8000a60 <_port_irq_epilogue>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001844:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8001846:	6b02      	ldr	r2, [r0, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 800184c:	6812      	ldr	r2, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800184e:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8001850:	6813      	ldr	r3, [r2, #0]
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	e7d6      	b.n	8001808 <VectorBC+0x48>
    if ((i2cp->addr >> 8) > 0) { 
 800185a:	8c03      	ldrh	r3, [r0, #32]
 800185c:	0a1a      	lsrs	r2, r3, #8
 800185e:	d00b      	beq.n	8001878 <VectorBC+0xb8>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001868:	f002 0206 	and.w	r2, r2, #6
 800186c:	4313      	orrs	r3, r2
 800186e:	6123      	str	r3, [r4, #16]
 8001870:	e7ca      	b.n	8001808 <VectorBC+0x48>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8001872:	8c03      	ldrh	r3, [r0, #32]
 8001874:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8001878:	6123      	str	r3, [r4, #16]
 800187a:	e7c5      	b.n	8001808 <VectorBC+0x48>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800187c:	6863      	ldr	r3, [r4, #4]
 800187e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001882:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800188a:	6023      	str	r3, [r4, #0]
 800188c:	2320      	movs	r3, #32
 800188e:	f383 8811 	msr	BASEPRI, r3
 8001892:	301c      	adds	r0, #28
 8001894:	4631      	mov	r1, r6
 8001896:	f7ff fd3b 	bl	8001310 <chThdResumeI>
 800189a:	f386 8811 	msr	BASEPRI, r6
 800189e:	e7b3      	b.n	8001808 <VectorBC+0x48>
      dp->CR1 &= ~I2C_CR1_ACK;
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018a6:	6023      	str	r3, [r4, #0]
 80018a8:	e7ae      	b.n	8001808 <VectorBC+0x48>
 80018aa:	bf00      	nop
 80018ac:	20000870 	.word	0x20000870
 80018b0:	00030008 	.word	0x00030008
 80018b4:	00070082 	.word	0x00070082
	...

080018c0 <i2c_lld_serve_rx_end_irq.lto_priv.60>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80018c0:	f011 0f0c 	tst.w	r1, #12
 80018c4:	d126      	bne.n	8001914 <i2c_lld_serve_rx_end_irq.lto_priv.60+0x54>
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 80018c6:	b570      	push	{r4, r5, r6, lr}
  dmaStreamDisable(i2cp->dmarx);
 80018c8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  I2C_TypeDef *dp = i2cp->i2c;
 80018ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
  dmaStreamDisable(i2cp->dmarx);
 80018cc:	6829      	ldr	r1, [r5, #0]
 80018ce:	680a      	ldr	r2, [r1, #0]
 80018d0:	f022 021f 	bic.w	r2, r2, #31
 80018d4:	600a      	str	r2, [r1, #0]
 80018d6:	680c      	ldr	r4, [r1, #0]
 80018d8:	f014 0401 	ands.w	r4, r4, #1
 80018dc:	d1fb      	bne.n	80018d6 <i2c_lld_serve_rx_end_irq.lto_priv.60+0x16>
 80018de:	7a2e      	ldrb	r6, [r5, #8]
 80018e0:	6869      	ldr	r1, [r5, #4]
 80018e2:	223d      	movs	r2, #61	; 0x3d
 80018e4:	40b2      	lsls	r2, r6
 80018e6:	600a      	str	r2, [r1, #0]
  dp->CR2 &= ~I2C_CR2_LAST;
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018ee:	605a      	str	r2, [r3, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018f6:	601a      	str	r2, [r3, #0]
  dp->CR1 |= I2C_CR1_STOP;
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	2320      	movs	r3, #32
 8001902:	f383 8811 	msr	BASEPRI, r3
 8001906:	301c      	adds	r0, #28
 8001908:	4621      	mov	r1, r4
 800190a:	f7ff fd01 	bl	8001310 <chThdResumeI>
 800190e:	f384 8811 	msr	BASEPRI, r4
 8001912:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8001914:	b672      	cpsid	i
 8001916:	4b02      	ldr	r3, [pc, #8]	; (8001920 <i2c_lld_serve_rx_end_irq.lto_priv.60+0x60>)
 8001918:	4a02      	ldr	r2, [pc, #8]	; (8001924 <i2c_lld_serve_rx_end_irq.lto_priv.60+0x64>)
 800191a:	62da      	str	r2, [r3, #44]	; 0x2c
 800191c:	e7fe      	b.n	800191c <i2c_lld_serve_rx_end_irq.lto_priv.60+0x5c>
 800191e:	bf00      	nop
 8001920:	20000b98 	.word	0x20000b98
 8001924:	08003710 	.word	0x08003710
	...

08001930 <Vector14C>:
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8001930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  stm32_otg_t *otgp = usbp->otg;
 8001934:	4e8d      	ldr	r6, [pc, #564]	; (8001b6c <Vector14C+0x23c>)
 8001936:	6e35      	ldr	r5, [r6, #96]	; 0x60
  sts  = otgp->GINTSTS;
 8001938:	696f      	ldr	r7, [r5, #20]
  sts &= otgp->GINTMSK;
 800193a:	69ab      	ldr	r3, [r5, #24]
 800193c:	401f      	ands	r7, r3
  if (sts & GINTSTS_USBRST) {
 800193e:	f417 5980 	ands.w	r9, r7, #4096	; 0x1000
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8001942:	b083      	sub	sp, #12
  otgp->GINTSTS = sts;
 8001944:	616f      	str	r7, [r5, #20]
  if (sts & GINTSTS_USBRST) {
 8001946:	f040 8115 	bne.w	8001b74 <Vector14C+0x244>
  if (sts & GINTSTS_WKUPINT) {
 800194a:	2f00      	cmp	r7, #0
 800194c:	f2c0 80f1 	blt.w	8001b32 <Vector14C+0x202>
  if (sts & GINTSTS_USBSUSP) {
 8001950:	0539      	lsls	r1, r7, #20
 8001952:	f100 80de 	bmi.w	8001b12 <Vector14C+0x1e2>
  if (sts & GINTSTS_ENUMDNE) {
 8001956:	04ba      	lsls	r2, r7, #18
 8001958:	d50c      	bpl.n	8001974 <Vector14C+0x44>
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 800195a:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 800195e:	f013 0f06 	tst.w	r3, #6
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8001962:	68eb      	ldr	r3, [r5, #12]
 8001964:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8001968:	bf0c      	ite	eq
 800196a:	f443 5310 	orreq.w	r3, r3, #9216	; 0x2400
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 800196e:	f443 53a0 	orrne.w	r3, r3, #5120	; 0x1400
 8001972:	60eb      	str	r3, [r5, #12]
  if (sts & GINTSTS_SOF) {
 8001974:	073b      	lsls	r3, r7, #28
 8001976:	d430      	bmi.n	80019da <Vector14C+0xaa>
  if (sts & GINTSTS_IISOIXFR) {
 8001978:	02fc      	lsls	r4, r7, #11
 800197a:	d436      	bmi.n	80019ea <Vector14C+0xba>
  if (sts & GINTSTS_IISOOXFR) {
 800197c:	02b8      	lsls	r0, r7, #10
 800197e:	f100 809a 	bmi.w	8001ab6 <Vector14C+0x186>
  if (sts & GINTSTS_RXFLVL) {
 8001982:	06fb      	lsls	r3, r7, #27
 8001984:	f100 8088 	bmi.w	8001a98 <Vector14C+0x168>
  if (sts & GINTSTS_IEPINT) {
 8001988:	037e      	lsls	r6, r7, #13
  src = otgp->DAINT;
 800198a:	f8d5 4818 	ldr.w	r4, [r5, #2072]	; 0x818
  if (sts & GINTSTS_IEPINT) {
 800198e:	d50e      	bpl.n	80019ae <Vector14C+0x7e>
    if (src & (1 << 0))
 8001990:	07e5      	lsls	r5, r4, #31
 8001992:	f100 818f 	bmi.w	8001cb4 <Vector14C+0x384>
    if (src & (1 << 1))
 8001996:	07a0      	lsls	r0, r4, #30
 8001998:	f100 8188 	bmi.w	8001cac <Vector14C+0x37c>
    if (src & (1 << 2))
 800199c:	0761      	lsls	r1, r4, #29
 800199e:	f100 8181 	bmi.w	8001ca4 <Vector14C+0x374>
    if (src & (1 << 3))
 80019a2:	0722      	lsls	r2, r4, #28
 80019a4:	f100 817a 	bmi.w	8001c9c <Vector14C+0x36c>
    if (src & (1 << 4))
 80019a8:	06e3      	lsls	r3, r4, #27
 80019aa:	f100 815c 	bmi.w	8001c66 <Vector14C+0x336>
  if (sts & GINTSTS_OEPINT) {
 80019ae:	033e      	lsls	r6, r7, #12
 80019b0:	d50e      	bpl.n	80019d0 <Vector14C+0xa0>
    if (src & (1 << 16))
 80019b2:	03e5      	lsls	r5, r4, #15
 80019b4:	f100 8162 	bmi.w	8001c7c <Vector14C+0x34c>
    if (src & (1 << 17))
 80019b8:	03a0      	lsls	r0, r4, #14
 80019ba:	f100 8165 	bmi.w	8001c88 <Vector14C+0x358>
    if (src & (1 << 18))
 80019be:	0361      	lsls	r1, r4, #13
 80019c0:	f100 8168 	bmi.w	8001c94 <Vector14C+0x364>
    if (src & (1 << 19))
 80019c4:	0322      	lsls	r2, r4, #12
 80019c6:	f100 8155 	bmi.w	8001c74 <Vector14C+0x344>
    if (src & (1 << 20))
 80019ca:	02e3      	lsls	r3, r4, #11
 80019cc:	f100 8143 	bmi.w	8001c56 <Vector14C+0x326>
}
 80019d0:	b003      	add	sp, #12
 80019d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 80019d6:	f7ff b843 	b.w	8000a60 <_port_irq_epilogue>
    _usb_isr_invoke_sof_cb(usbp);
 80019da:	6873      	ldr	r3, [r6, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0ca      	beq.n	8001978 <Vector14C+0x48>
 80019e2:	4862      	ldr	r0, [pc, #392]	; (8001b6c <Vector14C+0x23c>)
 80019e4:	4798      	blx	r3
  if (sts & GINTSTS_IISOIXFR) {
 80019e6:	02fc      	lsls	r4, r7, #11
 80019e8:	d5c8      	bpl.n	800197c <Vector14C+0x4c>
 80019ea:	f8df a184 	ldr.w	sl, [pc, #388]	; 8001b70 <Vector14C+0x240>
  stm32_otg_t *otgp = usbp->otg;
 80019ee:	f8d6 8060 	ldr.w	r8, [r6, #96]	; 0x60
 80019f2:	2400      	movs	r4, #0
      _usb_isr_invoke_in_cb(usbp, ep);
 80019f4:	f04f 0b01 	mov.w	fp, #1
 80019f8:	e006      	b.n	8001a08 <Vector14C+0xd8>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 80019fa:	6e73      	ldr	r3, [r6, #100]	; 0x64
 80019fc:	3401      	adds	r4, #1
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	b2e4      	uxtb	r4, r4
 8001a02:	429c      	cmp	r4, r3
 8001a04:	46a1      	mov	r9, r4
 8001a06:	d8b9      	bhi.n	800197c <Vector14C+0x4c>
 8001a08:	eb08 1244 	add.w	r2, r8, r4, lsl #5
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8001a0c:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8001a10:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001a14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a18:	d1ef      	bne.n	80019fa <Vector14C+0xca>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 8001a1a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	daeb      	bge.n	80019fa <Vector14C+0xca>
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 8001a22:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8001a26:	f043 4390 	orr.w	r3, r3, #1207959552	; 0x48000000
 8001a2a:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 8001a2e:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	dbfb      	blt.n	8001a2e <Vector14C+0xfe>
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8001a36:	ea4f 1989 	mov.w	r9, r9, lsl #6
 8001a3a:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8001a3c:	f049 0320 	orr.w	r3, r9, #32
 8001a40:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8001a42:	6913      	ldr	r3, [r2, #16]
 8001a44:	0699      	lsls	r1, r3, #26
 8001a46:	d4fc      	bmi.n	8001a42 <Vector14C+0x112>
  chSysPolledDelayX(cycles);
 8001a48:	f000 ff1a 	bl	8002880 <chSysPolledDelayX.constprop.54>
      _usb_isr_invoke_in_cb(usbp, ep);
 8001a4c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8001a50:	8931      	ldrh	r1, [r6, #8]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	fa0b f204 	lsl.w	r2, fp, r4
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	ea6f 0902 	mvn.w	r9, r2
 8001a5e:	ea09 0101 	and.w	r1, r9, r1
 8001a62:	8131      	strh	r1, [r6, #8]
 8001a64:	b123      	cbz	r3, 8001a70 <Vector14C+0x140>
 8001a66:	4621      	mov	r1, r4
 8001a68:	4840      	ldr	r0, [pc, #256]	; (8001b6c <Vector14C+0x23c>)
 8001a6a:	9201      	str	r2, [sp, #4]
 8001a6c:	4798      	blx	r3
 8001a6e:	9a01      	ldr	r2, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001a70:	2320      	movs	r3, #32
 8001a72:	f383 8811 	msr	BASEPRI, r3
      otgp->DIEPEMPMSK &= ~(1 << ep);
 8001a76:	f8d8 3834 	ldr.w	r3, [r8, #2100]	; 0x834
      usbp->txpending |= (1 << ep);
 8001a7a:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
      otgp->DIEPEMPMSK &= ~(1 << ep);
 8001a7c:	ea09 0303 	and.w	r3, r9, r3
      usbp->txpending |= (1 << ep);
 8001a80:	430a      	orrs	r2, r1
      otgp->DIEPEMPMSK &= ~(1 << ep);
 8001a82:	f8c8 3834 	str.w	r3, [r8, #2100]	; 0x834
  chThdResumeI(trp, msg);
 8001a86:	4650      	mov	r0, sl
 8001a88:	2100      	movs	r1, #0
      usbp->txpending |= (1 << ep);
 8001a8a:	66f2      	str	r2, [r6, #108]	; 0x6c
 8001a8c:	f7ff fc40 	bl	8001310 <chThdResumeI>
 8001a90:	2300      	movs	r3, #0
 8001a92:	f383 8811 	msr	BASEPRI, r3
 8001a96:	e7b0      	b.n	80019fa <Vector14C+0xca>
 8001a98:	2320      	movs	r3, #32
 8001a9a:	f383 8811 	msr	BASEPRI, r3
    otgp->GINTMSK &= ~GINTMSK_RXFLVLM;
 8001a9e:	69ab      	ldr	r3, [r5, #24]
 8001aa0:	4833      	ldr	r0, [pc, #204]	; (8001b70 <Vector14C+0x240>)
 8001aa2:	f023 0310 	bic.w	r3, r3, #16
 8001aa6:	61ab      	str	r3, [r5, #24]
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	f7ff fc31 	bl	8001310 <chThdResumeI>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f383 8811 	msr	BASEPRI, r3
 8001ab4:	e768      	b.n	8001988 <Vector14C+0x58>
  stm32_otg_t *otgp = usbp->otg;
 8001ab6:	f8d6 8060 	ldr.w	r8, [r6, #96]	; 0x60
      _usb_isr_invoke_out_cb(usbp, ep);
 8001aba:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8001b6c <Vector14C+0x23c>
  stm32_otg_t *otgp = usbp->otg;
 8001abe:	2400      	movs	r4, #0
      _usb_isr_invoke_out_cb(usbp, ep);
 8001ac0:	f04f 0901 	mov.w	r9, #1
 8001ac4:	e006      	b.n	8001ad4 <Vector14C+0x1a4>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8001ac6:	6e73      	ldr	r3, [r6, #100]	; 0x64
 8001ac8:	3401      	adds	r4, #1
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	b2e4      	uxtb	r4, r4
 8001ace:	429c      	cmp	r4, r3
 8001ad0:	f63f af57 	bhi.w	8001982 <Vector14C+0x52>
 8001ad4:	eb08 1244 	add.w	r2, r8, r4, lsl #5
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8001ad8:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8001adc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001ae0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ae4:	d1ef      	bne.n	8001ac6 <Vector14C+0x196>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 8001ae6:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	daeb      	bge.n	8001ac6 <Vector14C+0x196>
      _usb_isr_invoke_out_cb(usbp, ep);
 8001aee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8001af2:	8972      	ldrh	r2, [r6, #10]
 8001af4:	68d9      	ldr	r1, [r3, #12]
 8001af6:	fa09 f304 	lsl.w	r3, r9, r4
 8001afa:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8001afe:	ea22 0303 	bic.w	r3, r2, r3
 8001b02:	4621      	mov	r1, r4
 8001b04:	4650      	mov	r0, sl
 8001b06:	8173      	strh	r3, [r6, #10]
 8001b08:	f1bb 0f00 	cmp.w	fp, #0
 8001b0c:	d0db      	beq.n	8001ac6 <Vector14C+0x196>
 8001b0e:	47d8      	blx	fp
 8001b10:	e7d9      	b.n	8001ac6 <Vector14C+0x196>
  usbp->saved_state = usbp->state;
 8001b12:	7832      	ldrb	r2, [r6, #0]
 8001b14:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001b18:	6873      	ldr	r3, [r6, #4]
  usbp->state       = USB_SUSPENDED;
 8001b1a:	2205      	movs	r2, #5
 8001b1c:	7032      	strb	r2, [r6, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001b1e:	681b      	ldr	r3, [r3, #0]
    usbp->txpending = 0;
 8001b20:	2200      	movs	r2, #0
 8001b22:	66f2      	str	r2, [r6, #108]	; 0x6c
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f43f af16 	beq.w	8001956 <Vector14C+0x26>
 8001b2a:	2104      	movs	r1, #4
 8001b2c:	480f      	ldr	r0, [pc, #60]	; (8001b6c <Vector14C+0x23c>)
 8001b2e:	4798      	blx	r3
 8001b30:	e711      	b.n	8001956 <Vector14C+0x26>
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 8001b32:	f8d5 3e00 	ldr.w	r3, [r5, #3584]	; 0xe00
 8001b36:	0798      	lsls	r0, r3, #30
 8001b38:	d005      	beq.n	8001b46 <Vector14C+0x216>
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 8001b3a:	f8d5 3e00 	ldr.w	r3, [r5, #3584]	; 0xe00
 8001b3e:	f023 0303 	bic.w	r3, r3, #3
 8001b42:	f8c5 3e00 	str.w	r3, [r5, #3584]	; 0xe00
  usbp->state = usbp->saved_state;
 8001b46:	f896 305c 	ldrb.w	r3, [r6, #92]	; 0x5c
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8001b4a:	6872      	ldr	r2, [r6, #4]
  usbp->state = usbp->saved_state;
 8001b4c:	7033      	strb	r3, [r6, #0]
    otgp->DCTL |= DCTL_RWUSIG;
 8001b4e:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
 8001b5c:	2a00      	cmp	r2, #0
 8001b5e:	f43f aef7 	beq.w	8001950 <Vector14C+0x20>
 8001b62:	2105      	movs	r1, #5
 8001b64:	4801      	ldr	r0, [pc, #4]	; (8001b6c <Vector14C+0x23c>)
 8001b66:	4790      	blx	r2
 8001b68:	e6f2      	b.n	8001950 <Vector14C+0x20>
 8001b6a:	bf00      	nop
 8001b6c:	20000950 	.word	0x20000950
 8001b70:	200009c0 	.word	0x200009c0
    usbp->txpending = 0;
 8001b74:	2300      	movs	r3, #0
  usbp->state         = USB_READY;
 8001b76:	2102      	movs	r1, #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8001b78:	2220      	movs	r2, #32
    usbp->txpending = 0;
 8001b7a:	66f3      	str	r3, [r6, #108]	; 0x6c
  usbp->status        = 0;
 8001b7c:	f8a6 3058 	strh.w	r3, [r6, #88]	; 0x58
  usbp->address       = 0;
 8001b80:	f886 305a 	strb.w	r3, [r6, #90]	; 0x5a
  usbp->configuration = 0;
 8001b84:	f886 305b 	strb.w	r3, [r6, #91]	; 0x5b
    usbp->epc[i] = NULL;
 8001b88:	60f3      	str	r3, [r6, #12]
 8001b8a:	6133      	str	r3, [r6, #16]
 8001b8c:	6173      	str	r3, [r6, #20]
 8001b8e:	61b3      	str	r3, [r6, #24]
 8001b90:	61f3      	str	r3, [r6, #28]
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8001b92:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
  usbp->transmitting  = 0;
 8001b96:	8133      	strh	r3, [r6, #8]
  usbp->receiving     = 0;
 8001b98:	8173      	strh	r3, [r6, #10]
  usbp->state         = USB_READY;
 8001b9a:	7031      	strb	r1, [r6, #0]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8001b9c:	612a      	str	r2, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8001b9e:	692c      	ldr	r4, [r5, #16]
 8001ba0:	f014 0420 	ands.w	r4, r4, #32
 8001ba4:	d1fb      	bne.n	8001b9e <Vector14C+0x26e>
  chSysPolledDelayX(cycles);
 8001ba6:	f000 fe6b 	bl	8002880 <chSysPolledDelayX.constprop.54>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001baa:	6e77      	ldr	r7, [r6, #100]	; 0x64
  otgp->DIEPEMPMSK = 0;
 8001bac:	f8c5 4834 	str.w	r4, [r5, #2100]	; 0x834
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8001bb0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001bb4:	68b8      	ldr	r0, [r7, #8]
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8001bb6:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8001bba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8001bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc2:	eb05 1344 	add.w	r3, r5, r4, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001bc6:	3401      	adds	r4, #1
 8001bc8:	4284      	cmp	r4, r0
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8001bca:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8001bce:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8001bd2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8001bd6:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8001bda:	d9f2      	bls.n	8001bc2 <Vector14C+0x292>
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	66b3      	str	r3, [r6, #104]	; 0x68
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8001be4:	626a      	str	r2, [r5, #36]	; 0x24
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 8001be6:	2210      	movs	r2, #16
 8001be8:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 8001bea:	691c      	ldr	r4, [r3, #16]
 8001bec:	f014 0410 	ands.w	r4, r4, #16
 8001bf0:	d1fb      	bne.n	8001bea <Vector14C+0x2ba>
 8001bf2:	f000 fe45 	bl	8002880 <chSysPolledDelayX.constprop.54>
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8001bf6:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8001bfa:	6871      	ldr	r1, [r6, #4]
  next = usbp->pmnext;
 8001bfc:	6eb2      	ldr	r2, [r6, #104]	; 0x68
 8001bfe:	680f      	ldr	r7, [r1, #0]
  usbp->epc[0] = &ep0config;
 8001c00:	482e      	ldr	r0, [pc, #184]	; (8001cbc <Vector14C+0x38c>)
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8001c02:	492f      	ldr	r1, [pc, #188]	; (8001cc0 <Vector14C+0x390>)
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8001c04:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c08:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8001c0c:	69ab      	ldr	r3, [r5, #24]
 8001c0e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8001c12:	f043 0310 	orr.w	r3, r3, #16
 8001c16:	61ab      	str	r3, [r5, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8001c18:	2309      	movs	r3, #9
  usbp->epc[0] = &ep0config;
 8001c1a:	60f0      	str	r0, [r6, #12]
  usbp->pmnext += size;
 8001c1c:	f102 0010 	add.w	r0, r2, #16
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8001c20:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8001c24:	f8c5 3810 	str.w	r3, [r5, #2064]	; 0x810
  usbp->pmnext += size;
 8001c28:	66b0      	str	r0, [r6, #104]	; 0x68
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 8001c2a:	f8c5 3814 	str.w	r3, [r5, #2068]	; 0x814
  otgp->oe[0].DOEPTSIZ = 0;
 8001c2e:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8001c32:	f8c5 1b00 	str.w	r1, [r5, #2816]	; 0xb00
  otgp->ie[0].DIEPTSIZ = 0;
 8001c36:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 8001c3a:	f8c5 1900 	str.w	r1, [r5, #2304]	; 0x900
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8001c3e:	62aa      	str	r2, [r5, #40]	; 0x28
 8001c40:	2f00      	cmp	r7, #0
 8001c42:	f43f aec5 	beq.w	80019d0 <Vector14C+0xa0>
 8001c46:	4621      	mov	r1, r4
 8001c48:	481e      	ldr	r0, [pc, #120]	; (8001cc4 <Vector14C+0x394>)
 8001c4a:	47b8      	blx	r7
}
 8001c4c:	b003      	add	sp, #12
 8001c4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8001c52:	f7fe bf05 	b.w	8000a60 <_port_irq_epilogue>
      otg_epout_handler(usbp, 4);
 8001c56:	2004      	movs	r0, #4
 8001c58:	f001 f81a 	bl	8002c90 <otg_epout_handler.constprop.9>
}
 8001c5c:	b003      	add	sp, #12
 8001c5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8001c62:	f7fe befd 	b.w	8000a60 <_port_irq_epilogue>
      otg_epin_handler(usbp, 4);
 8001c66:	2004      	movs	r0, #4
 8001c68:	f001 f86a 	bl	8002d40 <otg_epin_handler.constprop.8>
  if (sts & GINTSTS_OEPINT) {
 8001c6c:	033e      	lsls	r6, r7, #12
 8001c6e:	f57f aeaf 	bpl.w	80019d0 <Vector14C+0xa0>
 8001c72:	e69e      	b.n	80019b2 <Vector14C+0x82>
      otg_epout_handler(usbp, 3);
 8001c74:	2003      	movs	r0, #3
 8001c76:	f001 f80b 	bl	8002c90 <otg_epout_handler.constprop.9>
 8001c7a:	e6a6      	b.n	80019ca <Vector14C+0x9a>
      otg_epout_handler(usbp, 0);
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f001 f807 	bl	8002c90 <otg_epout_handler.constprop.9>
    if (src & (1 << 17))
 8001c82:	03a0      	lsls	r0, r4, #14
 8001c84:	f57f ae9b 	bpl.w	80019be <Vector14C+0x8e>
      otg_epout_handler(usbp, 1);
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f001 f801 	bl	8002c90 <otg_epout_handler.constprop.9>
    if (src & (1 << 18))
 8001c8e:	0361      	lsls	r1, r4, #13
 8001c90:	f57f ae98 	bpl.w	80019c4 <Vector14C+0x94>
      otg_epout_handler(usbp, 2);
 8001c94:	2002      	movs	r0, #2
 8001c96:	f000 fffb 	bl	8002c90 <otg_epout_handler.constprop.9>
 8001c9a:	e693      	b.n	80019c4 <Vector14C+0x94>
      otg_epin_handler(usbp, 3);
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	f001 f84f 	bl	8002d40 <otg_epin_handler.constprop.8>
 8001ca2:	e681      	b.n	80019a8 <Vector14C+0x78>
      otg_epin_handler(usbp, 2);
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f001 f84b 	bl	8002d40 <otg_epin_handler.constprop.8>
 8001caa:	e67a      	b.n	80019a2 <Vector14C+0x72>
      otg_epin_handler(usbp, 1);
 8001cac:	2001      	movs	r0, #1
 8001cae:	f001 f847 	bl	8002d40 <otg_epin_handler.constprop.8>
 8001cb2:	e673      	b.n	800199c <Vector14C+0x6c>
      otg_epin_handler(usbp, 0);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f001 f843 	bl	8002d40 <otg_epin_handler.constprop.8>
 8001cba:	e66c      	b.n	8001996 <Vector14C+0x66>
 8001cbc:	080036e0 	.word	0x080036e0
 8001cc0:	10008040 	.word	0x10008040
 8001cc4:	20000950 	.word	0x20000950
	...

08001cd0 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001cd0:	b40e      	push	{r1, r2, r3}
 8001cd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af0f      	add	r7, sp, #60	; 0x3c
  int n = 0;
 8001cda:	2300      	movs	r3, #0
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001cdc:	f857 6b04 	ldr.w	r6, [r7], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001ce0:	9702      	str	r7, [sp, #8]
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001ce2:	4605      	mov	r5, r0
  q = p + MAX_FILLER;
 8001ce4:	469a      	mov	sl, r3
    c = *fmt++;
 8001ce6:	7831      	ldrb	r1, [r6, #0]
 8001ce8:	1c73      	adds	r3, r6, #1
    if (c == 0)
 8001cea:	b161      	cbz	r1, 8001d06 <chprintf+0x36>
    if (c != '%') {
 8001cec:	2925      	cmp	r1, #37	; 0x25
 8001cee:	d010      	beq.n	8001d12 <chprintf+0x42>
      streamPut(chp, (uint8_t)c);
 8001cf0:	682a      	ldr	r2, [r5, #0]
    c = *fmt++;
 8001cf2:	461e      	mov	r6, r3
      streamPut(chp, (uint8_t)c);
 8001cf4:	6892      	ldr	r2, [r2, #8]
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	4790      	blx	r2
    c = *fmt++;
 8001cfa:	7831      	ldrb	r1, [r6, #0]
      n++;
 8001cfc:	f10a 0a01 	add.w	sl, sl, #1
    c = *fmt++;
 8001d00:	1c73      	adds	r3, r6, #1
    if (c == 0)
 8001d02:	2900      	cmp	r1, #0
 8001d04:	d1f2      	bne.n	8001cec <chprintf+0x1c>
 8001d06:	4650      	mov	r0, sl
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8001d08:	b006      	add	sp, #24
 8001d0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d0e:	b003      	add	sp, #12
 8001d10:	4770      	bx	lr
    if (*fmt == '-') {
 8001d12:	7872      	ldrb	r2, [r6, #1]
 8001d14:	2a2d      	cmp	r2, #45	; 0x2d
 8001d16:	bf03      	ittte	eq
 8001d18:	78b2      	ldrbeq	r2, [r6, #2]
      fmt++;
 8001d1a:	1cb3      	addeq	r3, r6, #2
      left_align = TRUE;
 8001d1c:	f04f 0c01 	moveq.w	ip, #1
    left_align = FALSE;
 8001d20:	f04f 0c00 	movne.w	ip, #0
    if (*fmt == '0') {
 8001d24:	2a30      	cmp	r2, #48	; 0x30
 8001d26:	bf03      	ittte	eq
 8001d28:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 8001d2a:	3301      	addeq	r3, #1
      filler = '0';
 8001d2c:	f04f 0930 	moveq.w	r9, #48	; 0x30
    filler = ' ';
 8001d30:	f04f 0920 	movne.w	r9, #32
 8001d34:	1c59      	adds	r1, r3, #1
    width = 0;
 8001d36:	2400      	movs	r4, #0
 8001d38:	e005      	b.n	8001d46 <chprintf+0x76>
        c = va_arg(ap, int);
 8001d3a:	783b      	ldrb	r3, [r7, #0]
 8001d3c:	3704      	adds	r7, #4
 8001d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
      width = width * 10 + c;
 8001d42:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
 8001d46:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b09      	cmp	r3, #9
      c = *fmt++;
 8001d4e:	460e      	mov	r6, r1
      width = width * 10 + c;
 8001d50:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
 8001d54:	d9f3      	bls.n	8001d3e <chprintf+0x6e>
      else if (c == '*')
 8001d56:	2a2a      	cmp	r2, #42	; 0x2a
 8001d58:	d0ef      	beq.n	8001d3a <chprintf+0x6a>
    if (c == '.') {
 8001d5a:	2a2e      	cmp	r2, #46	; 0x2e
 8001d5c:	f04f 0100 	mov.w	r1, #0
 8001d60:	d043      	beq.n	8001dea <chprintf+0x11a>
    if (c == 'l' || c == 'L') {
 8001d62:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8001d66:	2b4c      	cmp	r3, #76	; 0x4c
 8001d68:	d04e      	beq.n	8001e08 <chprintf+0x138>
    switch (c) {
 8001d6a:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 8001d6e:	2834      	cmp	r0, #52	; 0x34
 8001d70:	f200 814e 	bhi.w	8002010 <chprintf+0x340>
 8001d74:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001d78:	014c00fb 	.word	0x014c00fb
 8001d7c:	014c014c 	.word	0x014c014c
 8001d80:	00fb014c 	.word	0x00fb014c
 8001d84:	014c014c 	.word	0x014c014c
 8001d88:	014c014c 	.word	0x014c014c
 8001d8c:	00f5014c 	.word	0x00f5014c
 8001d90:	014c014c 	.word	0x014c014c
 8001d94:	014c014c 	.word	0x014c014c
 8001d98:	0088014c 	.word	0x0088014c
 8001d9c:	014c014c 	.word	0x014c014c
 8001da0:	014c00f8 	.word	0x014c00f8
 8001da4:	014c014c 	.word	0x014c014c
 8001da8:	014c014c 	.word	0x014c014c
 8001dac:	014c014c 	.word	0x014c014c
 8001db0:	014c014c 	.word	0x014c014c
 8001db4:	0140014c 	.word	0x0140014c
 8001db8:	014c00fb 	.word	0x014c00fb
 8001dbc:	014c014c 	.word	0x014c014c
 8001dc0:	00fb014c 	.word	0x00fb014c
 8001dc4:	014c014c 	.word	0x014c014c
 8001dc8:	014c014c 	.word	0x014c014c
 8001dcc:	00f5014c 	.word	0x00f5014c
 8001dd0:	014c014c 	.word	0x014c014c
 8001dd4:	0126014c 	.word	0x0126014c
 8001dd8:	0088014c 	.word	0x0088014c
 8001ddc:	014c014c 	.word	0x014c014c
 8001de0:	00f8      	.short	0x00f8
          c = va_arg(ap, int);
 8001de2:	783b      	ldrb	r3, [r7, #0]
 8001de4:	3704      	adds	r7, #4
        precision += c;
 8001de6:	eb03 0140 	add.w	r1, r3, r0, lsl #1
        c = *fmt++;
 8001dea:	f816 2b01 	ldrb.w	r2, [r6], #1
        if (c >= '0' && c <= '9')
 8001dee:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b09      	cmp	r3, #9
        precision *= 10;
 8001df6:	eb01 0081 	add.w	r0, r1, r1, lsl #2
        if (c >= '0' && c <= '9')
 8001dfa:	d9f4      	bls.n	8001de6 <chprintf+0x116>
        else if (c == '*')
 8001dfc:	2a2a      	cmp	r2, #42	; 0x2a
 8001dfe:	d0f0      	beq.n	8001de2 <chprintf+0x112>
    if (c == 'l' || c == 'L') {
 8001e00:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8001e04:	2b4c      	cmp	r3, #76	; 0x4c
 8001e06:	d1b0      	bne.n	8001d6a <chprintf+0x9a>
      if (*fmt)
 8001e08:	7833      	ldrb	r3, [r6, #0]
 8001e0a:	b10b      	cbz	r3, 8001e10 <chprintf+0x140>
        c = *fmt++;
 8001e0c:	3601      	adds	r6, #1
 8001e0e:	461a      	mov	r2, r3
    switch (c) {
 8001e10:	f1a2 0344 	sub.w	r3, r2, #68	; 0x44
 8001e14:	2b34      	cmp	r3, #52	; 0x34
 8001e16:	f200 80fb 	bhi.w	8002010 <chprintf+0x340>
 8001e1a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001e1e:	00a8      	.short	0x00a8
 8001e20:	00f900f9 	.word	0x00f900f9
 8001e24:	00f900f9 	.word	0x00f900f9
 8001e28:	00f900a8 	.word	0x00f900a8
 8001e2c:	00f900f9 	.word	0x00f900f9
 8001e30:	00f900f9 	.word	0x00f900f9
 8001e34:	00f900a2 	.word	0x00f900a2
 8001e38:	00f900f9 	.word	0x00f900f9
 8001e3c:	00f900f9 	.word	0x00f900f9
 8001e40:	00f90035 	.word	0x00f90035
 8001e44:	00a500f9 	.word	0x00a500f9
 8001e48:	00f900f9 	.word	0x00f900f9
 8001e4c:	00f900f9 	.word	0x00f900f9
 8001e50:	00f900f9 	.word	0x00f900f9
 8001e54:	00f900f9 	.word	0x00f900f9
 8001e58:	00f900f9 	.word	0x00f900f9
 8001e5c:	00a800ed 	.word	0x00a800ed
 8001e60:	00f900f9 	.word	0x00f900f9
 8001e64:	00f900f9 	.word	0x00f900f9
 8001e68:	00f900a8 	.word	0x00f900a8
 8001e6c:	00f900f9 	.word	0x00f900f9
 8001e70:	00f900f9 	.word	0x00f900f9
 8001e74:	00f900a2 	.word	0x00f900a2
 8001e78:	00f900f9 	.word	0x00f900f9
 8001e7c:	00f900d3 	.word	0x00f900d3
 8001e80:	00f90035 	.word	0x00f90035
 8001e84:	00a500f9 	.word	0x00a500f9
 8001e88:	f04f 080a 	mov.w	r8, #10
        l = va_arg(ap, unsigned int);
 8001e8c:	683a      	ldr	r2, [r7, #0]
  q = p + MAX_FILLER;
 8001e8e:	f10d 0117 	add.w	r1, sp, #23
        l = va_arg(ap, unsigned int);
 8001e92:	3704      	adds	r7, #4
 8001e94:	e000      	b.n	8001e98 <chprintf+0x1c8>
  } while ((ll /= radix) != 0);
 8001e96:	4601      	mov	r1, r0
    i = (int)(l % radix);
 8001e98:	fbb2 fef8 	udiv	lr, r2, r8
 8001e9c:	fb08 221e 	mls	r2, r8, lr, r2
    i += '0';
 8001ea0:	f102 0330 	add.w	r3, r2, #48	; 0x30
    if (i > '9')
 8001ea4:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8001ea6:	bfc8      	it	gt
 8001ea8:	f102 0337 	addgt.w	r3, r2, #55	; 0x37
    *--q = i;
 8001eac:	b2db      	uxtb	r3, r3
    l /= radix;
 8001eae:	4672      	mov	r2, lr
    *--q = i;
 8001eb0:	f801 3c01 	strb.w	r3, [r1, #-1]
 8001eb4:	1e48      	subs	r0, r1, #1
  } while ((ll /= radix) != 0);
 8001eb6:	2a00      	cmp	r2, #0
 8001eb8:	d1ed      	bne.n	8001e96 <chprintf+0x1c6>
  i = (int)(p + MAX_FILLER - q);
 8001eba:	f10d 0217 	add.w	r2, sp, #23
 8001ebe:	f10d 080c 	add.w	r8, sp, #12
 8001ec2:	1a12      	subs	r2, r2, r0
 8001ec4:	46c6      	mov	lr, r8
 8001ec6:	4410      	add	r0, r2
 8001ec8:	e001      	b.n	8001ece <chprintf+0x1fe>
 8001eca:	f811 3b01 	ldrb.w	r3, [r1], #1
    *p++ = *q++;
 8001ece:	f80e 3b01 	strb.w	r3, [lr], #1
  while (--i);
 8001ed2:	4288      	cmp	r0, r1
 8001ed4:	d1f9      	bne.n	8001eca <chprintf+0x1fa>
 8001ed6:	1e53      	subs	r3, r2, #1
 8001ed8:	9301      	str	r3, [sp, #4]
    if ((width -= i) < 0)
 8001eda:	1aa4      	subs	r4, r4, r2
 8001edc:	d43b      	bmi.n	8001f56 <chprintf+0x286>
    if (left_align == FALSE)
 8001ede:	f1bc 0f00 	cmp.w	ip, #0
 8001ee2:	f040 809e 	bne.w	8002022 <chprintf+0x352>
 8001ee6:	f1c4 0b00 	rsb	fp, r4, #0
    if (width < 0) {
 8001eea:	2c00      	cmp	r4, #0
 8001eec:	f000 8098 	beq.w	8002020 <chprintf+0x350>
      if (*s == '-' && filler == '0') {
 8001ef0:	f898 1000 	ldrb.w	r1, [r8]
 8001ef4:	292d      	cmp	r1, #45	; 0x2d
 8001ef6:	f000 80a3 	beq.w	8002040 <chprintf+0x370>
        streamPut(chp, (uint8_t)filler);
 8001efa:	682b      	ldr	r3, [r5, #0]
 8001efc:	4649      	mov	r1, r9
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	4628      	mov	r0, r5
 8001f02:	4798      	blx	r3
      } while (++width != 0);
 8001f04:	f11b 0b01 	adds.w	fp, fp, #1
 8001f08:	d1f7      	bne.n	8001efa <chprintf+0x22a>
    while (--i >= 0) {
 8001f0a:	9b01      	ldr	r3, [sp, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	44a2      	add	sl, r4
 8001f10:	bfa8      	it	ge
 8001f12:	465c      	movge	r4, fp
 8001f14:	f6ff aee7 	blt.w	8001ce6 <chprintf+0x16>
 8001f18:	f8dd b004 	ldr.w	fp, [sp, #4]
      streamPut(chp, (uint8_t)*s++);
 8001f1c:	682b      	ldr	r3, [r5, #0]
 8001f1e:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001f22:	689b      	ldr	r3, [r3, #8]
    while (--i >= 0) {
 8001f24:	f10b 3bff 	add.w	fp, fp, #4294967295
      streamPut(chp, (uint8_t)*s++);
 8001f28:	4628      	mov	r0, r5
 8001f2a:	4798      	blx	r3
    while (--i >= 0) {
 8001f2c:	f1bb 3fff 	cmp.w	fp, #4294967295
 8001f30:	d1f4      	bne.n	8001f1c <chprintf+0x24c>
 8001f32:	9b01      	ldr	r3, [sp, #4]
 8001f34:	f10a 0a01 	add.w	sl, sl, #1
 8001f38:	449a      	add	sl, r3
    while (width) {
 8001f3a:	2c00      	cmp	r4, #0
 8001f3c:	f43f aed3 	beq.w	8001ce6 <chprintf+0x16>
 8001f40:	46a0      	mov	r8, r4
      streamPut(chp, (uint8_t)filler);
 8001f42:	682b      	ldr	r3, [r5, #0]
 8001f44:	4649      	mov	r1, r9
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4628      	mov	r0, r5
 8001f4a:	4798      	blx	r3
    while (width) {
 8001f4c:	f1b8 0801 	subs.w	r8, r8, #1
 8001f50:	d1f7      	bne.n	8001f42 <chprintf+0x272>
 8001f52:	44a2      	add	sl, r4
 8001f54:	e6c7      	b.n	8001ce6 <chprintf+0x16>
    while (--i >= 0) {
 8001f56:	9b01      	ldr	r3, [sp, #4]
 8001f58:	2b00      	cmp	r3, #0
      width = 0;
 8001f5a:	bfa8      	it	ge
 8001f5c:	2400      	movge	r4, #0
    while (--i >= 0) {
 8001f5e:	dadb      	bge.n	8001f18 <chprintf+0x248>
 8001f60:	e6c1      	b.n	8001ce6 <chprintf+0x16>
    switch (c) {
 8001f62:	f04f 0808 	mov.w	r8, #8
 8001f66:	e791      	b.n	8001e8c <chprintf+0x1bc>
 8001f68:	f04f 0810 	mov.w	r8, #16
 8001f6c:	e78e      	b.n	8001e8c <chprintf+0x1bc>
        l = va_arg(ap, int);
 8001f6e:	6839      	ldr	r1, [r7, #0]
      if (l < 0) {
 8001f70:	2900      	cmp	r1, #0
        l = va_arg(ap, int);
 8001f72:	f107 0704 	add.w	r7, r7, #4
      if (l < 0) {
 8001f76:	db73      	blt.n	8002060 <chprintf+0x390>
    p = tmpbuf;
 8001f78:	f10d 080c 	add.w	r8, sp, #12
 8001f7c:	4642      	mov	r2, r8
  q = p + MAX_FILLER;
 8001f7e:	f102 030b 	add.w	r3, r2, #11
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	4618      	mov	r0, r3
    i = (int)(l % radix);
 8001f86:	4b3e      	ldr	r3, [pc, #248]	; (8002080 <chprintf+0x3b0>)
 8001f88:	fba3 e301 	umull	lr, r3, r3, r1
 8001f8c:	08db      	lsrs	r3, r3, #3
 8001f8e:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8001f92:	469e      	mov	lr, r3
 8001f94:	eba1 034b 	sub.w	r3, r1, fp, lsl #1
    i += '0';
 8001f98:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 8001f9a:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8001f9c:	4671      	mov	r1, lr
    *--q = i;
 8001f9e:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
 8001fa2:	2900      	cmp	r1, #0
 8001fa4:	d1ef      	bne.n	8001f86 <chprintf+0x2b6>
  i = (int)(p + MAX_FILLER - q);
 8001fa6:	9901      	ldr	r1, [sp, #4]
 8001fa8:	1a09      	subs	r1, r1, r0
 8001faa:	4411      	add	r1, r2
 8001fac:	e001      	b.n	8001fb2 <chprintf+0x2e2>
 8001fae:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
 8001fb2:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 8001fb6:	428a      	cmp	r2, r1
 8001fb8:	d1f9      	bne.n	8001fae <chprintf+0x2de>
 8001fba:	eba2 0208 	sub.w	r2, r2, r8
 8001fbe:	1e53      	subs	r3, r2, #1
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	e78a      	b.n	8001eda <chprintf+0x20a>
      if ((s = va_arg(ap, char *)) == 0)
 8001fc4:	f8d7 8000 	ldr.w	r8, [r7]
 8001fc8:	3704      	adds	r7, #4
 8001fca:	f1b8 0f00 	cmp.w	r8, #0
 8001fce:	d050      	beq.n	8002072 <chprintf+0x3a2>
      for (p = s; *p && (--precision >= 0); p++)
 8001fd0:	f898 3000 	ldrb.w	r3, [r8]
      if (precision == 0)
 8001fd4:	b351      	cbz	r1, 800202c <chprintf+0x35c>
      for (p = s; *p && (--precision >= 0); p++)
 8001fd6:	b36b      	cbz	r3, 8002034 <chprintf+0x364>
 8001fd8:	3901      	subs	r1, #1
 8001fda:	4642      	mov	r2, r8
 8001fdc:	e001      	b.n	8001fe2 <chprintf+0x312>
 8001fde:	3901      	subs	r1, #1
 8001fe0:	d403      	bmi.n	8001fea <chprintf+0x31a>
 8001fe2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f9      	bne.n	8001fde <chprintf+0x30e>
 8001fea:	eba2 0208 	sub.w	r2, r2, r8
 8001fee:	1e53      	subs	r3, r2, #1
 8001ff0:	9301      	str	r3, [sp, #4]
      filler = ' ';
 8001ff2:	f04f 0920 	mov.w	r9, #32
 8001ff6:	e770      	b.n	8001eda <chprintf+0x20a>
      *p++ = va_arg(ap, int);
 8001ff8:	f10d 0818 	add.w	r8, sp, #24
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	f808 3d0c 	strb.w	r3, [r8, #-12]!
 8002002:	2300      	movs	r3, #0
 8002004:	3704      	adds	r7, #4
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	2201      	movs	r2, #1
      filler = ' ';
 800200a:	f04f 0920 	mov.w	r9, #32
 800200e:	e764      	b.n	8001eda <chprintf+0x20a>
      *p++ = c;
 8002010:	f10d 0818 	add.w	r8, sp, #24
 8002014:	2300      	movs	r3, #0
 8002016:	f808 2d0c 	strb.w	r2, [r8, #-12]!
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	e75c      	b.n	8001eda <chprintf+0x20a>
    if (width < 0) {
 8002020:	465c      	mov	r4, fp
    while (--i >= 0) {
 8002022:	9b01      	ldr	r3, [sp, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	f6bf af77 	bge.w	8001f18 <chprintf+0x248>
 800202a:	e786      	b.n	8001f3a <chprintf+0x26a>
      for (p = s; *p && (--precision >= 0); p++)
 800202c:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1d2      	bne.n	8001fda <chprintf+0x30a>
 8002034:	f04f 33ff 	mov.w	r3, #4294967295
 8002038:	9301      	str	r3, [sp, #4]
 800203a:	f04f 0920 	mov.w	r9, #32
 800203e:	e74e      	b.n	8001ede <chprintf+0x20e>
      if (*s == '-' && filler == '0') {
 8002040:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8002044:	f47f af59 	bne.w	8001efa <chprintf+0x22a>
        streamPut(chp, (uint8_t)*s++);
 8002048:	682a      	ldr	r2, [r5, #0]
 800204a:	4628      	mov	r0, r5
 800204c:	6892      	ldr	r2, [r2, #8]
 800204e:	4790      	blx	r2
 8002050:	9b01      	ldr	r3, [sp, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	f108 0801 	add.w	r8, r8, #1
        n++;
 8002058:	f10a 0a01 	add.w	sl, sl, #1
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	e74c      	b.n	8001efa <chprintf+0x22a>
        *p++ = '-';
 8002060:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8002062:	4249      	negs	r1, r1
        *p++ = '-';
 8002064:	f88d 300c 	strb.w	r3, [sp, #12]
 8002068:	f10d 020d 	add.w	r2, sp, #13
 800206c:	f10d 080c 	add.w	r8, sp, #12
 8002070:	e785      	b.n	8001f7e <chprintf+0x2ae>
        s = "(null)";
 8002072:	f8df 8010 	ldr.w	r8, [pc, #16]	; 8002084 <chprintf+0x3b4>
      if (precision == 0)
 8002076:	2900      	cmp	r1, #0
 8002078:	d1ae      	bne.n	8001fd8 <chprintf+0x308>
        precision = 32767;
 800207a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800207e:	e7ab      	b.n	8001fd8 <chprintf+0x308>
 8002080:	cccccccd 	.word	0xcccccccd
 8002084:	080036d0 	.word	0x080036d0
	...

08002090 <__early_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002090:	4a2a      	ldr	r2, [pc, #168]	; (800213c <__early_init+0xac>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8002092:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <__early_init+0xb0>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002094:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 8002098:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800209c:	6410      	str	r0, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 800209e:	6019      	str	r1, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80020a0:	6813      	ldr	r3, [r2, #0]
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80020a8:	6813      	ldr	r3, [r2, #0]
 80020aa:	0799      	lsls	r1, r3, #30
 80020ac:	d5fc      	bpl.n	80020a8 <__early_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 80020ae:	6893      	ldr	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80020b0:	4922      	ldr	r1, [pc, #136]	; (800213c <__early_init+0xac>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 80020b2:	f023 0303 	bic.w	r3, r3, #3
 80020b6:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 80020b8:	6893      	ldr	r3, [r2, #8]
 80020ba:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80020bc:	688b      	ldr	r3, [r1, #8]
 80020be:	f013 030c 	ands.w	r3, r3, #12
 80020c2:	d1fb      	bne.n	80020bc <__early_init+0x2c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80020c4:	680a      	ldr	r2, [r1, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80020c6:	481d      	ldr	r0, [pc, #116]	; (800213c <__early_init+0xac>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80020c8:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
 80020cc:	600a      	str	r2, [r1, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80020ce:	608b      	str	r3, [r1, #8]
  RCC->CR |= RCC_CR_HSEON;
 80020d0:	680b      	ldr	r3, [r1, #0]
 80020d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d6:	600b      	str	r3, [r1, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80020d8:	6803      	ldr	r3, [r0, #0]
 80020da:	039b      	lsls	r3, r3, #14
 80020dc:	d5fc      	bpl.n	80020d8 <__early_init+0x48>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80020de:	6f43      	ldr	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80020e0:	4a16      	ldr	r2, [pc, #88]	; (800213c <__early_init+0xac>)
  RCC->CSR |= RCC_CSR_LSION;
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6743      	str	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80020e8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80020ea:	0799      	lsls	r1, r3, #30
 80020ec:	d5fc      	bpl.n	80020e8 <__early_init+0x58>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <__early_init+0xb4>)
 80020f0:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80020f2:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80020f4:	4912      	ldr	r1, [pc, #72]	; (8002140 <__early_init+0xb0>)
  RCC->CR |= RCC_CR_PLLON;
 80020f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020fa:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80020fc:	684b      	ldr	r3, [r1, #4]
 80020fe:	045a      	lsls	r2, r3, #17
 8002100:	d5fc      	bpl.n	80020fc <__early_init+0x6c>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002102:	490e      	ldr	r1, [pc, #56]	; (800213c <__early_init+0xac>)
 8002104:	680b      	ldr	r3, [r1, #0]
 8002106:	019b      	lsls	r3, r3, #6
 8002108:	d5fc      	bpl.n	8002104 <__early_init+0x74>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800210a:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <__early_init+0xb8>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800210c:	4a0f      	ldr	r2, [pc, #60]	; (800214c <__early_init+0xbc>)
 800210e:	608a      	str	r2, [r1, #8]
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8002110:	f240 7202 	movw	r2, #1794	; 0x702
 8002114:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8002116:	688b      	ldr	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002118:	4a08      	ldr	r2, [pc, #32]	; (800213c <__early_init+0xac>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800211a:	f043 0302 	orr.w	r3, r3, #2
 800211e:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002120:	6893      	ldr	r3, [r2, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b08      	cmp	r3, #8
 8002128:	d1fa      	bne.n	8002120 <__early_init+0x90>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 800212a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800212c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8002134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002138:	6653      	str	r3, [r2, #100]	; 0x64
 800213a:	4770      	bx	lr
 800213c:	40023800 	.word	0x40023800
 8002140:	40007000 	.word	0x40007000
 8002144:	07415408 	.word	0x07415408
 8002148:	40023c00 	.word	0x40023c00
 800214c:	38881000 	.word	0x38881000

08002150 <usb_lld_start_in>:
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002150:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8002154:	b4f0      	push	{r4, r5, r6, r7}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002156:	68dc      	ldr	r4, [r3, #12]
 8002158:	6962      	ldr	r2, [r4, #20]
  isp->totsize = isp->txsize;
 800215a:	6813      	ldr	r3, [r2, #0]
 800215c:	60d3      	str	r3, [r2, #12]
  if (isp->txsize == 0) {
 800215e:	b9f3      	cbnz	r3, 800219e <usb_lld_start_in+0x4e>
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8002160:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8002162:	eb02 1341 	add.w	r3, r2, r1, lsl #5
 8002166:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800216a:	f8c3 0910 	str.w	r0, [r3, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	2b01      	cmp	r3, #1
 8002176:	d026      	beq.n	80021c6 <usb_lld_start_in+0x76>
 8002178:	b208      	sxth	r0, r1
 800217a:	eb02 1040 	add.w	r0, r2, r0, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800217e:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8002180:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 8002184:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8002188:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800218c:	f8d2 0834 	ldr.w	r0, [r2, #2100]	; 0x834
 8002190:	fa03 f101 	lsl.w	r1, r3, r1
 8002194:	4301      	orrs	r1, r0
 8002196:	f8c2 1834 	str.w	r1, [r2, #2100]	; 0x834
}
 800219a:	bcf0      	pop	{r4, r5, r6, r7}
 800219c:	4770      	bx	lr
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 800219e:	b319      	cbz	r1, 80021e8 <usb_lld_start_in+0x98>
 80021a0:	f043 5500 	orr.w	r5, r3, #536870912	; 0x20000000
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 80021a4:	6e02      	ldr	r2, [r0, #96]	; 0x60
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80021a6:	8a26      	ldrh	r6, [r4, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 80021a8:	eb02 1741 	add.w	r7, r2, r1, lsl #5
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80021ac:	1e70      	subs	r0, r6, #1
 80021ae:	4403      	add	r3, r0
 80021b0:	fbb3 f3f6 	udiv	r3, r3, r6
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 80021b4:	ea45 43c3 	orr.w	r3, r5, r3, lsl #19
 80021b8:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80021bc:	6823      	ldr	r3, [r4, #0]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d1d8      	bne.n	8002178 <usb_lld_start_in+0x28>
 80021c6:	b208      	sxth	r0, r1
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 80021c8:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 80021cc:	eb02 1440 	add.w	r4, r2, r0, lsl #5
 80021d0:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 80021d4:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80021d8:	bf14      	ite	ne
 80021da:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 80021de:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 80021e2:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 80021e6:	e7c8      	b.n	800217a <usb_lld_start_in+0x2a>
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 80021e8:	2b40      	cmp	r3, #64	; 0x40
 80021ea:	d9d9      	bls.n	80021a0 <usb_lld_start_in+0x50>
      isp->txsize = EP0_MAX_INSIZE;
 80021ec:	2340      	movs	r3, #64	; 0x40
 80021ee:	4d01      	ldr	r5, [pc, #4]	; (80021f4 <usb_lld_start_in+0xa4>)
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e7d7      	b.n	80021a4 <usb_lld_start_in+0x54>
 80021f4:	20000040 	.word	0x20000040
	...

08002200 <usb_lld_start_out>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8002200:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 8002204:	b430      	push	{r4, r5}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8002206:	68dd      	ldr	r5, [r3, #12]
 8002208:	69ab      	ldr	r3, [r5, #24]
  osp->totsize = osp->rxsize;
 800220a:	681c      	ldr	r4, [r3, #0]
 800220c:	60dc      	str	r4, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 800220e:	b919      	cbnz	r1, 8002218 <usb_lld_start_out+0x18>
 8002210:	2c40      	cmp	r4, #64	; 0x40
      osp->rxsize = EP0_MAX_OUTSIZE;
 8002212:	bf84      	itt	hi
 8002214:	2440      	movhi	r4, #64	; 0x40
 8002216:	601c      	strhi	r4, [r3, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8002218:	8a6b      	ldrh	r3, [r5, #18]
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800221a:	6e00      	ldr	r0, [r0, #96]	; 0x60
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800221c:	682d      	ldr	r5, [r5, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 800221e:	1e5a      	subs	r2, r3, #1
 8002220:	4422      	add	r2, r4
 8002222:	fbb2 f2f3 	udiv	r2, r2, r3
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	3303      	adds	r3, #3
 800222c:	f023 0303 	bic.w	r3, r3, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8002230:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 8002234:	eb00 1441 	add.w	r4, r0, r1, lsl #5
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8002238:	f005 0203 	and.w	r2, r5, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800223c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8002240:	2a01      	cmp	r2, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8002242:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8002246:	d00a      	beq.n	800225e <usb_lld_start_out+0x5e>
 8002248:	b209      	sxth	r1, r1
 800224a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 800224e:	bc30      	pop	{r4, r5}
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8002250:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8002254:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002258:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 800225c:	4770      	bx	lr
 800225e:	b209      	sxth	r1, r1
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8002260:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002264:	eb00 1241 	add.w	r2, r0, r1, lsl #5
 8002268:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 800226c:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8002270:	bf14      	ite	ne
 8002272:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 8002276:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 800227a:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 800227e:	e7e4      	b.n	800224a <usb_lld_start_out+0x4a>

08002280 <Thread1.lto_priv.63>:

/*
 * Blinker thread #1.
 */
static THD_WORKING_AREA(waThread1, 512);
static THD_FUNCTION(Thread1, arg) {
 8002280:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8002284:	4bc5      	ldr	r3, [pc, #788]	; (800259c <Thread1.lto_priv.63+0x31c>)
 8002286:	4ac6      	ldr	r2, [pc, #792]	; (80025a0 <Thread1.lto_priv.63+0x320>)
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	4fc6      	ldr	r7, [pc, #792]	; (80025a4 <Thread1.lto_priv.63+0x324>)
                                  LSM303DLHC_ACC_BDU_BLOCKED |
                                  LSM303DLHC_ACC_End_LITTLE |
                                  LSM303DLHC_ACC_FS_4G |
                                  LSM303DLHC_ACC_HR_Disabled,
                                  NULL);
      adata.full_scale = 4 * 9.8;
 800228c:	eddf 9ac6 	vldr	s19, [pc, #792]	; 80025a8 <Thread1.lto_priv.63+0x328>
      adata.sensitivity = LSM303DLHC_ACC_SENS_4G;
 8002290:	ed9f 9ac6 	vldr	s18, [pc, #792]	; 80025ac <Thread1.lto_priv.63+0x32c>
    return (uint32_t) ((-value - ftomod (value)) * 1000);
 8002294:	ed9f 8ac6 	vldr	s16, [pc, #792]	; 80025b0 <Thread1.lto_priv.63+0x330>
      lsm303dlhcWriteRegister(&I2CD1,  LSM303DLHC_SAD_COMPASS,
                              LSM303DLHC_SUB_COMP_MR_REG,
                              LSM303DLHC_COMP_WM_CONTINUOS,
                              NULL);
      cdata.full_scale = 2.5;
      cdata.sensitivity_xy = LSM303DLHC_COMP_SENS_XY_2_5GA;
 8002298:	eddf 8ac6 	vldr	s17, [pc, #792]	; 80025b4 <Thread1.lto_priv.63+0x334>
 800229c:	619a      	str	r2, [r3, #24]
static THD_FUNCTION(Thread1, arg) {
 800229e:	b085      	sub	sp, #20
    switch(demo_mode) {
 80022a0:	4bc5      	ldr	r3, [pc, #788]	; (80025b8 <Thread1.lto_priv.63+0x338>)
 80022a2:	681d      	ldr	r5, [r3, #0]
    btn_flag = FALSE;
 80022a4:	4bc5      	ldr	r3, [pc, #788]	; (80025bc <Thread1.lto_priv.63+0x33c>)
 80022a6:	2400      	movs	r4, #0
    switch(demo_mode) {
 80022a8:	2d01      	cmp	r5, #1
    btn_flag = FALSE;
 80022aa:	701c      	strb	r4, [r3, #0]
    switch(demo_mode) {
 80022ac:	f000 81ae 	beq.w	800260c <Thread1.lto_priv.63+0x38c>
 80022b0:	2d02      	cmp	r5, #2
 80022b2:	f000 80a5 	beq.w	8002400 <Thread1.lto_priv.63+0x180>
        chprintf(chp,"Gyroscope\n\r");
 80022b6:	49c2      	ldr	r1, [pc, #776]	; (80025c0 <Thread1.lto_priv.63+0x340>)
 80022b8:	48c2      	ldr	r0, [pc, #776]	; (80025c4 <Thread1.lto_priv.63+0x344>)
 80022ba:	f7ff fd09 	bl	8001cd0 <chprintf>
 80022be:	2320      	movs	r3, #32
 80022c0:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 80022c4:	4bc0      	ldr	r3, [pc, #768]	; (80025c8 <Thread1.lto_priv.63+0x348>)
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 80022c6:	4ac0      	ldr	r2, [pc, #768]	; (80025c8 <Thread1.lto_priv.63+0x348>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	49c0      	ldr	r1, [pc, #768]	; (80025cc <Thread1.lto_priv.63+0x34c>)
 80022cc:	6051      	str	r1, [r2, #4]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	f000 8237 	beq.w	8002742 <Thread1.lto_priv.63+0x4c2>
 80022d4:	f240 300f 	movw	r0, #783	; 0x30f

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80022d8:	4bbb      	ldr	r3, [pc, #748]	; (80025c8 <Thread1.lto_priv.63+0x348>)
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80022da:	49bb      	ldr	r1, [pc, #748]	; (80025c8 <Thread1.lto_priv.63+0x348>)
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80022dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80022e4:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80022e8:	62cb      	str	r3, [r1, #44]	; 0x2c
 80022ea:	69cb      	ldr	r3, [r1, #28]
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80022ec:	628a      	str	r2, [r1, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 80022ee:	2400      	movs	r4, #0
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 80022f0:	2207      	movs	r2, #7
  spip->spi->CR1  = 0;
 80022f2:	601c      	str	r4, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 80022f4:	6018      	str	r0, [r3, #0]
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 80022f6:	605a      	str	r2, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022fe:	601a      	str	r2, [r3, #0]
  spi_lld_start(spip);
  spip->state = SPI_READY;
 8002300:	4bb1      	ldr	r3, [pc, #708]	; (80025c8 <Thread1.lto_priv.63+0x348>)
 8002302:	2102      	movs	r1, #2
 8002304:	7019      	strb	r1, [r3, #0]
 8002306:	f384 8811 	msr	BASEPRI, r4
 800230a:	218f      	movs	r1, #143	; 0x8f
 800230c:	2020      	movs	r0, #32
 800230e:	f000 fd87 	bl	8002e20 <l3gd20WriteRegister.part.0.constprop.2>
 8002312:	4621      	mov	r1, r4
 8002314:	2023      	movs	r0, #35	; 0x23
 8002316:	f000 fd83 	bl	8002e20 <l3gd20WriteRegister.part.0.constprop.2>
      while(!btn_flag) {
 800231a:	4ba8      	ldr	r3, [pc, #672]	; (80025bc <Thread1.lto_priv.63+0x33c>)
      gdata.full_scale = 500;
 800231c:	48ac      	ldr	r0, [pc, #688]	; (80025d0 <Thread1.lto_priv.63+0x350>)
      while(!btn_flag) {
 800231e:	781b      	ldrb	r3, [r3, #0]
      gdata.full_scale = 500;
 8002320:	49ac      	ldr	r1, [pc, #688]	; (80025d4 <Thread1.lto_priv.63+0x354>)
      gdata.sensitivity = L3GD20_SENS_500DPS;
 8002322:	4aad      	ldr	r2, [pc, #692]	; (80025d8 <Thread1.lto_priv.63+0x358>)
      gdata.full_scale = 500;
 8002324:	6081      	str	r1, [r0, #8]
      gdata.sensitivity = L3GD20_SENS_500DPS;
 8002326:	60c2      	str	r2, [r0, #12]
      while(!btn_flag) {
 8002328:	2b00      	cmp	r3, #0
 800232a:	d152      	bne.n	80023d2 <Thread1.lto_priv.63+0x152>
          chprintf(chp, "GYROSCOPE L3GD20 data:\r\n");
 800232c:	f8df 9294 	ldr.w	r9, [pc, #660]	; 80025c4 <Thread1.lto_priv.63+0x344>
 8002330:	49aa      	ldr	r1, [pc, #680]	; (80025dc <Thread1.lto_priv.63+0x35c>)
 8002332:	4da7      	ldr	r5, [pc, #668]	; (80025d0 <Thread1.lto_priv.63+0x350>)
 8002334:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8002600 <Thread1.lto_priv.63+0x380>
 8002338:	4648      	mov	r0, r9
 800233a:	f7ff fcc9 	bl	8001cd0 <chprintf>
 800233e:	f105 0610 	add.w	r6, r5, #16
 8002342:	2428      	movs	r4, #40	; 0x28
 8002344:	f04f 0a58 	mov.w	sl, #88	; 0x58
          low_val = l3gd20ReadRegister(&SPID1, L3GD20_AD_OUT_X_L + 2 * ii);
 8002348:	4620      	mov	r0, r4
 800234a:	f000 fdc1 	bl	8002ed0 <l3gd20ReadRegister.constprop.1>
 800234e:	4683      	mov	fp, r0
          high_val = l3gd20ReadRegister(&SPID1, L3GD20_AD_OUT_X_H + 2 * ii);
 8002350:	1c60      	adds	r0, r4, #1
 8002352:	b2c0      	uxtb	r0, r0
 8002354:	f000 fdbc 	bl	8002ed0 <l3gd20ReadRegister.constprop.1>
          gdata.raw[ii] = (high_val << 8) + low_val;
 8002358:	eb0b 2000 	add.w	r0, fp, r0, lsl #8
 800235c:	b200      	sxth	r0, r0
          gdata.scaled[ii] = ((float) gdata.raw[ii]) / gdata.sensitivity;
 800235e:	ee07 0a90 	vmov	s15, r0
 8002362:	4b9b      	ldr	r3, [pc, #620]	; (80025d0 <Thread1.lto_priv.63+0x350>)
            chprintf(chp, "%c:%c%d.%.3d deg/s\r\n",axes[ii], ftosign(gdata.scaled[ii]),
 8002364:	499e      	ldr	r1, [pc, #632]	; (80025e0 <Thread1.lto_priv.63+0x360>)
          gdata.scaled[ii] = ((float) gdata.raw[ii]) / gdata.sensitivity;
 8002366:	ed93 7a03 	vldr	s14, [r3, #12]
          gdata.raw[ii] = (high_val << 8) + low_val;
 800236a:	f825 0b02 	strh.w	r0, [r5], #2
          gdata.scaled[ii] = ((float) gdata.raw[ii]) / gdata.sensitivity;
 800236e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002372:	3402      	adds	r4, #2
 8002374:	eec6 7a87 	vdiv.f32	s15, s13, s14
    return (uint32_t) ((value - ftomod (value)) * 1000);
 8002378:	232b      	movs	r3, #43	; 0x2b
            chprintf(chp, "%c:%c%d.%.3d deg/s\r\n",axes[ii], ftosign(gdata.scaled[ii]),
 800237a:	4652      	mov	r2, sl
 800237c:	4648      	mov	r0, r9
 800237e:	b2e4      	uxtb	r4, r4
  if (value >= 0)
 8002380:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          gdata.scaled[ii] = ((float) gdata.raw[ii]) / gdata.sensitivity;
 8002388:	ece6 7a01 	vstmia	r6!, {s15}
    return (int32_t) -1 * value;
 800238c:	bfb7      	itett	lt
 800238e:	eef1 7a67 	vneglt.f32	s15, s15
    return (int32_t) value;
 8002392:	eefd 6ae7 	vcvtge.s32.f32	s13, s15
    return (int32_t) -1 * value;
 8002396:	eefd 6ae7 	vcvtlt.s32.f32	s13, s15
            chprintf(chp, "%c:%c%d.%.3d deg/s\r\n",axes[ii], ftosign(gdata.scaled[ii]),
 800239a:	232d      	movlt	r3, #45	; 0x2d
    return (uint32_t) ((-value - ftomod (value)) * 1000);
 800239c:	eeb8 7ae6 	vcvt.f32.s32	s14, s13
            chprintf(chp, "%c:%c%d.%.3d deg/s\r\n",axes[ii], ftosign(gdata.scaled[ii]),
 80023a0:	edcd 6a00 	vstr	s13, [sp]
    return (uint32_t) ((-value - ftomod (value)) * 1000);
 80023a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023a8:	ee67 7a88 	vmul.f32	s15, s15, s16
 80023ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            chprintf(chp, "%c:%c%d.%.3d deg/s\r\n",axes[ii], ftosign(gdata.scaled[ii]),
 80023b0:	edcd 7a01 	vstr	s15, [sp, #4]
 80023b4:	f7ff fc8c 	bl	8001cd0 <chprintf>
        for(ii = 0; ii< GYRO_AXES; ii++){
 80023b8:	2c2e      	cmp	r4, #46	; 0x2e
 80023ba:	d002      	beq.n	80023c2 <Thread1.lto_priv.63+0x142>
 80023bc:	f818 ab01 	ldrb.w	sl, [r8], #1
 80023c0:	e7c2      	b.n	8002348 <Thread1.lto_priv.63+0xc8>
        chThdSleepMilliseconds(150);
 80023c2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80023c6:	f7fe ff7b 	bl	80012c0 <chThdSleep>
      while(!btn_flag) {
 80023ca:	4b7c      	ldr	r3, [pc, #496]	; (80025bc <Thread1.lto_priv.63+0x33c>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0ae      	beq.n	8002330 <Thread1.lto_priv.63+0xb0>
 80023d2:	2108      	movs	r1, #8
 80023d4:	2020      	movs	r0, #32
 80023d6:	f000 fd23 	bl	8002e20 <l3gd20WriteRegister.part.0.constprop.2>
 80023da:	2320      	movs	r3, #32
 80023dc:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void spi_lld_stop(SPIDriver *spip) {

  /* If in ready state then disables the SPI clock.*/
  if (spip->state == SPI_READY) {
 80023e0:	4b79      	ldr	r3, [pc, #484]	; (80025c8 <Thread1.lto_priv.63+0x348>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	f000 81dd 	beq.w	80027a4 <Thread1.lto_priv.63+0x524>

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spi_lld_stop(spip);
  spip->state = SPI_STOP;
 80023ea:	4a77      	ldr	r2, [pc, #476]	; (80025c8 <Thread1.lto_priv.63+0x348>)
 80023ec:	2301      	movs	r3, #1
 80023ee:	7013      	strb	r3, [r2, #0]
 80023f0:	2300      	movs	r3, #0
 80023f2:	f383 8811 	msr	BASEPRI, r3
       * Stopping I2CD1
       */
      i2cStop(&I2CD1);
      break;
    }
  chThdSleepMilliseconds(100);
 80023f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023fa:	f7fe ff61 	bl	80012c0 <chThdSleep>
 80023fe:	e74f      	b.n	80022a0 <Thread1.lto_priv.63+0x20>
        chprintf(chp,"Compass\n\r");
 8002400:	4978      	ldr	r1, [pc, #480]	; (80025e4 <Thread1.lto_priv.63+0x364>)
 8002402:	4870      	ldr	r0, [pc, #448]	; (80025c4 <Thread1.lto_priv.63+0x344>)
 8002404:	f7ff fc64 	bl	8001cd0 <chprintf>
 8002408:	2320      	movs	r3, #32
 800240a:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((i2cp != NULL) && (config != NULL));
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2cp->config = config;
 800240e:	4b76      	ldr	r3, [pc, #472]	; (80025e8 <Thread1.lto_priv.63+0x368>)
 8002410:	4a76      	ldr	r2, [pc, #472]	; (80025ec <Thread1.lto_priv.63+0x36c>)
 8002412:	605a      	str	r2, [r3, #4]
  i2c_lld_start(i2cp);
 8002414:	f000 fa7c 	bl	8002910 <i2c_lld_start.constprop.41>
  i2cp->state = I2C_READY;
 8002418:	4b73      	ldr	r3, [pc, #460]	; (80025e8 <Thread1.lto_priv.63+0x368>)
 800241a:	701d      	strb	r5, [r3, #0]
 800241c:	f384 8811 	msr	BASEPRI, r4
      return;
    case LSM303DLHC_SUB_COMP_CRA_REG:
    case LSM303DLHC_SUB_COMP_CRB_REG:
    case LSM303DLHC_SUB_COMP_MR_REG:
      txbuf[0] = sub;
      txbuf[1] = value;
 8002420:	2614      	movs	r6, #20
      if(message != NULL){
        *message = i2cMasterTransmitTimeout(i2cp, sad, txbuf, 2, &rxbuf, 0,
                                            TIME_INFINITE);
      }
      else{
        i2cMasterTransmitTimeout(i2cp, sad, txbuf, 2, &rxbuf, 0, TIME_INFINITE);
 8002422:	f10d 030b 	add.w	r3, sp, #11
 8002426:	462a      	mov	r2, r5
 8002428:	a903      	add	r1, sp, #12
 800242a:	9400      	str	r4, [sp, #0]
 800242c:	201e      	movs	r0, #30
      txbuf[1] = value;
 800242e:	f88d 600d 	strb.w	r6, [sp, #13]
      txbuf[0] = sub;
 8002432:	f88d 400c 	strb.w	r4, [sp, #12]
        i2cMasterTransmitTimeout(i2cp, sad, txbuf, 2, &rxbuf, 0, TIME_INFINITE);
 8002436:	f000 fb73 	bl	8002b20 <i2cMasterTransmitTimeout.constprop.35>
      txbuf[0] = sub;
 800243a:	2001      	movs	r0, #1
        i2cMasterTransmitTimeout(i2cp, sad, txbuf, 2, &rxbuf, 0, TIME_INFINITE);
 800243c:	f10d 030b 	add.w	r3, sp, #11
 8002440:	462a      	mov	r2, r5
 8002442:	a903      	add	r1, sp, #12
      txbuf[0] = sub;
 8002444:	f88d 000c 	strb.w	r0, [sp, #12]
        i2cMasterTransmitTimeout(i2cp, sad, txbuf, 2, &rxbuf, 0, TIME_INFINITE);
 8002448:	9400      	str	r4, [sp, #0]
      txbuf[1] = value;
 800244a:	2660      	movs	r6, #96	; 0x60
        i2cMasterTransmitTimeout(i2cp, sad, txbuf, 2, &rxbuf, 0, TIME_INFINITE);
 800244c:	201e      	movs	r0, #30
      txbuf[1] = value;
 800244e:	f88d 600d 	strb.w	r6, [sp, #13]
        i2cMasterTransmitTimeout(i2cp, sad, txbuf, 2, &rxbuf, 0, TIME_INFINITE);
 8002452:	f000 fb65 	bl	8002b20 <i2cMasterTransmitTimeout.constprop.35>
 8002456:	462a      	mov	r2, r5
 8002458:	f10d 030b 	add.w	r3, sp, #11
 800245c:	9400      	str	r4, [sp, #0]
 800245e:	a903      	add	r1, sp, #12
 8002460:	201e      	movs	r0, #30
      txbuf[0] = sub;
 8002462:	f88d 500c 	strb.w	r5, [sp, #12]
      txbuf[1] = value;
 8002466:	f88d 400d 	strb.w	r4, [sp, #13]
          chprintf(chp, "COMPASS LSM303DLHC data:\r\n");
 800246a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8002604 <Thread1.lto_priv.63+0x384>
        i2cMasterTransmitTimeout(i2cp, sad, txbuf, 2, &rxbuf, 0, TIME_INFINITE);
 800246e:	f000 fb57 	bl	8002b20 <i2cMasterTransmitTimeout.constprop.35>
      cdata.sensitivity_z = LSM303DLHC_COMP_SENS_Z_2_5GA;
 8002472:	4b5f      	ldr	r3, [pc, #380]	; (80025f0 <Thread1.lto_priv.63+0x370>)
      cdata.full_scale = 2.5;
 8002474:	4a5f      	ldr	r2, [pc, #380]	; (80025f4 <Thread1.lto_priv.63+0x374>)
      cdata.sensitivity_xy = LSM303DLHC_COMP_SENS_XY_2_5GA;
 8002476:	edc7 8a03 	vstr	s17, [r7, #12]
      cdata.full_scale = 2.5;
 800247a:	60ba      	str	r2, [r7, #8]
      cdata.sensitivity_z = LSM303DLHC_COMP_SENS_Z_2_5GA;
 800247c:	613b      	str	r3, [r7, #16]
      while(!btn_flag) {
 800247e:	4b4f      	ldr	r3, [pc, #316]	; (80025bc <Thread1.lto_priv.63+0x33c>)
 8002480:	781c      	ldrb	r4, [r3, #0]
 8002482:	2c00      	cmp	r4, #0
 8002484:	d170      	bne.n	8002568 <Thread1.lto_priv.63+0x2e8>
          chprintf(chp, "COMPASS LSM303DLHC data:\r\n");
 8002486:	4649      	mov	r1, r9
 8002488:	484e      	ldr	r0, [pc, #312]	; (80025c4 <Thread1.lto_priv.63+0x344>)
 800248a:	4d5b      	ldr	r5, [pc, #364]	; (80025f8 <Thread1.lto_priv.63+0x378>)
            chprintf(chp, "%c:%c%d.%.3d Gauss\r\n",axes[ii], ftosign(cdata.scaled[ii]),
 800248c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8002608 <Thread1.lto_priv.63+0x388>
          chprintf(chp, "COMPASS LSM303DLHC data:\r\n");
 8002490:	f7ff fc1e 	bl	8001cd0 <chprintf>
        low_val = lsm303dlhcReadRegister(&I2CD1,LSM303DLHC_SAD_COMPASS,
 8002494:	2104      	movs	r1, #4
 8002496:	201e      	movs	r0, #30
 8002498:	f000 fcb2 	bl	8002e00 <lsm303dlhcReadRegister.constprop.4>
        high_val = lsm303dlhcReadRegister(&I2CD1, LSM303DLHC_SAD_COMPASS,
 800249c:	2103      	movs	r1, #3
        low_val = lsm303dlhcReadRegister(&I2CD1,LSM303DLHC_SAD_COMPASS,
 800249e:	4606      	mov	r6, r0
        high_val = lsm303dlhcReadRegister(&I2CD1, LSM303DLHC_SAD_COMPASS,
 80024a0:	201e      	movs	r0, #30
 80024a2:	f000 fcad 	bl	8002e00 <lsm303dlhcReadRegister.constprop.4>
        low_val = lsm303dlhcReadRegister(&I2CD1, LSM303DLHC_SAD_COMPASS,
 80024a6:	2108      	movs	r1, #8
        cdata.raw[0] = (high_val << 8) + low_val;
 80024a8:	eb06 2600 	add.w	r6, r6, r0, lsl #8
        low_val = lsm303dlhcReadRegister(&I2CD1, LSM303DLHC_SAD_COMPASS,
 80024ac:	201e      	movs	r0, #30
        cdata.raw[0] = (high_val << 8) + low_val;
 80024ae:	803e      	strh	r6, [r7, #0]
        low_val = lsm303dlhcReadRegister(&I2CD1, LSM303DLHC_SAD_COMPASS,
 80024b0:	f000 fca6 	bl	8002e00 <lsm303dlhcReadRegister.constprop.4>
        high_val = lsm303dlhcReadRegister(&I2CD1,
 80024b4:	2107      	movs	r1, #7
        low_val = lsm303dlhcReadRegister(&I2CD1, LSM303DLHC_SAD_COMPASS,
 80024b6:	4606      	mov	r6, r0
        high_val = lsm303dlhcReadRegister(&I2CD1,
 80024b8:	201e      	movs	r0, #30
 80024ba:	f000 fca1 	bl	8002e00 <lsm303dlhcReadRegister.constprop.4>
        low_val = lsm303dlhcReadRegister(&I2CD1, LSM303DLHC_SAD_COMPASS,
 80024be:	2106      	movs	r1, #6
        cdata.raw[1] = (high_val << 8) + low_val;
 80024c0:	eb06 2600 	add.w	r6, r6, r0, lsl #8
        low_val = lsm303dlhcReadRegister(&I2CD1, LSM303DLHC_SAD_COMPASS,
 80024c4:	201e      	movs	r0, #30
        cdata.raw[1] = (high_val << 8) + low_val;
 80024c6:	807e      	strh	r6, [r7, #2]
        low_val = lsm303dlhcReadRegister(&I2CD1, LSM303DLHC_SAD_COMPASS,
 80024c8:	f000 fc9a 	bl	8002e00 <lsm303dlhcReadRegister.constprop.4>
        high_val = lsm303dlhcReadRegister(&I2CD1, LSM303DLHC_SAD_COMPASS,
 80024cc:	2105      	movs	r1, #5
        low_val = lsm303dlhcReadRegister(&I2CD1, LSM303DLHC_SAD_COMPASS,
 80024ce:	4606      	mov	r6, r0
        high_val = lsm303dlhcReadRegister(&I2CD1, LSM303DLHC_SAD_COMPASS,
 80024d0:	201e      	movs	r0, #30
 80024d2:	f000 fc95 	bl	8002e00 <lsm303dlhcReadRegister.constprop.4>
          if(ii < COMP_AXES - 1)
 80024d6:	2c02      	cmp	r4, #2
        cdata.raw[2] = (high_val << 8) + low_val;
 80024d8:	eb06 2000 	add.w	r0, r6, r0, lsl #8
 80024dc:	80b8      	strh	r0, [r7, #4]
            chprintf(chp, "%c:%c%d.%.3d Gauss\r\n",axes[ii], ftosign(cdata.scaled[ii]),
 80024de:	4e39      	ldr	r6, [pc, #228]	; (80025c4 <Thread1.lto_priv.63+0x344>)
        cdata.raw[2] = (high_val << 8) + low_val;
 80024e0:	f04f 0258 	mov.w	r2, #88	; 0x58
          if(ii < COMP_AXES - 1)
 80024e4:	d133      	bne.n	800254e <Thread1.lto_priv.63+0x2ce>
            cdata.scaled[ii] = ((float) cdata.raw[ii]) / cdata.sensitivity_z;
 80024e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024ea:	edd7 6a04 	vldr	s13, [r7, #16]
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024fa:	ed87 7a07 	vstr	s14, [r7, #28]
 80024fe:	edd5 7a00 	vldr	s15, [r5]
  if (value >= 0)
 8002502:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return (int32_t) -1 * value;
 800250a:	bfb8      	it	lt
 800250c:	eef1 7a67 	vneglt.f32	s15, s15
 8002510:	eefd 6ae7 	vcvt.s32.f32	s13, s15
    return (uint32_t) ((value - ftomod (value)) * 1000);
 8002514:	f04f 032b 	mov.w	r3, #43	; 0x2b
    return (uint32_t) ((-value - ftomod (value)) * 1000);
 8002518:	eeb8 7ae6 	vcvt.f32.s32	s14, s13
            chprintf(chp, "%c:%c%d.%.3d Gauss\r\n",axes[ii], ftosign(cdata.scaled[ii]),
 800251c:	bfb8      	it	lt
 800251e:	232d      	movlt	r3, #45	; 0x2d
    return (uint32_t) ((-value - ftomod (value)) * 1000);
 8002520:	ee77 7ac7 	vsub.f32	s15, s15, s14
            chprintf(chp, "%c:%c%d.%.3d Gauss\r\n",axes[ii], ftosign(cdata.scaled[ii]),
 8002524:	edcd 6a00 	vstr	s13, [sp]
    return (uint32_t) ((-value - ftomod (value)) * 1000);
 8002528:	ee67 7a88 	vmul.f32	s15, s15, s16
        for(ii = 0; ii < COMP_AXES; ii++){
 800252c:	3401      	adds	r4, #1
    return (uint32_t) ((-value - ftomod (value)) * 1000);
 800252e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            chprintf(chp, "%c:%c%d.%.3d Gauss\r\n",axes[ii], ftosign(cdata.scaled[ii]),
 8002532:	4641      	mov	r1, r8
 8002534:	edcd 7a01 	vstr	s15, [sp, #4]
 8002538:	4630      	mov	r0, r6
 800253a:	f7ff fbc9 	bl	8001cd0 <chprintf>
        for(ii = 0; ii < COMP_AXES; ii++){
 800253e:	2c03      	cmp	r4, #3
 8002540:	f105 0504 	add.w	r5, r5, #4
 8002544:	d09b      	beq.n	800247e <Thread1.lto_priv.63+0x1fe>
 8002546:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <Thread1.lto_priv.63+0x37c>)
          if(ii < COMP_AXES - 1)
 8002548:	2c02      	cmp	r4, #2
 800254a:	5d1a      	ldrb	r2, [r3, r4]
 800254c:	d0cb      	beq.n	80024e6 <Thread1.lto_priv.63+0x266>
            cdata.scaled[ii] = ((float) cdata.raw[ii]) / cdata.sensitivity_xy;
 800254e:	f937 3014 	ldrsh.w	r3, [r7, r4, lsl #1]
 8002552:	edd7 6a03 	vldr	s13, [r7, #12]
 8002556:	ee07 3a10 	vmov	s14, r3
 800255a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800255e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002562:	edc5 7a00 	vstr	s15, [r5]
 8002566:	e7cc      	b.n	8002502 <Thread1.lto_priv.63+0x282>
      txbuf[0] = sub;
 8002568:	2402      	movs	r4, #2
        i2cMasterTransmitTimeout(i2cp, sad, txbuf, 2, &rxbuf, 0, TIME_INFINITE);
 800256a:	2500      	movs	r5, #0
 800256c:	f10d 030b 	add.w	r3, sp, #11
 8002570:	4622      	mov	r2, r4
 8002572:	9500      	str	r5, [sp, #0]
 8002574:	a903      	add	r1, sp, #12
 8002576:	201e      	movs	r0, #30
      txbuf[0] = sub;
 8002578:	f88d 400c 	strb.w	r4, [sp, #12]
      txbuf[1] = value;
 800257c:	f88d 400d 	strb.w	r4, [sp, #13]
        i2cMasterTransmitTimeout(i2cp, sad, txbuf, 2, &rxbuf, 0, TIME_INFINITE);
 8002580:	f000 face 	bl	8002b20 <i2cMasterTransmitTimeout.constprop.35>
 8002584:	2320      	movs	r3, #32
 8002586:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(i2cp != NULL);
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2c_lld_stop(i2cp);
 800258a:	f000 fa81 	bl	8002a90 <i2c_lld_stop.constprop.38>
  i2cp->state = I2C_STOP;
 800258e:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <Thread1.lto_priv.63+0x368>)
 8002590:	2301      	movs	r3, #1
 8002592:	7013      	strb	r3, [r2, #0]
 8002594:	f385 8811 	msr	BASEPRI, r5
 8002598:	e72d      	b.n	80023f6 <Thread1.lto_priv.63+0x176>
 800259a:	bf00      	nop
 800259c:	20000b98 	.word	0x20000b98
 80025a0:	08003720 	.word	0x08003720
 80025a4:	20000834 	.word	0x20000834
 80025a8:	421ccccd 	.word	0x421ccccd
 80025ac:	4450fac1 	.word	0x4450fac1
 80025b0:	447a0000 	.word	0x447a0000
 80025b4:	44278000 	.word	0x44278000
 80025b8:	20000dc8 	.word	0x20000dc8
 80025bc:	20000da4 	.word	0x20000da4
 80025c0:	08003728 	.word	0x08003728
 80025c4:	200008a8 	.word	0x200008a8
 80025c8:	20000920 	.word	0x20000920
 80025cc:	08003820 	.word	0x08003820
 80025d0:	20000854 	.word	0x20000854
 80025d4:	43fa0000 	.word	0x43fa0000
 80025d8:	4283126f 	.word	0x4283126f
 80025dc:	08003734 	.word	0x08003734
 80025e0:	08003750 	.word	0x08003750
 80025e4:	080037b4 	.word	0x080037b4
 80025e8:	20000870 	.word	0x20000870
 80025ec:	08003810 	.word	0x08003810
 80025f0:	44160000 	.word	0x44160000
 80025f4:	40200000 	.word	0x40200000
 80025f8:	20000848 	.word	0x20000848
 80025fc:	08003800 	.word	0x08003800
 8002600:	08003801 	.word	0x08003801
 8002604:	080037c0 	.word	0x080037c0
 8002608:	080037dc 	.word	0x080037dc
        chprintf(chp,"Accelerometer\n\r");
 800260c:	4970      	ldr	r1, [pc, #448]	; (80027d0 <Thread1.lto_priv.63+0x550>)
 800260e:	4871      	ldr	r0, [pc, #452]	; (80027d4 <Thread1.lto_priv.63+0x554>)
 8002610:	f7ff fb5e 	bl	8001cd0 <chprintf>
 8002614:	2620      	movs	r6, #32
 8002616:	f386 8811 	msr	BASEPRI, r6
  i2cp->config = config;
 800261a:	4b6f      	ldr	r3, [pc, #444]	; (80027d8 <Thread1.lto_priv.63+0x558>)
 800261c:	4a6f      	ldr	r2, [pc, #444]	; (80027dc <Thread1.lto_priv.63+0x55c>)
 800261e:	605a      	str	r2, [r3, #4]
  i2c_lld_start(i2cp);
 8002620:	f000 f976 	bl	8002910 <i2c_lld_start.constprop.41>
  i2cp->state = I2C_READY;
 8002624:	4b6c      	ldr	r3, [pc, #432]	; (80027d8 <Thread1.lto_priv.63+0x558>)
 8002626:	2502      	movs	r5, #2
 8002628:	701d      	strb	r5, [r3, #0]
 800262a:	f384 8811 	msr	BASEPRI, r4
      txbuf[1] = value;
 800262e:	f04f 0e77 	mov.w	lr, #119	; 0x77
        i2cMasterTransmitTimeout(i2cp, sad, txbuf, 2, &rxbuf, 0, TIME_INFINITE);
 8002632:	462a      	mov	r2, r5
 8002634:	9400      	str	r4, [sp, #0]
 8002636:	f10d 030b 	add.w	r3, sp, #11
 800263a:	a903      	add	r1, sp, #12
 800263c:	2019      	movs	r0, #25
      txbuf[1] = value;
 800263e:	f88d e00d 	strb.w	lr, [sp, #13]
      txbuf[0] = sub;
 8002642:	f88d 600c 	strb.w	r6, [sp, #12]
        i2cMasterTransmitTimeout(i2cp, sad, txbuf, 2, &rxbuf, 0, TIME_INFINITE);
 8002646:	f000 fa6b 	bl	8002b20 <i2cMasterTransmitTimeout.constprop.35>
 800264a:	9400      	str	r4, [sp, #0]
 800264c:	462a      	mov	r2, r5
 800264e:	f10d 030b 	add.w	r3, sp, #11
      txbuf[0] = sub;
 8002652:	2523      	movs	r5, #35	; 0x23
      txbuf[1] = value;
 8002654:	2490      	movs	r4, #144	; 0x90
        i2cMasterTransmitTimeout(i2cp, sad, txbuf, 2, &rxbuf, 0, TIME_INFINITE);
 8002656:	a903      	add	r1, sp, #12
 8002658:	2019      	movs	r0, #25
      txbuf[0] = sub;
 800265a:	f88d 500c 	strb.w	r5, [sp, #12]
      txbuf[1] = value;
 800265e:	f88d 400d 	strb.w	r4, [sp, #13]
        i2cMasterTransmitTimeout(i2cp, sad, txbuf, 2, &rxbuf, 0, TIME_INFINITE);
 8002662:	f000 fa5d 	bl	8002b20 <i2cMasterTransmitTimeout.constprop.35>
      adata.full_scale = 4 * 9.8;
 8002666:	4b5e      	ldr	r3, [pc, #376]	; (80027e0 <Thread1.lto_priv.63+0x560>)
 8002668:	edc3 9a02 	vstr	s19, [r3, #8]
      adata.sensitivity = LSM303DLHC_ACC_SENS_4G;
 800266c:	ed83 9a03 	vstr	s18, [r3, #12]
      while(!btn_flag) {
 8002670:	4b5c      	ldr	r3, [pc, #368]	; (80027e4 <Thread1.lto_priv.63+0x564>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d14c      	bne.n	8002712 <Thread1.lto_priv.63+0x492>
          chprintf(chp, "ACCELEROMETER LSM303DLHC data:\r\n");
 8002678:	495b      	ldr	r1, [pc, #364]	; (80027e8 <Thread1.lto_priv.63+0x568>)
 800267a:	4856      	ldr	r0, [pc, #344]	; (80027d4 <Thread1.lto_priv.63+0x554>)
 800267c:	4e58      	ldr	r6, [pc, #352]	; (80027e0 <Thread1.lto_priv.63+0x560>)
 800267e:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80027fc <Thread1.lto_priv.63+0x57c>
            chprintf(chp, "%c:%c%d.%.3d m/s^2\r\n",axes[ii], ftosign(adata.scaled[ii]),
 8002682:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8002800 <Thread1.lto_priv.63+0x580>
          chprintf(chp, "ACCELEROMETER LSM303DLHC data:\r\n");
 8002686:	f7ff fb23 	bl	8001cd0 <chprintf>
 800268a:	f106 0810 	add.w	r8, r6, #16
 800268e:	2428      	movs	r4, #40	; 0x28
 8002690:	f04f 0b58 	mov.w	fp, #88	; 0x58
          low_val = lsm303dlhcReadRegister(&I2CD1, LSM303DLHC_SAD_ACCEL,
 8002694:	4621      	mov	r1, r4
 8002696:	2019      	movs	r0, #25
 8002698:	f000 fbb2 	bl	8002e00 <lsm303dlhcReadRegister.constprop.4>
          high_val = lsm303dlhcReadRegister(&I2CD1, LSM303DLHC_SAD_ACCEL,
 800269c:	1c61      	adds	r1, r4, #1
          low_val = lsm303dlhcReadRegister(&I2CD1, LSM303DLHC_SAD_ACCEL,
 800269e:	4605      	mov	r5, r0
          high_val = lsm303dlhcReadRegister(&I2CD1, LSM303DLHC_SAD_ACCEL,
 80026a0:	b2c9      	uxtb	r1, r1
 80026a2:	2019      	movs	r0, #25
 80026a4:	f000 fbac 	bl	8002e00 <lsm303dlhcReadRegister.constprop.4>
          adata.raw[ii] = ((high_val << 8) + low_val);
 80026a8:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 80026ac:	b200      	sxth	r0, r0
          adata.scaled[ii] = ((float) adata.raw[ii]) / adata.sensitivity;
 80026ae:	ee07 0a90 	vmov	s15, r0
 80026b2:	4b4b      	ldr	r3, [pc, #300]	; (80027e0 <Thread1.lto_priv.63+0x560>)
 80026b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026b8:	ed93 7a03 	vldr	s14, [r3, #12]
          adata.raw[ii] = ((high_val << 8) + low_val);
 80026bc:	f826 0b02 	strh.w	r0, [r6], #2
          adata.scaled[ii] = ((float) adata.raw[ii]) / adata.sensitivity;
 80026c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026c4:	3402      	adds	r4, #2
    return (uint32_t) ((value - ftomod (value)) * 1000);
 80026c6:	232b      	movs	r3, #43	; 0x2b
            chprintf(chp, "%c:%c%d.%.3d m/s^2\r\n",axes[ii], ftosign(adata.scaled[ii]),
 80026c8:	4842      	ldr	r0, [pc, #264]	; (80027d4 <Thread1.lto_priv.63+0x554>)
 80026ca:	465a      	mov	r2, fp
 80026cc:	4651      	mov	r1, sl
 80026ce:	b2e4      	uxtb	r4, r4
  if (value >= 0)
 80026d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          adata.scaled[ii] = ((float) adata.raw[ii]) / adata.sensitivity;
 80026d8:	ece8 7a01 	vstmia	r8!, {s15}
    return (int32_t) -1 * value;
 80026dc:	bfb7      	itett	lt
 80026de:	eef1 7a67 	vneglt.f32	s15, s15
    return (int32_t) value;
 80026e2:	eefd 6ae7 	vcvtge.s32.f32	s13, s15
    return (int32_t) -1 * value;
 80026e6:	eefd 6ae7 	vcvtlt.s32.f32	s13, s15
            chprintf(chp, "%c:%c%d.%.3d m/s^2\r\n",axes[ii], ftosign(adata.scaled[ii]),
 80026ea:	232d      	movlt	r3, #45	; 0x2d
    return (uint32_t) ((-value - ftomod (value)) * 1000);
 80026ec:	eeb8 7ae6 	vcvt.f32.s32	s14, s13
            chprintf(chp, "%c:%c%d.%.3d m/s^2\r\n",axes[ii], ftosign(adata.scaled[ii]),
 80026f0:	edcd 6a00 	vstr	s13, [sp]
    return (uint32_t) ((-value - ftomod (value)) * 1000);
 80026f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026f8:	ee67 7a88 	vmul.f32	s15, s15, s16
 80026fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            chprintf(chp, "%c:%c%d.%.3d m/s^2\r\n",axes[ii], ftosign(adata.scaled[ii]),
 8002700:	edcd 7a01 	vstr	s15, [sp, #4]
 8002704:	f7ff fae4 	bl	8001cd0 <chprintf>
        for(ii = 0; ii< ACCEL_AXES; ii++){
 8002708:	2c2e      	cmp	r4, #46	; 0x2e
 800270a:	d0b1      	beq.n	8002670 <Thread1.lto_priv.63+0x3f0>
 800270c:	f819 bb01 	ldrb.w	fp, [r9], #1
 8002710:	e7c0      	b.n	8002694 <Thread1.lto_priv.63+0x414>
      txbuf[1] = value;
 8002712:	2400      	movs	r4, #0
        i2cMasterTransmitTimeout(i2cp, sad, txbuf, 2, &rxbuf, 0, TIME_INFINITE);
 8002714:	9400      	str	r4, [sp, #0]
      txbuf[0] = sub;
 8002716:	2520      	movs	r5, #32
        i2cMasterTransmitTimeout(i2cp, sad, txbuf, 2, &rxbuf, 0, TIME_INFINITE);
 8002718:	f10d 030b 	add.w	r3, sp, #11
 800271c:	2202      	movs	r2, #2
 800271e:	a903      	add	r1, sp, #12
 8002720:	2019      	movs	r0, #25
      txbuf[1] = value;
 8002722:	f88d 400d 	strb.w	r4, [sp, #13]
      txbuf[0] = sub;
 8002726:	f88d 500c 	strb.w	r5, [sp, #12]
        i2cMasterTransmitTimeout(i2cp, sad, txbuf, 2, &rxbuf, 0, TIME_INFINITE);
 800272a:	f000 f9f9 	bl	8002b20 <i2cMasterTransmitTimeout.constprop.35>
 800272e:	f385 8811 	msr	BASEPRI, r5
  i2c_lld_stop(i2cp);
 8002732:	f000 f9ad 	bl	8002a90 <i2c_lld_stop.constprop.38>
  i2cp->state = I2C_STOP;
 8002736:	4a28      	ldr	r2, [pc, #160]	; (80027d8 <Thread1.lto_priv.63+0x558>)
 8002738:	2301      	movs	r3, #1
 800273a:	7013      	strb	r3, [r2, #0]
 800273c:	f384 8811 	msr	BASEPRI, r4
 8002740:	e659      	b.n	80023f6 <Thread1.lto_priv.63+0x176>
      b = dmaStreamAllocate(spip->dmarx,
 8002742:	4613      	mov	r3, r2
 8002744:	210a      	movs	r1, #10
 8002746:	4a29      	ldr	r2, [pc, #164]	; (80027ec <Thread1.lto_priv.63+0x56c>)
 8002748:	6a18      	ldr	r0, [r3, #32]
 800274a:	f7fe f929 	bl	80009a0 <dmaStreamAllocate>
      b = dmaStreamAllocate(spip->dmatx,
 800274e:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <Thread1.lto_priv.63+0x570>)
 8002750:	4a28      	ldr	r2, [pc, #160]	; (80027f4 <Thread1.lto_priv.63+0x574>)
 8002752:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002754:	210a      	movs	r1, #10
 8002756:	f7fe f923 	bl	80009a0 <dmaStreamAllocate>
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 800275a:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <Thread1.lto_priv.63+0x570>)
      rccEnableSPI1(FALSE);
 800275c:	4926      	ldr	r1, [pc, #152]	; (80027f8 <Thread1.lto_priv.63+0x578>)
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 800275e:	6a1c      	ldr	r4, [r3, #32]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8002760:	6a58      	ldr	r0, [r3, #36]	; 0x24
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8002762:	685b      	ldr	r3, [r3, #4]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8002764:	6825      	ldr	r5, [r4, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8002766:	6804      	ldr	r4, [r0, #0]
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8002768:	8958      	ldrh	r0, [r3, #10]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 800276a:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <Thread1.lto_priv.63+0x570>)
      rccEnableSPI1(FALSE);
 800276c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 800276e:	69db      	ldr	r3, [r3, #28]
      rccEnableSPI1(FALSE);
 8002770:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002774:	644a      	str	r2, [r1, #68]	; 0x44
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8002776:	f103 020c 	add.w	r2, r3, #12
 800277a:	60aa      	str	r2, [r5, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 800277c:	60a2      	str	r2, [r4, #8]
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 800277e:	0502      	lsls	r2, r0, #20
 8002780:	d523      	bpl.n	80027ca <Thread1.lto_priv.63+0x54a>
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002782:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <Thread1.lto_priv.63+0x570>)
 8002784:	4c1a      	ldr	r4, [pc, #104]	; (80027f0 <Thread1.lto_priv.63+0x570>)
 8002786:	6a91      	ldr	r1, [r2, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002788:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800278a:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800278e:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8002792:	f441 5120 	orr.w	r1, r1, #10240	; 0x2800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8002796:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 800279a:	f440 7041 	orr.w	r0, r0, #772	; 0x304
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800279e:	62a1      	str	r1, [r4, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80027a0:	62e2      	str	r2, [r4, #44]	; 0x2c
 80027a2:	e5a4      	b.n	80022ee <Thread1.lto_priv.63+0x6e>

    /* SPI disable.*/
    spip->spi->CR1 = 0;
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <Thread1.lto_priv.63+0x570>)
    spip->spi->CR2 = 0;
    dmaStreamRelease(spip->dmarx);
 80027a6:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <Thread1.lto_priv.63+0x570>)
    spip->spi->CR1 = 0;
 80027a8:	69db      	ldr	r3, [r3, #28]
    dmaStreamRelease(spip->dmarx);
 80027aa:	6a10      	ldr	r0, [r2, #32]
    spip->spi->CR1 = 0;
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
    spip->spi->CR2 = 0;
 80027b0:	605a      	str	r2, [r3, #4]
    dmaStreamRelease(spip->dmarx);
 80027b2:	f7fe f8c5 	bl	8000940 <dmaStreamRelease>
    dmaStreamRelease(spip->dmatx);
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <Thread1.lto_priv.63+0x570>)
 80027b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80027ba:	f7fe f8c1 	bl	8000940 <dmaStreamRelease>

#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip)
      rccDisableSPI1(FALSE);
 80027be:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <Thread1.lto_priv.63+0x578>)
 80027c0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80027c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027c6:	6453      	str	r3, [r2, #68]	; 0x44
 80027c8:	e60f      	b.n	80023ea <Thread1.lto_priv.63+0x16a>
 80027ca:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 80027ce:	e583      	b.n	80022d8 <Thread1.lto_priv.63+0x58>
 80027d0:	08003768 	.word	0x08003768
 80027d4:	200008a8 	.word	0x200008a8
 80027d8:	20000870 	.word	0x20000870
 80027dc:	08003810 	.word	0x08003810
 80027e0:	20000818 	.word	0x20000818
 80027e4:	20000da4 	.word	0x20000da4
 80027e8:	08003778 	.word	0x08003778
 80027ec:	08001651 	.word	0x08001651
 80027f0:	20000920 	.word	0x20000920
 80027f4:	08001441 	.word	0x08001441
 80027f8:	40023800 	.word	0x40023800
 80027fc:	08003801 	.word	0x08003801
 8002800:	0800379c 	.word	0x0800379c
	...

08002810 <chSchWakeupS.constprop.59>:
  if (ntp->p_prio <= currp->p_prio) {
 8002810:	4b14      	ldr	r3, [pc, #80]	; (8002864 <chSchWakeupS.constprop.59+0x54>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002812:	b470      	push	{r4, r5, r6}
  ntp->p_u.rdymsg = msg;
 8002814:	2200      	movs	r2, #0
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002816:	4604      	mov	r4, r0
  if (ntp->p_prio <= currp->p_prio) {
 8002818:	699d      	ldr	r5, [r3, #24]
  ntp->p_u.rdymsg = msg;
 800281a:	6202      	str	r2, [r0, #32]
  if (ntp->p_prio <= currp->p_prio) {
 800281c:	68a8      	ldr	r0, [r5, #8]
 800281e:	68a1      	ldr	r1, [r4, #8]
 8002820:	4281      	cmp	r1, r0
 8002822:	d80b      	bhi.n	800283c <chSchWakeupS.constprop.59+0x2c>
  tp->p_state = CH_STATE_READY;
 8002824:	7722      	strb	r2, [r4, #28]
    cp = cp->p_next;
 8002826:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	4291      	cmp	r1, r2
 800282c:	d9fb      	bls.n	8002826 <chSchWakeupS.constprop.59+0x16>
  tp->p_prev = cp->p_prev;
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	6062      	str	r2, [r4, #4]
  tp->p_next = cp;
 8002832:	6023      	str	r3, [r4, #0]
  tp->p_prev->p_next = tp;
 8002834:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8002836:	605c      	str	r4, [r3, #4]
}
 8002838:	bc70      	pop	{r4, r5, r6}
 800283a:	4770      	bx	lr
  tp->p_state = CH_STATE_READY;
 800283c:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 800283e:	461a      	mov	r2, r3
    cp = cp->p_next;
 8002840:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8002842:	6891      	ldr	r1, [r2, #8]
 8002844:	4288      	cmp	r0, r1
 8002846:	d9fb      	bls.n	8002840 <chSchWakeupS.constprop.59+0x30>
  tp->p_prev = cp->p_prev;
 8002848:	6850      	ldr	r0, [r2, #4]
 800284a:	6068      	str	r0, [r5, #4]
    ntp->p_state = CH_STATE_CURRENT;
 800284c:	2601      	movs	r6, #1
  tp->p_next = cp;
 800284e:	602a      	str	r2, [r5, #0]
  tp->p_prev->p_next = tp;
 8002850:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 8002852:	6055      	str	r5, [r2, #4]
    ntp->p_state = CH_STATE_CURRENT;
 8002854:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 8002856:	4629      	mov	r1, r5
 8002858:	4620      	mov	r0, r4
    setcurrp(ntp);
 800285a:	619c      	str	r4, [r3, #24]
}
 800285c:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 800285e:	f7fd bd37 	b.w	80002d0 <_port_switch>
 8002862:	bf00      	nop
 8002864:	20000b98 	.word	0x20000b98
	...

08002870 <chTMStartMeasurementX.constprop.56>:
 8002870:	4b01      	ldr	r3, [pc, #4]	; (8002878 <chTMStartMeasurementX.constprop.56+0x8>)
 8002872:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8002874:	6083      	str	r3, [r0, #8]
 8002876:	4770      	bx	lr
 8002878:	e0001000 	.word	0xe0001000
 800287c:	00000000 	.word	0x00000000

08002880 <chSysPolledDelayX.constprop.54>:
 8002880:	4a03      	ldr	r2, [pc, #12]	; (8002890 <chSysPolledDelayX.constprop.54+0x10>)
 8002882:	6851      	ldr	r1, [r2, #4]
 8002884:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)((cnt - start) < (end - start));
 8002886:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 8002888:	2b11      	cmp	r3, #17
 800288a:	d9fb      	bls.n	8002884 <chSysPolledDelayX.constprop.54+0x4>
  }
}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e0001000 	.word	0xe0001000
	...

080028a0 <chEvtBroadcastFlagsI.constprop.50>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80028a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 80028a2:	4f17      	ldr	r7, [pc, #92]	; (8002900 <chEvtBroadcastFlagsI.constprop.50+0x60>)
 80028a4:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80028a8:	42bc      	cmp	r4, r7
 80028aa:	d020      	beq.n	80028ee <chEvtBroadcastFlagsI.constprop.50+0x4e>
 80028ac:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 80028ae:	2600      	movs	r6, #0
 80028b0:	e002      	b.n	80028b8 <chEvtBroadcastFlagsI.constprop.50+0x18>
    elp = elp->el_next;
 80028b2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80028b4:	42bc      	cmp	r4, r7
 80028b6:	d01a      	beq.n	80028ee <chEvtBroadcastFlagsI.constprop.50+0x4e>
    elp->el_flags |= flags;
 80028b8:	68e3      	ldr	r3, [r4, #12]
 80028ba:	432b      	orrs	r3, r5
 80028bc:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 80028be:	b115      	cbz	r5, 80028c6 <chEvtBroadcastFlagsI.constprop.50+0x26>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 80028c0:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 80028c2:	4213      	tst	r3, r2
 80028c4:	d0f5      	beq.n	80028b2 <chEvtBroadcastFlagsI.constprop.50+0x12>
      chEvtSignalI(elp->el_listener, elp->el_events);
 80028c6:	6860      	ldr	r0, [r4, #4]
  tp->p_epending |= events;
 80028c8:	68a3      	ldr	r3, [r4, #8]
 80028ca:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80028cc:	7f02      	ldrb	r2, [r0, #28]
  tp->p_epending |= events;
 80028ce:	430b      	orrs	r3, r1
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80028d0:	2a0a      	cmp	r2, #10
  tp->p_epending |= events;
 80028d2:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80028d4:	d00c      	beq.n	80028f0 <chEvtBroadcastFlagsI.constprop.50+0x50>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 80028d6:	2a0b      	cmp	r2, #11
 80028d8:	d1eb      	bne.n	80028b2 <chEvtBroadcastFlagsI.constprop.50+0x12>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 80028da:	6a02      	ldr	r2, [r0, #32]
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 80028dc:	ea32 0303 	bics.w	r3, r2, r3
 80028e0:	d1e7      	bne.n	80028b2 <chEvtBroadcastFlagsI.constprop.50+0x12>
    tp->p_u.rdymsg = MSG_OK;
 80028e2:	6206      	str	r6, [r0, #32]
    (void) chSchReadyI(tp);
 80028e4:	f7fe fcfc 	bl	80012e0 <chSchReadyI>
    elp = elp->el_next;
 80028e8:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80028ea:	42bc      	cmp	r4, r7
 80028ec:	d1e4      	bne.n	80028b8 <chEvtBroadcastFlagsI.constprop.50+0x18>
 80028ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 80028f0:	6a02      	ldr	r2, [r0, #32]
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80028f2:	4213      	tst	r3, r2
 80028f4:	d0dd      	beq.n	80028b2 <chEvtBroadcastFlagsI.constprop.50+0x12>
    tp->p_u.rdymsg = MSG_OK;
 80028f6:	6206      	str	r6, [r0, #32]
    (void) chSchReadyI(tp);
 80028f8:	f7fe fcf2 	bl	80012e0 <chSchReadyI>
 80028fc:	e7f4      	b.n	80028e8 <chEvtBroadcastFlagsI.constprop.50+0x48>
 80028fe:	bf00      	nop
 8002900:	200008a8 	.word	0x200008a8
	...

08002910 <i2c_lld_start.constprop.41>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 8002912:	4c53      	ldr	r4, [pc, #332]	; (8002a60 <i2c_lld_start.constprop.41+0x150>)
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 8002914:	7826      	ldrb	r6, [r4, #0]
  I2C_TypeDef *dp = i2cp->i2c;
 8002916:	6b65      	ldr	r5, [r4, #52]	; 0x34
  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8002918:	f240 4256 	movw	r2, #1110	; 0x456
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 800291c:	f240 4316 	movw	r3, #1046	; 0x416
  if (i2cp->state == I2C_STOP) {
 8002920:	2e01      	cmp	r6, #1
  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8002922:	62a2      	str	r2, [r4, #40]	; 0x28
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8002924:	6263      	str	r3, [r4, #36]	; 0x24
  if (i2cp->state == I2C_STOP) {
 8002926:	d049      	beq.n	80029bc <i2c_lld_start.constprop.41+0xac>
  I2C_TypeDef *dp = i2cp->i2c;
 8002928:	462b      	mov	r3, r5
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 800292a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 800292c:	6b22      	ldr	r2, [r4, #48]	; 0x30
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 800292e:	680f      	ldr	r7, [r1, #0]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8002930:	f8d2 e000 	ldr.w	lr, [r2]
 8002934:	6860      	ldr	r0, [r4, #4]
  if (clock_speed <= 100000) {
 8002936:	4e4b      	ldr	r6, [pc, #300]	; (8002a64 <i2c_lld_start.constprop.41+0x154>)
  int32_t clock_speed = i2cp->config->clock_speed;
 8002938:	6841      	ldr	r1, [r0, #4]
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 800293a:	f105 0210 	add.w	r2, r5, #16
 800293e:	60ba      	str	r2, [r7, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
  dp->CR1 = 0;
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8002940:	f44f 6410 	mov.w	r4, #2304	; 0x900
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8002944:	f8ce 2008 	str.w	r2, [lr, #8]
  dp->CR1 = I2C_CR1_SWRST;
 8002948:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  dp->CR1 = 0;
 800294c:	2200      	movs	r2, #0
  dp->CR1 = I2C_CR1_SWRST;
 800294e:	602f      	str	r7, [r5, #0]
  dp->CR1 = 0;
 8002950:	602a      	str	r2, [r5, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8002952:	606c      	str	r4, [r5, #4]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8002954:	685c      	ldr	r4, [r3, #4]
 8002956:	f64f 77c0 	movw	r7, #65472	; 0xffc0
 800295a:	403c      	ands	r4, r7
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 800295c:	7a07      	ldrb	r7, [r0, #8]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 800295e:	605c      	str	r4, [r3, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8002960:	685c      	ldr	r4, [r3, #4]
  if (clock_speed <= 100000) {
 8002962:	42b1      	cmp	r1, r6
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8002964:	f044 042a 	orr.w	r4, r4, #42	; 0x2a
 8002968:	605c      	str	r4, [r3, #4]
  if (clock_speed <= 100000) {
 800296a:	dd1e      	ble.n	80029aa <i2c_lld_start.constprop.41+0x9a>
  else if (clock_speed <= 400000) {
 800296c:	4c3e      	ldr	r4, [pc, #248]	; (8002a68 <i2c_lld_start.constprop.41+0x158>)
 800296e:	42a1      	cmp	r1, r4
 8002970:	dc07      	bgt.n	8002982 <i2c_lld_start.constprop.41+0x72>
    if (duty == FAST_DUTY_CYCLE_2) {
 8002972:	2f02      	cmp	r7, #2
 8002974:	d069      	beq.n	8002a4a <i2c_lld_start.constprop.41+0x13a>
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 8002976:	2f03      	cmp	r7, #3
 8002978:	d05a      	beq.n	8002a30 <i2c_lld_start.constprop.41+0x120>
 800297a:	f648 72ff 	movw	r2, #36863	; 0x8fff
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 800297e:	210d      	movs	r1, #13
 8002980:	6219      	str	r1, [r3, #32]
  dp->CCR = regCCR;
 8002982:	61da      	str	r2, [r3, #28]
  switch (opmode) {
 8002984:	7801      	ldrb	r1, [r0, #0]
  regCR1 = dp->CR1;
 8002986:	681a      	ldr	r2, [r3, #0]
  switch (opmode) {
 8002988:	2902      	cmp	r1, #2
  regCR1 = dp->CR1;
 800298a:	b292      	uxth	r2, r2
  switch (opmode) {
 800298c:	d04a      	beq.n	8002a24 <i2c_lld_start.constprop.41+0x114>
 800298e:	2903      	cmp	r1, #3
 8002990:	d045      	beq.n	8002a1e <i2c_lld_start.constprop.41+0x10e>
 8002992:	2901      	cmp	r1, #1
 8002994:	d005      	beq.n	80029a2 <i2c_lld_start.constprop.41+0x92>
  dp->CR1 = regCR1;
 8002996:	601a      	str	r2, [r3, #0]
  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
  i2c_lld_set_opmode(i2cp);

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 8002998:	682b      	ldr	r3, [r5, #0]
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	602b      	str	r3, [r5, #0]
 80029a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 80029a2:	f022 020a 	bic.w	r2, r2, #10
 80029a6:	b292      	uxth	r2, r2
 80029a8:	e7f5      	b.n	8002996 <i2c_lld_start.constprop.41+0x86>
    dp->TRISE = I2C_CLK_FREQ + 1;
 80029aa:	242b      	movs	r4, #43	; 0x2b
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 80029ac:	0049      	lsls	r1, r1, #1
 80029ae:	4a2f      	ldr	r2, [pc, #188]	; (8002a6c <i2c_lld_start.constprop.41+0x15c>)
    dp->TRISE = I2C_CLK_FREQ + 1;
 80029b0:	621c      	str	r4, [r3, #32]
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 80029b2:	fbb2 f2f1 	udiv	r2, r2, r1
 80029b6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80029ba:	e7e2      	b.n	8002982 <i2c_lld_start.constprop.41+0x72>
      rccResetI2C1();
 80029bc:	4f2c      	ldr	r7, [pc, #176]	; (8002a70 <i2c_lld_start.constprop.41+0x160>)
      b = dmaStreamAllocate(i2cp->dmarx,
 80029be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      rccResetI2C1();
 80029c0:	6a3b      	ldr	r3, [r7, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 80029c2:	4a2c      	ldr	r2, [pc, #176]	; (8002a74 <i2c_lld_start.constprop.41+0x164>)
      rccResetI2C1();
 80029c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029c8:	2100      	movs	r1, #0
 80029ca:	623b      	str	r3, [r7, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 80029cc:	4623      	mov	r3, r4
      rccResetI2C1();
 80029ce:	6239      	str	r1, [r7, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 80029d0:	2105      	movs	r1, #5
 80029d2:	f7fd ffe5 	bl	80009a0 <dmaStreamAllocate>
      b = dmaStreamAllocate(i2cp->dmatx,
 80029d6:	4623      	mov	r3, r4
 80029d8:	4a27      	ldr	r2, [pc, #156]	; (8002a78 <i2c_lld_start.constprop.41+0x168>)
 80029da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80029dc:	2105      	movs	r1, #5
 80029de:	f7fd ffdf 	bl	80009a0 <dmaStreamAllocate>
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 80029e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80029e4:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <i2c_lld_start.constprop.41+0x16c>)
      rccEnableI2C1(FALSE);
 80029e6:	6c38      	ldr	r0, [r7, #64]	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80029e8:	4a25      	ldr	r2, [pc, #148]	; (8002a80 <i2c_lld_start.constprop.41+0x170>)
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 80029ea:	ea41 0c03 	orr.w	ip, r1, r3
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 80029ee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      rccEnableI2C1(FALSE);
 80029f0:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 80029f4:	f04f 0e50 	mov.w	lr, #80	; 0x50
 80029f8:	6438      	str	r0, [r7, #64]	; 0x40
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 80029fa:	430b      	orrs	r3, r1
 80029fc:	f882 e31f 	strb.w	lr, [r2, #799]	; 0x31f
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002a00:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8002a04:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
 8002a08:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8002a0c:	62a3      	str	r3, [r4, #40]	; 0x28
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002a0e:	6010      	str	r0, [r2, #0]
 8002a10:	6b63      	ldr	r3, [r4, #52]	; 0x34
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002a12:	f882 e320 	strb.w	lr, [r2, #800]	; 0x320
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002a16:	f8c2 6184 	str.w	r6, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002a1a:	6056      	str	r6, [r2, #4]
 8002a1c:	e785      	b.n	800292a <i2c_lld_start.constprop.41+0x1a>
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8002a1e:	f042 020a 	orr.w	r2, r2, #10
 8002a22:	e7b8      	b.n	8002996 <i2c_lld_start.constprop.41+0x86>
 8002a24:	f022 0208 	bic.w	r2, r2, #8
 8002a28:	b292      	uxth	r2, r2
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 8002a2a:	f042 0202 	orr.w	r2, r2, #2
 8002a2e:	e7b2      	b.n	8002996 <i2c_lld_start.constprop.41+0x86>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8002a30:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8002a34:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002a38:	4a0c      	ldr	r2, [pc, #48]	; (8002a6c <i2c_lld_start.constprop.41+0x15c>)
 8002a3a:	fbb2 f2f1 	udiv	r2, r2, r1
 8002a3e:	ea6f 4282 	mvn.w	r2, r2, lsl #18
 8002a42:	ea6f 4292 	mvn.w	r2, r2, lsr #18
 8002a46:	b292      	uxth	r2, r2
 8002a48:	e799      	b.n	800297e <i2c_lld_start.constprop.41+0x6e>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 8002a4a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002a4e:	4a07      	ldr	r2, [pc, #28]	; (8002a6c <i2c_lld_start.constprop.41+0x15c>)
 8002a50:	fbb2 f2f1 	udiv	r2, r2, r1
 8002a54:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002a58:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002a5c:	b292      	uxth	r2, r2
 8002a5e:	e78e      	b.n	800297e <i2c_lld_start.constprop.41+0x6e>
 8002a60:	20000870 	.word	0x20000870
 8002a64:	000186a0 	.word	0x000186a0
 8002a68:	00061a80 	.word	0x00061a80
 8002a6c:	0280de80 	.word	0x0280de80
 8002a70:	40023800 	.word	0x40023800
 8002a74:	080018c1 	.word	0x080018c1
 8002a78:	08001461 	.word	0x08001461
 8002a7c:	02030000 	.word	0x02030000
 8002a80:	e000e100 	.word	0xe000e100
	...

08002a90 <i2c_lld_stop.constprop.38>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_stop(I2CDriver *i2cp) {
 8002a90:	b570      	push	{r4, r5, r6, lr}

  /* If not in stopped state then disables the I2C clock.*/
  if (i2cp->state != I2C_STOP) {
 8002a92:	4d20      	ldr	r5, [pc, #128]	; (8002b14 <i2c_lld_stop.constprop.38+0x84>)
 8002a94:	782b      	ldrb	r3, [r5, #0]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d03a      	beq.n	8002b10 <i2c_lld_stop.constprop.38+0x80>
  dmaStreamDisable(i2cp->dmatx);
 8002a9a:	6b28      	ldr	r0, [r5, #48]	; 0x30
  I2C_TypeDef *dp = i2cp->i2c;
 8002a9c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  dmaStreamDisable(i2cp->dmatx);
 8002a9e:	6802      	ldr	r2, [r0, #0]
  dp->CR1 = 0;
 8002aa0:	2100      	movs	r1, #0
  dp->CR1 = I2C_CR1_SWRST;
 8002aa2:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8002aa6:	601c      	str	r4, [r3, #0]
  dp->CR1 = 0;
 8002aa8:	6019      	str	r1, [r3, #0]
  dp->CR2 = 0;
 8002aaa:	6059      	str	r1, [r3, #4]
  dp->SR1 = 0;
 8002aac:	6159      	str	r1, [r3, #20]
  dmaStreamDisable(i2cp->dmatx);
 8002aae:	6813      	ldr	r3, [r2, #0]
 8002ab0:	f023 031f 	bic.w	r3, r3, #31
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	6813      	ldr	r3, [r2, #0]
 8002ab8:	07db      	lsls	r3, r3, #31
 8002aba:	d4fc      	bmi.n	8002ab6 <i2c_lld_stop.constprop.38+0x26>
 8002abc:	7a06      	ldrb	r6, [r0, #8]
  dmaStreamDisable(i2cp->dmarx);
 8002abe:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8002ac0:	6844      	ldr	r4, [r0, #4]
  dmaStreamDisable(i2cp->dmarx);
 8002ac2:	680a      	ldr	r2, [r1, #0]
  dmaStreamDisable(i2cp->dmatx);
 8002ac4:	233d      	movs	r3, #61	; 0x3d
 8002ac6:	40b3      	lsls	r3, r6
 8002ac8:	6023      	str	r3, [r4, #0]
  dmaStreamDisable(i2cp->dmarx);
 8002aca:	6813      	ldr	r3, [r2, #0]
 8002acc:	f023 031f 	bic.w	r3, r3, #31
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	6814      	ldr	r4, [r2, #0]
 8002ad4:	f014 0401 	ands.w	r4, r4, #1
 8002ad8:	d1fb      	bne.n	8002ad2 <i2c_lld_stop.constprop.38+0x42>
 8002ada:	7a0e      	ldrb	r6, [r1, #8]
 8002adc:	684a      	ldr	r2, [r1, #4]
 8002ade:	233d      	movs	r3, #61	; 0x3d
 8002ae0:	40b3      	lsls	r3, r6
 8002ae2:	6013      	str	r3, [r2, #0]

    /* I2C disable.*/
    i2c_lld_abort_operation(i2cp);
    dmaStreamRelease(i2cp->dmatx);
 8002ae4:	f7fd ff2c 	bl	8000940 <dmaStreamRelease>
    dmaStreamRelease(i2cp->dmarx);
 8002ae8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002aea:	f7fd ff29 	bl	8000940 <dmaStreamRelease>
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8002aee:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <i2c_lld_stop.constprop.38+0x88>)

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      nvicDisableVector(I2C1_EV_IRQn);
      nvicDisableVector(I2C1_ER_IRQn);
      rccDisableI2C1(FALSE);
 8002af0:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <i2c_lld_stop.constprop.38+0x8c>)
 8002af2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002af6:	2101      	movs	r1, #1
 8002af8:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  NVIC->IP[n] = 0U;
 8002afc:	f883 431f 	strb.w	r4, [r3, #799]	; 0x31f
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8002b00:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  NVIC->IP[n] = 0U;
 8002b04:	f883 4320 	strb.w	r4, [r3, #800]	; 0x320
 8002b08:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002b0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b10:	bd70      	pop	{r4, r5, r6, pc}
 8002b12:	bf00      	nop
 8002b14:	20000870 	.word	0x20000870
 8002b18:	e000e100 	.word	0xe000e100
 8002b1c:	40023800 	.word	0x40023800

08002b20 <i2cMasterTransmitTimeout.constprop.35>:
 *                      be retrieved using @p i2cGetErrors().
 * @retval MSG_TIMEOUT  if a timeout occurred before operation end.
 *
 * @api
 */
msg_t i2cMasterTransmitTimeout(I2CDriver *i2cp,
 8002b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b24:	2420      	movs	r4, #32
 8002b26:	b082      	sub	sp, #8
 8002b28:	f384 8811 	msr	BASEPRI, r4
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 8002b2c:	4f2f      	ldr	r7, [pc, #188]	; (8002bec <i2cMasterTransmitTimeout.constprop.35+0xcc>)

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8002b2e:	0040      	lsls	r0, r0, #1
  i2cp->state = I2C_ACTIVE_TX;
 8002b30:	2603      	movs	r6, #3
  i2cp->errors = I2C_NO_ERROR;
 8002b32:	2500      	movs	r5, #0
 8002b34:	8438      	strh	r0, [r7, #32]
  i2cp->state = I2C_ACTIVE_TX;
 8002b36:	703e      	strb	r6, [r7, #0]
  i2cp->errors = I2C_NO_ERROR;
 8002b38:	60bd      	str	r5, [r7, #8]
  I2C_TypeDef *dp = i2cp->i2c;
 8002b3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002b3c:	f385 8811 	msr	BASEPRI, r5
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8002b40:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8002b42:	9601      	str	r6, [sp, #4]
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8002b44:	6b3e      	ldr	r6, [r7, #48]	; 0x30
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8002b46:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8002b4a:	f8d6 c000 	ldr.w	ip, [r6]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8002b4e:	9e01      	ldr	r6, [sp, #4]
 8002b50:	f8d6 e000 	ldr.w	lr, [r6]
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8002b54:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8002b56:	f8cc 6000 	str.w	r6, [ip]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8002b5a:	f8cc 100c 	str.w	r1, [ip, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 8002b5e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8002b62:	f8cc 2004 	str.w	r2, [ip, #4]
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8002b66:	f8ce 8000 	str.w	r8, [lr]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 8002b6a:	f8ce 300c 	str.w	r3, [lr, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 8002b6e:	9b08      	ldr	r3, [sp, #32]
 8002b70:	f8ce 3004 	str.w	r3, [lr, #4]
 8002b74:	4622      	mov	r2, r4
 8002b76:	f8d6 e024 	ldr.w	lr, [r6, #36]	; 0x24
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	4634      	mov	r4, r6
 8002b7e:	e001      	b.n	8002b84 <i2cMasterTransmitTimeout.constprop.35+0x64>
 8002b80:	f381 8811 	msr	BASEPRI, r1
 8002b84:	f382 8811 	msr	BASEPRI, r2
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 8002b88:	6983      	ldr	r3, [r0, #24]
 8002b8a:	079e      	lsls	r6, r3, #30
 8002b8c:	d402      	bmi.n	8002b94 <i2cMasterTransmitTimeout.constprop.35+0x74>
 8002b8e:	6803      	ldr	r3, [r0, #0]
 8002b90:	059d      	lsls	r5, r3, #22
 8002b92:	d50f      	bpl.n	8002bb4 <i2cMasterTransmitTimeout.constprop.35+0x94>
 8002b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 8002b96:	eba3 030e 	sub.w	r3, r3, lr
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end))
 8002b9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b9e:	d3ef      	bcc.n	8002b80 <i2cMasterTransmitTimeout.constprop.35+0x60>
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
    i2cp->state = I2C_LOCKED;
 8002ba0:	2305      	movs	r3, #5
 8002ba2:	703b      	strb	r3, [r7, #0]
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f383 8811 	msr	BASEPRI, r3
  else {
    i2cp->state = I2C_READY;
  }
  osalSysUnlock();
  return rdymsg;
}
 8002bae:	b002      	add	sp, #8
 8002bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    osalSysUnlock();
  }

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8002bb4:	6843      	ldr	r3, [r0, #4]
  return ch.rlist.r_current;
 8002bb6:	4c0e      	ldr	r4, [pc, #56]	; (8002bf0 <i2cMasterTransmitTimeout.constprop.35+0xd0>)
  tp->p_u.wttrp = trp;
 8002bb8:	490e      	ldr	r1, [pc, #56]	; (8002bf4 <i2cMasterTransmitTimeout.constprop.35+0xd4>)
 8002bba:	69a2      	ldr	r2, [r4, #24]
 8002bbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bc0:	6043      	str	r3, [r0, #4]
  dp->CR1 |= I2C_CR1_START;
 8002bc2:	6803      	ldr	r3, [r0, #0]
 8002bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc8:	6003      	str	r3, [r0, #0]
    chSchGoSleepS(newstate);
 8002bca:	2003      	movs	r0, #3
 8002bcc:	6211      	str	r1, [r2, #32]
  *trp = tp;
 8002bce:	61fa      	str	r2, [r7, #28]
 8002bd0:	f7fe f996 	bl	8000f00 <chSchGoSleepS>
  return currp->p_u.rdymsg;
 8002bd4:	69a3      	ldr	r3, [r4, #24]
 8002bd6:	6a18      	ldr	r0, [r3, #32]
  if (rdymsg == MSG_TIMEOUT) {
 8002bd8:	1c43      	adds	r3, r0, #1
 8002bda:	d0e1      	beq.n	8002ba0 <i2cMasterTransmitTimeout.constprop.35+0x80>
    i2cp->state = I2C_READY;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	703b      	strb	r3, [r7, #0]
 8002be0:	2300      	movs	r3, #0
 8002be2:	f383 8811 	msr	BASEPRI, r3
}
 8002be6:	b002      	add	sp, #8
 8002be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bec:	20000870 	.word	0x20000870
 8002bf0:	20000b98 	.word	0x20000b98
 8002bf4:	2000088c 	.word	0x2000088c
	...

08002c00 <_pal_lld_setgroupmode.constprop.14>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8002c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8002c04:	2100      	movs	r1, #0

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8002c06:	4c20      	ldr	r4, [pc, #128]	; (8002c88 <_pal_lld_setgroupmode.constprop.14+0x88>)
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8002c08:	2502      	movs	r5, #2
      altrmask = altr << ((bit & 7) * 4);
 8002c0a:	f04f 0807 	mov.w	r8, #7
      m4 = 15 << ((bit & 7) * 4);
 8002c0e:	f04f 0c0f 	mov.w	ip, #15
      m1 = 1 << bit;
 8002c12:	f04f 0e01 	mov.w	lr, #1
      m2 = 3 << (bit * 2);
 8002c16:	2703      	movs	r7, #3
 8002c18:	e00d      	b.n	8002c36 <_pal_lld_setgroupmode.constprop.14+0x36>
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8002c1a:	6a26      	ldr	r6, [r4, #32]
 8002c1c:	ea26 0202 	bic.w	r2, r6, r2
 8002c20:	ea42 0209 	orr.w	r2, r2, r9
 8002c24:	6222      	str	r2, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 8002c26:	6822      	ldr	r2, [r4, #0]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	432b      	orrs	r3, r5
 8002c2c:	6023      	str	r3, [r4, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8002c2e:	0840      	lsrs	r0, r0, #1
 8002c30:	d027      	beq.n	8002c82 <_pal_lld_setgroupmode.constprop.14+0x82>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 8002c32:	00ad      	lsls	r5, r5, #2
    bit++;
 8002c34:	3101      	adds	r1, #1
      m2 = 3 << (bit * 2);
 8002c36:	004b      	lsls	r3, r1, #1
      altrmask = altr << ((bit & 7) * 4);
 8002c38:	f001 0207 	and.w	r2, r1, #7
 8002c3c:	0092      	lsls	r2, r2, #2
      m2 = 3 << (bit * 2);
 8002c3e:	fa07 f303 	lsl.w	r3, r7, r3
    if ((mask & 1) != 0) {
 8002c42:	f010 0f01 	tst.w	r0, #1
      altrmask = altr << ((bit & 7) * 4);
 8002c46:	fa08 f902 	lsl.w	r9, r8, r2
      m1 = 1 << bit;
 8002c4a:	fa0e f601 	lsl.w	r6, lr, r1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8002c4e:	ea6f 0303 	mvn.w	r3, r3
      m4 = 15 << ((bit & 7) * 4);
 8002c52:	fa0c f202 	lsl.w	r2, ip, r2
    if ((mask & 1) != 0) {
 8002c56:	d0ea      	beq.n	8002c2e <_pal_lld_setgroupmode.constprop.14+0x2e>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8002c58:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8002c5c:	ea2a 0606 	bic.w	r6, sl, r6
 8002c60:	6066      	str	r6, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8002c62:	68a6      	ldr	r6, [r4, #8]
 8002c64:	401e      	ands	r6, r3
 8002c66:	60a6      	str	r6, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8002c68:	68e6      	ldr	r6, [r4, #12]
        if (bit < 8)
 8002c6a:	2907      	cmp	r1, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8002c6c:	ea06 0603 	and.w	r6, r6, r3
 8002c70:	60e6      	str	r6, [r4, #12]
        if (bit < 8)
 8002c72:	d9d2      	bls.n	8002c1a <_pal_lld_setgroupmode.constprop.14+0x1a>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8002c74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002c76:	ea26 0202 	bic.w	r2, r6, r2
 8002c7a:	ea42 0209 	orr.w	r2, r2, r9
 8002c7e:	6262      	str	r2, [r4, #36]	; 0x24
 8002c80:	e7d1      	b.n	8002c26 <_pal_lld_setgroupmode.constprop.14+0x26>
 8002c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c86:	bf00      	nop
 8002c88:	40020000 	.word	0x40020000
 8002c8c:	00000000 	.word	0x00000000

08002c90 <otg_epout_handler.constprop.9>:
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8002c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8002c94:	4e29      	ldr	r6, [pc, #164]	; (8002d3c <otg_epout_handler.constprop.9+0xac>)
 8002c96:	6e37      	ldr	r7, [r6, #96]	; 0x60
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8002c98:	eb07 1340 	add.w	r3, r7, r0, lsl #5
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8002c9c:	4605      	mov	r5, r0
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8002c9e:	f8d3 4b08 	ldr.w	r4, [r3, #2824]	; 0xb08
  otgp->oe[ep].DOEPINT = epint;
 8002ca2:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8002ca6:	0720      	lsls	r0, r4, #28
 8002ca8:	d503      	bpl.n	8002cb2 <otg_epout_handler.constprop.9+0x22>
 8002caa:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8002cae:	0719      	lsls	r1, r3, #28
 8002cb0:	d439      	bmi.n	8002d26 <otg_epout_handler.constprop.9+0x96>
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8002cb2:	07e2      	lsls	r2, r4, #31
 8002cb4:	d523      	bpl.n	8002cfe <otg_epout_handler.constprop.9+0x6e>
 8002cb6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8002cba:	07db      	lsls	r3, r3, #31
 8002cbc:	d51f      	bpl.n	8002cfe <otg_epout_handler.constprop.9+0x6e>
    if ((ep == 0) && (usbp->ep0state == USB_EP0_WAITING_SETUP))
 8002cbe:	bb05      	cbnz	r5, 8002d02 <otg_epout_handler.constprop.9+0x72>
 8002cc0:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d036      	beq.n	8002d36 <otg_epout_handler.constprop.9+0xa6>
    osp = usbp->epc[ep]->out_state;
 8002cc8:	68f1      	ldr	r1, [r6, #12]
 8002cca:	698a      	ldr	r2, [r1, #24]
        ((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8002ccc:	8a48      	ldrh	r0, [r1, #18]
 8002cce:	6854      	ldr	r4, [r2, #4]
 8002cd0:	fbb4 f3f0 	udiv	r3, r4, r0
 8002cd4:	fb00 4313 	mls	r3, r0, r3, r4
    if ((ep == 0) &&
 8002cd8:	b9b3      	cbnz	r3, 8002d08 <otg_epout_handler.constprop.9+0x78>
        (osp->rxsize < osp->totsize)) {
 8002cda:	6810      	ldr	r0, [r2, #0]
 8002cdc:	68d3      	ldr	r3, [r2, #12]
        ((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8002cde:	4298      	cmp	r0, r3
 8002ce0:	d212      	bcs.n	8002d08 <otg_epout_handler.constprop.9+0x78>
      osp->rxsize = osp->totsize - osp->rxsize;
 8002ce2:	1a1b      	subs	r3, r3, r0
      osp->rxcnt  = 0;
 8002ce4:	e882 0028 	stmia.w	r2, {r3, r5}
 8002ce8:	2320      	movs	r3, #32
 8002cea:	f383 8811 	msr	BASEPRI, r3
      usb_lld_start_out(usbp, ep);
 8002cee:	4813      	ldr	r0, [pc, #76]	; (8002d3c <otg_epout_handler.constprop.9+0xac>)
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	f7ff fa85 	bl	8002200 <usb_lld_start_out>
 8002cf6:	f385 8811 	msr	BASEPRI, r5
 8002cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    osp = usbp->epc[ep]->out_state;
 8002d02:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8002d06:	68d9      	ldr	r1, [r3, #12]
      _usb_isr_invoke_out_cb(usbp, ep);
 8002d08:	8973      	ldrh	r3, [r6, #10]
 8002d0a:	68cc      	ldr	r4, [r1, #12]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	40aa      	lsls	r2, r5
 8002d10:	ea23 0302 	bic.w	r3, r3, r2
 8002d14:	8173      	strh	r3, [r6, #10]
 8002d16:	2c00      	cmp	r4, #0
 8002d18:	d0f1      	beq.n	8002cfe <otg_epout_handler.constprop.9+0x6e>
 8002d1a:	4629      	mov	r1, r5
 8002d1c:	4623      	mov	r3, r4
 8002d1e:	4807      	ldr	r0, [pc, #28]	; (8002d3c <otg_epout_handler.constprop.9+0xac>)
}
 8002d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _usb_isr_invoke_out_cb(usbp, ep);
 8002d24:	4718      	bx	r3
    _usb_isr_invoke_setup_cb(usbp, ep);
 8002d26:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	4630      	mov	r0, r6
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4798      	blx	r3
 8002d34:	e7bd      	b.n	8002cb2 <otg_epout_handler.constprop.9+0x22>
 8002d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000950 	.word	0x20000950

08002d40 <otg_epin_handler.constprop.8>:
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8002d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8002d44:	4e2a      	ldr	r6, [pc, #168]	; (8002df0 <otg_epin_handler.constprop.8+0xb0>)
 8002d46:	6e35      	ldr	r5, [r6, #96]	; 0x60
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8002d48:	eb05 1340 	add.w	r3, r5, r0, lsl #5
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8002d4c:	4607      	mov	r7, r0
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8002d4e:	f8d3 4908 	ldr.w	r4, [r3, #2312]	; 0x908
  otgp->ie[ep].DIEPINT = epint;
 8002d52:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8002d56:	07e1      	lsls	r1, r4, #31
 8002d58:	d503      	bpl.n	8002d62 <otg_epin_handler.constprop.8+0x22>
 8002d5a:	f8d5 3810 	ldr.w	r3, [r5, #2064]	; 0x810
 8002d5e:	07da      	lsls	r2, r3, #31
 8002d60:	d40a      	bmi.n	8002d78 <otg_epin_handler.constprop.8+0x38>
  if ((epint & DIEPINT_TXFE) &&
 8002d62:	0623      	lsls	r3, r4, #24
 8002d64:	d506      	bpl.n	8002d74 <otg_epin_handler.constprop.8+0x34>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8002d66:	2301      	movs	r3, #1
 8002d68:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
 8002d6c:	fa03 f707 	lsl.w	r7, r3, r7
  if ((epint & DIEPINT_TXFE) &&
 8002d70:	4217      	tst	r7, r2
 8002d72:	d118      	bne.n	8002da6 <otg_epin_handler.constprop.8+0x66>
 8002d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8002d78:	eb06 0380 	add.w	r3, r6, r0, lsl #2
 8002d7c:	68d9      	ldr	r1, [r3, #12]
 8002d7e:	694b      	ldr	r3, [r1, #20]
    if (isp->txsize < isp->totsize) {
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	4290      	cmp	r0, r2
 8002d86:	d323      	bcc.n	8002dd0 <otg_epin_handler.constprop.8+0x90>
      _usb_isr_invoke_in_cb(usbp, ep);
 8002d88:	8933      	ldrh	r3, [r6, #8]
 8002d8a:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	40ba      	lsls	r2, r7
 8002d92:	ea23 0302 	bic.w	r3, r3, r2
 8002d96:	8133      	strh	r3, [r6, #8]
 8002d98:	f1b8 0f00 	cmp.w	r8, #0
 8002d9c:	d0e1      	beq.n	8002d62 <otg_epin_handler.constprop.8+0x22>
 8002d9e:	4639      	mov	r1, r7
 8002da0:	4630      	mov	r0, r6
 8002da2:	47c0      	blx	r8
 8002da4:	e7dd      	b.n	8002d62 <otg_epin_handler.constprop.8+0x22>
 8002da6:	2320      	movs	r3, #32
 8002da8:	f383 8811 	msr	BASEPRI, r3
    otgp->DIEPEMPMSK &= ~(1 << ep);
 8002dac:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
    usbp->txpending |= (1 << ep);
 8002db0:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
  chThdResumeI(trp, msg);
 8002db2:	4810      	ldr	r0, [pc, #64]	; (8002df4 <otg_epin_handler.constprop.8+0xb4>)
    otgp->DIEPEMPMSK &= ~(1 << ep);
 8002db4:	ea22 0207 	bic.w	r2, r2, r7
 8002db8:	f8c5 2834 	str.w	r2, [r5, #2100]	; 0x834
    usbp->txpending |= (1 << ep);
 8002dbc:	431f      	orrs	r7, r3
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	66f7      	str	r7, [r6, #108]	; 0x6c
 8002dc2:	f7fe faa5 	bl	8001310 <chThdResumeI>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      isp->txsize = isp->totsize - isp->txsize;
 8002dd0:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 8002dd2:	f04f 0800 	mov.w	r8, #0
 8002dd6:	e883 0104 	stmia.w	r3, {r2, r8}
 8002dda:	2320      	movs	r3, #32
 8002ddc:	f383 8811 	msr	BASEPRI, r3
      usb_lld_start_in(usbp, ep);
 8002de0:	4639      	mov	r1, r7
 8002de2:	4630      	mov	r0, r6
 8002de4:	f7ff f9b4 	bl	8002150 <usb_lld_start_in>
 8002de8:	f388 8811 	msr	BASEPRI, r8
 8002dec:	e7b9      	b.n	8002d62 <otg_epin_handler.constprop.8+0x22>
 8002dee:	bf00      	nop
 8002df0:	20000950 	.word	0x20000950
 8002df4:	200009c0 	.word	0x200009c0
	...

08002e00 <lsm303dlhcReadRegister.constprop.4>:
uint8_t lsm303dlhcReadRegister(I2CDriver *i2cp, uint8_t sad, uint8_t sub,
 8002e00:	b500      	push	{lr}
 8002e02:	b085      	sub	sp, #20
    i2cMasterTransmitTimeout(i2cp, sad, &txbuf, 1, rxbuf, 1, TIME_INFINITE);
 8002e04:	2201      	movs	r2, #1
  txbuf = sub;
 8002e06:	f88d 100b 	strb.w	r1, [sp, #11]
    i2cMasterTransmitTimeout(i2cp, sad, &txbuf, 1, rxbuf, 1, TIME_INFINITE);
 8002e0a:	9200      	str	r2, [sp, #0]
 8002e0c:	ab03      	add	r3, sp, #12
 8002e0e:	f10d 010b 	add.w	r1, sp, #11
 8002e12:	f7ff fe85 	bl	8002b20 <i2cMasterTransmitTimeout.constprop.35>
}
 8002e16:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002e1a:	b005      	add	sp, #20
 8002e1c:	f85d fb04 	ldr.w	pc, [sp], #4

08002e20 <l3gd20WriteRegister.part.0.constprop.2>:
  spiUnselect(spip);
  return rxbuf[1];
}


void l3gd20WriteRegister(SPIDriver *spip, uint8_t reg, uint8_t value) {
 8002e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e22:	2720      	movs	r7, #32
 8002e24:	b083      	sub	sp, #12
 8002e26:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 8002e2a:	4c26      	ldr	r4, [pc, #152]	; (8002ec4 <l3gd20WriteRegister.part.0.constprop.2+0xa4>)
 8002e2c:	6862      	ldr	r2, [r4, #4]
 8002e2e:	8913      	ldrh	r3, [r2, #8]
 8002e30:	6852      	ldr	r2, [r2, #4]
 8002e32:	2501      	movs	r5, #1
 8002e34:	fa05 f303 	lsl.w	r3, r5, r3
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	8353      	strh	r3, [r2, #26]
 8002e3c:	2600      	movs	r6, #0
 8002e3e:	f386 8811 	msr	BASEPRI, r6
    case L3GD20_AD_INT1_TSH_YL:
    case L3GD20_AD_INT1_TSH_ZH:
    case L3GD20_AD_INT1_TSH_ZL:
    case L3GD20_AD_INT1_DURATION:
      spiSelect(spip);
      uint8_t txbuf[2] = {reg, value};
 8002e42:	f88d 0004 	strb.w	r0, [sp, #4]
 8002e46:	f88d 1005 	strb.w	r1, [sp, #5]
 8002e4a:	f387 8811 	msr	BASEPRI, r7
  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartSendI(spip, n, txbuf);
 8002e4e:	2003      	movs	r0, #3
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8002e50:	6a22      	ldr	r2, [r4, #32]
 8002e52:	7020      	strb	r0, [r4, #0]
 8002e54:	6812      	ldr	r2, [r2, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002e58:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8002e5a:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8002ec8 <l3gd20WriteRegister.part.0.constprop.2+0xa8>
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002e5e:	681b      	ldr	r3, [r3, #0]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8002e60:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8002e64:	f8c2 e00c 	str.w	lr, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8002e68:	f04f 0e02 	mov.w	lr, #2
 8002e6c:	f8c2 e004 	str.w	lr, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002e70:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8002e74:	f8c2 c000 	str.w	ip, [r2]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002e78:	f10d 0c04 	add.w	ip, sp, #4
 8002e7c:	f8c3 c00c 	str.w	ip, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8002e80:	f8c3 e004 	str.w	lr, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002e84:	6019      	str	r1, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8002e86:	6811      	ldr	r1, [r2, #0]
 8002e88:	f8df e040 	ldr.w	lr, [pc, #64]	; 8002ecc <l3gd20WriteRegister.part.0.constprop.2+0xac>
 8002e8c:	4329      	orrs	r1, r5
 8002e8e:	6011      	str	r1, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 8002e90:	6819      	ldr	r1, [r3, #0]
 8002e92:	f8de e018 	ldr.w	lr, [lr, #24]
  *trp = tp;
 8002e96:	4622      	mov	r2, r4
 8002e98:	4329      	orrs	r1, r5
 8002e9a:	6019      	str	r1, [r3, #0]
 8002e9c:	f842 ef08 	str.w	lr, [r2, #8]!
  tp->p_u.wttrp = trp;
 8002ea0:	f8ce 2020 	str.w	r2, [lr, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8002ea4:	f7fe f82c 	bl	8000f00 <chSchGoSleepS>
 8002ea8:	f386 8811 	msr	BASEPRI, r6
 8002eac:	f387 8811 	msr	BASEPRI, r7
  palSetPad(spip->config->ssport, spip->config->sspad);
 8002eb0:	6863      	ldr	r3, [r4, #4]
 8002eb2:	891a      	ldrh	r2, [r3, #8]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4095      	lsls	r5, r2
 8002eb8:	b2ad      	uxth	r5, r5
 8002eba:	831d      	strh	r5, [r3, #24]
 8002ebc:	f386 8811 	msr	BASEPRI, r6
      spiSend(spip, 2, txbuf);
      spiUnselect(spip);
  }
}
 8002ec0:	b003      	add	sp, #12
 8002ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ec4:	20000920 	.word	0x20000920
 8002ec8:	20000d70 	.word	0x20000d70
 8002ecc:	20000b98 	.word	0x20000b98

08002ed0 <l3gd20ReadRegister.constprop.1>:
uint8_t l3gd20ReadRegister(SPIDriver *spip, uint8_t reg) {
 8002ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ed4:	b084      	sub	sp, #16
  uint8_t rxbuf[2] = {0x00, 0x00};
 8002ed6:	2600      	movs	r6, #0
  uint8_t txbuf[2] = {L3GD20_RW | reg, 0xFF};
 8002ed8:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8002edc:	23ff      	movs	r3, #255	; 0xff
 8002ede:	f88d 0008 	strb.w	r0, [sp, #8]
 8002ee2:	f88d 3009 	strb.w	r3, [sp, #9]
  uint8_t rxbuf[2] = {0x00, 0x00};
 8002ee6:	f88d 600c 	strb.w	r6, [sp, #12]
 8002eea:	f88d 600d 	strb.w	r6, [sp, #13]
 8002eee:	2720      	movs	r7, #32
 8002ef0:	f387 8811 	msr	BASEPRI, r7
  palClearPad(spip->config->ssport, spip->config->sspad);
 8002ef4:	4c26      	ldr	r4, [pc, #152]	; (8002f90 <l3gd20ReadRegister.constprop.1+0xc0>)
 8002ef6:	6862      	ldr	r2, [r4, #4]
 8002ef8:	8913      	ldrh	r3, [r2, #8]
 8002efa:	6852      	ldr	r2, [r2, #4]
 8002efc:	2501      	movs	r5, #1
 8002efe:	fa05 f303 	lsl.w	r3, r5, r3
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	8353      	strh	r3, [r2, #26]
 8002f06:	f386 8811 	msr	BASEPRI, r6
 8002f0a:	f387 8811 	msr	BASEPRI, r7
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002f0e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8002f10:	6a22      	ldr	r2, [r4, #32]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002f12:	9101      	str	r1, [sp, #4]
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 8002f14:	2003      	movs	r0, #3
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8002f16:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f1a:	7020      	strb	r0, [r4, #0]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8002f1c:	6812      	ldr	r2, [r2, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002f1e:	681b      	ldr	r3, [r3, #0]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8002f20:	f441 6e80 	orr.w	lr, r1, #1024	; 0x400
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002f24:	9901      	ldr	r1, [sp, #4]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8002f26:	f10d 0c0c 	add.w	ip, sp, #12
 8002f2a:	f8c2 c00c 	str.w	ip, [r2, #12]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002f2e:	f441 6880 	orr.w	r8, r1, #1024	; 0x400
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8002f32:	f04f 0c02 	mov.w	ip, #2
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002f36:	a902      	add	r1, sp, #8
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8002f38:	f8c2 c004 	str.w	ip, [r2, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8002f3c:	f8c2 e000 	str.w	lr, [r2]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002f40:	60d9      	str	r1, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8002f42:	f8c3 c004 	str.w	ip, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002f46:	f8c3 8000 	str.w	r8, [r3]
  dmaStreamEnable(spip->dmarx);
 8002f4a:	6811      	ldr	r1, [r2, #0]
 8002f4c:	f8df e044 	ldr.w	lr, [pc, #68]	; 8002f94 <l3gd20ReadRegister.constprop.1+0xc4>
 8002f50:	4329      	orrs	r1, r5
 8002f52:	6011      	str	r1, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 8002f54:	6819      	ldr	r1, [r3, #0]
 8002f56:	f8de e018 	ldr.w	lr, [lr, #24]
  *trp = tp;
 8002f5a:	4622      	mov	r2, r4
 8002f5c:	4329      	orrs	r1, r5
 8002f5e:	6019      	str	r1, [r3, #0]
 8002f60:	f842 ef08 	str.w	lr, [r2, #8]!
  tp->p_u.wttrp = trp;
 8002f64:	f8ce 2020 	str.w	r2, [lr, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8002f68:	f7fd ffca 	bl	8000f00 <chSchGoSleepS>
 8002f6c:	f386 8811 	msr	BASEPRI, r6
 8002f70:	f387 8811 	msr	BASEPRI, r7
  palSetPad(spip->config->ssport, spip->config->sspad);
 8002f74:	6863      	ldr	r3, [r4, #4]
 8002f76:	891a      	ldrh	r2, [r3, #8]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4095      	lsls	r5, r2
 8002f7c:	b2ad      	uxth	r5, r5
 8002f7e:	831d      	strh	r5, [r3, #24]
 8002f80:	f386 8811 	msr	BASEPRI, r6
}
 8002f84:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002f88:	b004      	add	sp, #16
 8002f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000920 	.word	0x20000920
 8002f94:	20000b98 	.word	0x20000b98
	...

08002fa0 <main>:
  rccResetAHB1(~0);
 8002fa0:	4b1a      	ldr	r3, [pc, #104]	; (800300c <main+0x6c>)
  PWR->CR |= PWR_CR_DBP;
 8002fa2:	4c1b      	ldr	r4, [pc, #108]	; (8003010 <main+0x70>)
  rccResetAHB1(~0);
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	f04f 31ff 	mov.w	r1, #4294967295
 8002faa:	2200      	movs	r2, #0
}

/*
 * Application entry point.
 */
int main(void) {
 8002fac:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002fb0:	6119      	str	r1, [r3, #16]
 8002fb2:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8002fb4:	6958      	ldr	r0, [r3, #20]
 8002fb6:	6159      	str	r1, [r3, #20]
 8002fb8:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8002fba:	6a18      	ldr	r0, [r3, #32]
 8002fbc:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8002fc0:	6218      	str	r0, [r3, #32]
 8002fc2:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8002fc4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002fc6:	6259      	str	r1, [r3, #36]	; 0x24
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(FALSE);
 8002fca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002fcc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002fd0:	6419      	str	r1, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 8002fd2:	6821      	ldr	r1, [r4, #0]
 8002fd4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002fd8:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8002fda:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002fdc:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8002fe0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002fe4:	b089      	sub	sp, #36	; 0x24
 8002fe6:	d003      	beq.n	8002ff0 <main+0x50>
    RCC->BDCR = RCC_BDCR_BDRST;
 8002fe8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002fec:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8002fee:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8002ff0:	4807      	ldr	r0, [pc, #28]	; (8003010 <main+0x70>)
  dma_streams_mask = 0U;
 8002ff2:	4e08      	ldr	r6, [pc, #32]	; (8003014 <main+0x74>)
 8002ff4:	6843      	ldr	r3, [r0, #4]
 8002ff6:	4a08      	ldr	r2, [pc, #32]	; (8003018 <main+0x78>)
 8002ff8:	4c08      	ldr	r4, [pc, #32]	; (800301c <main+0x7c>)
 8002ffa:	4f09      	ldr	r7, [pc, #36]	; (8003020 <main+0x80>)
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003002:	6043      	str	r3, [r0, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8003004:	468e      	mov	lr, r1
    _stm32_dma_streams[i].stream->CR = 0U;
 8003006:	460d      	mov	r5, r1
  dma_streams_mask = 0U;
 8003008:	6031      	str	r1, [r6, #0]
 800300a:	e00d      	b.n	8003028 <main+0x88>
 800300c:	40023800 	.word	0x40023800
 8003010:	40007000 	.word	0x40007000
 8003014:	20000e4c 	.word	0x20000e4c
 8003018:	0800383c 	.word	0x0800383c
 800301c:	40026010 	.word	0x40026010
 8003020:	20000dcc 	.word	0x20000dcc
 8003024:	f852 4c0c 	ldr.w	r4, [r2, #-12]
    _stm32_dma_streams[i].stream->CR = 0U;
 8003028:	6025      	str	r5, [r4, #0]
    dma_isr_redir[i].dma_func = NULL;
 800302a:	f847 503e 	str.w	r5, [r7, lr, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 800302e:	f10e 0e01 	add.w	lr, lr, #1
 8003032:	f1be 0f10 	cmp.w	lr, #16
 8003036:	f102 020c 	add.w	r2, r2, #12
 800303a:	d1f3      	bne.n	8003024 <main+0x84>
  DMA1->LIFCR = 0xFFFFFFFFU;
 800303c:	f8df 9360 	ldr.w	r9, [pc, #864]	; 80033a0 <main+0x400>
  DMA2->LIFCR = 0xFFFFFFFFU;
 8003040:	4bbd      	ldr	r3, [pc, #756]	; (8003338 <main+0x398>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8003042:	f8df 8360 	ldr.w	r8, [pc, #864]	; 80033a4 <main+0x404>
  gpiop->OTYPER  = config->otyper;
 8003046:	f8df c360 	ldr.w	ip, [pc, #864]	; 80033a8 <main+0x408>
  gpiop->PUPDR   = config->pupdr;
 800304a:	f8df a360 	ldr.w	sl, [pc, #864]	; 80033ac <main+0x40c>
  gpiop->OTYPER  = config->otyper;
 800304e:	4fbb      	ldr	r7, [pc, #748]	; (800333c <main+0x39c>)
 8003050:	4cbb      	ldr	r4, [pc, #748]	; (8003340 <main+0x3a0>)
 8003052:	48bc      	ldr	r0, [pc, #752]	; (8003344 <main+0x3a4>)
  sdp->vmt = &vmt;
 8003054:	4ebc      	ldr	r6, [pc, #752]	; (8003348 <main+0x3a8>)
 8003056:	49bd      	ldr	r1, [pc, #756]	; (800334c <main+0x3ac>)
  DMA1->LIFCR = 0xFFFFFFFFU;
 8003058:	f04f 32ff 	mov.w	r2, #4294967295
 800305c:	f8c9 2008 	str.w	r2, [r9, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8003060:	f8c9 200c 	str.w	r2, [r9, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8003064:	609a      	str	r2, [r3, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8003066:	60da      	str	r2, [r3, #12]
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8003068:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 800306c:	f043 031f 	orr.w	r3, r3, #31
 8003070:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8003074:	f8d8 9050 	ldr.w	r9, [r8, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8003078:	4bb5      	ldr	r3, [pc, #724]	; (8003350 <main+0x3b0>)
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 800307a:	f049 091f 	orr.w	r9, r9, #31
 800307e:	f8c8 9050 	str.w	r9, [r8, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8003082:	f8cc 5004 	str.w	r5, [ip, #4]
  gpiop->ODR     = config->odr;
 8003086:	f64f 79ff 	movw	r9, #65535	; 0xffff
  gpiop->OSPEEDR = config->ospeedr;
 800308a:	f8cc 2008 	str.w	r2, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 800308e:	f8cc a00c 	str.w	sl, [ip, #12]
  gpiop->AFRL    = config->afrl;
 8003092:	f8df a31c 	ldr.w	sl, [pc, #796]	; 80033b0 <main+0x410>
  gpiop->ODR     = config->odr;
 8003096:	f8cc 9014 	str.w	r9, [ip, #20]
  gpiop->AFRL    = config->afrl;
 800309a:	f8cc a020 	str.w	sl, [ip, #32]
  gpiop->AFRH    = config->afrh;
 800309e:	f8df a314 	ldr.w	sl, [pc, #788]	; 80033b4 <main+0x414>
 80030a2:	f8cc a024 	str.w	sl, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80030a6:	f10a 5a2a 	add.w	sl, sl, #713031680	; 0x2a800000
 80030aa:	f50a 1ab0 	add.w	sl, sl, #1441792	; 0x160000
 80030ae:	f8cc a000 	str.w	sl, [ip]
  gpiop->PUPDR   = config->pupdr;
 80030b2:	f10c 5ca9 	add.w	ip, ip, #354418688	; 0x15200000
 80030b6:	f50c 1cfa 	add.w	ip, ip, #2048000	; 0x1f4000
 80030ba:	f20c 5c55 	addw	ip, ip, #1365	; 0x555
  gpiop->OTYPER  = config->otyper;
 80030be:	607d      	str	r5, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80030c0:	60ba      	str	r2, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 80030c2:	f8c7 c00c 	str.w	ip, [r7, #12]
  gpiop->AFRL    = config->afrl;
 80030c6:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
  gpiop->ODR     = config->odr;
 80030ca:	f8c7 9014 	str.w	r9, [r7, #20]
  gpiop->MODER   = config->moder;
 80030ce:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 80033b8 <main+0x418>
  gpiop->AFRL    = config->afrl;
 80030d2:	f8c7 c020 	str.w	ip, [r7, #32]
  gpiop->AFRH    = config->afrh;
 80030d6:	f44f 6ca8 	mov.w	ip, #1344	; 0x540
 80030da:	f8c7 c024 	str.w	ip, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80030de:	f8c7 a000 	str.w	sl, [r7]
  gpiop->PUPDR   = config->pupdr;
 80030e2:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 80033bc <main+0x41c>
  gpiop->OTYPER  = config->otyper;
 80030e6:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80030e8:	60a2      	str	r2, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 80030ea:	f8c4 a00c 	str.w	sl, [r4, #12]
  gpiop->AFRL    = config->afrl;
 80030ee:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 80033c0 <main+0x420>
  gpiop->ODR     = config->odr;
 80030f2:	f8c4 9014 	str.w	r9, [r4, #20]
  gpiop->AFRL    = config->afrl;
 80030f6:	f8c4 a020 	str.w	sl, [r4, #32]
  gpiop->AFRH    = config->afrh;
 80030fa:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80033c4 <main+0x424>
 80030fe:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003102:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 80033c8 <main+0x428>
 8003106:	f8c4 a000 	str.w	sl, [r4]
  gpiop->PUPDR   = config->pupdr;
 800310a:	4c92      	ldr	r4, [pc, #584]	; (8003354 <main+0x3b4>)
  gpiop->OTYPER  = config->otyper;
 800310c:	6045      	str	r5, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800310e:	6082      	str	r2, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8003110:	60c4      	str	r4, [r0, #12]
  gpiop->ODR     = config->odr;
 8003112:	f640 74ff 	movw	r4, #4095	; 0xfff
 8003116:	6144      	str	r4, [r0, #20]
 8003118:	4637      	mov	r7, r6
  gpiop->MODER   = config->moder;
 800311a:	4c8f      	ldr	r4, [pc, #572]	; (8003358 <main+0x3b8>)
  gpiop->AFRL    = config->afrl;
 800311c:	6205      	str	r5, [r0, #32]
 800311e:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 80033cc <main+0x42c>
  gpiop->AFRH    = config->afrh;
 8003122:	6245      	str	r5, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003124:	6004      	str	r4, [r0, #0]
  gpiop->PUPDR   = config->pupdr;
 8003126:	4c8d      	ldr	r4, [pc, #564]	; (800335c <main+0x3bc>)
 8003128:	488d      	ldr	r0, [pc, #564]	; (8003360 <main+0x3c0>)
  gpiop->OTYPER  = config->otyper;
 800312a:	604d      	str	r5, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800312c:	608a      	str	r2, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 800312e:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 8003130:	f8c1 9014 	str.w	r9, [r1, #20]
  i2cp->state  = I2C_STOP;
 8003134:	4c8b      	ldr	r4, [pc, #556]	; (8003364 <main+0x3c4>)
  gpiop->AFRL    = config->afrl;
 8003136:	620d      	str	r5, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8003138:	624d      	str	r5, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800313a:	f8c1 c000 	str.w	ip, [r1]
  gpiop->OTYPER  = config->otyper;
 800313e:	605d      	str	r5, [r3, #4]
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8003140:	f8df c28c 	ldr.w	ip, [pc, #652]	; 80033d0 <main+0x430>
  gpiop->OSPEEDR = config->ospeedr;
 8003144:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8003146:	60d8      	str	r0, [r3, #12]
  gpiop->ODR     = config->odr;
 8003148:	f8c3 9014 	str.w	r9, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800314c:	621d      	str	r5, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800314e:	625d      	str	r5, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003150:	601d      	str	r5, [r3, #0]
 8003152:	f847 ab04 	str.w	sl, [r7], #4
  I2CD1.i2c    = I2C1;
 8003156:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80033d4 <main+0x434>
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 800315a:	6077      	str	r7, [r6, #4]
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 800315c:	f10c 0348 	add.w	r3, ip, #72	; 0x48
 8003160:	2701      	movs	r7, #1
  I2CD1.i2c    = I2C1;
 8003162:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
  tqp->p_next = (thread_t *)tqp;
 8003166:	f104 090c 	add.w	r9, r4, #12
  i2cp->config = NULL;
 800316a:	6065      	str	r5, [r4, #4]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 800316c:	6165      	str	r5, [r4, #20]
  I2CD1.thread = NULL;
 800316e:	61e5      	str	r5, [r4, #28]
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8003170:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 8003174:	6323      	str	r3, [r4, #48]	; 0x30
 8003176:	f8c4 900c 	str.w	r9, [r4, #12]
  tqp->p_prev = (thread_t *)tqp;
 800317a:	f8c4 9010 	str.w	r9, [r4, #16]
  i2cp->state  = I2C_STOP;
 800317e:	7027      	strb	r7, [r4, #0]
  iqp->q_buffer  = bp;
 8003180:	f106 0954 	add.w	r9, r6, #84	; 0x54
  tqp->p_next = (thread_t *)tqp;
 8003184:	f106 040c 	add.w	r4, r6, #12
 8003188:	60f4      	str	r4, [r6, #12]
  tqp->p_prev = (thread_t *)tqp;
 800318a:	6134      	str	r4, [r6, #16]
  iqp->q_counter = 0;
 800318c:	6175      	str	r5, [r6, #20]
  sdp->state = SD_STOP;
 800318e:	7237      	strb	r7, [r6, #8]
  oqp->q_notify  = onfy;
 8003190:	4c75      	ldr	r4, [pc, #468]	; (8003368 <main+0x3c8>)
  iqp->q_buffer  = bp;
 8003192:	f8c6 9018 	str.w	r9, [r6, #24]
  iqp->q_rdptr   = bp;
 8003196:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  iqp->q_wrptr   = bp;
 800319a:	f8c6 9020 	str.w	r9, [r6, #32]
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 800319e:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80033d8 <main+0x438>
  spip->state = SPI_STOP;
 80031a2:	4872      	ldr	r0, [pc, #456]	; (800336c <main+0x3cc>)
  oqp->q_notify  = onfy;
 80031a4:	64f4      	str	r4, [r6, #76]	; 0x4c
 80031a6:	f8c6 9074 	str.w	r9, [r6, #116]	; 0x74
  iqp->q_top     = bp + size;
 80031aa:	f106 0464 	add.w	r4, r6, #100	; 0x64
  tqp->p_next = (thread_t *)tqp;
 80031ae:	f106 0930 	add.w	r9, r6, #48	; 0x30
 80031b2:	61f4      	str	r4, [r6, #28]
  oqp->q_buffer  = bp;
 80031b4:	63f4      	str	r4, [r6, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 80031b6:	64b4      	str	r4, [r6, #72]	; 0x48
  oqp->q_wrptr   = bp;
 80031b8:	6474      	str	r4, [r6, #68]	; 0x44
 80031ba:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 80031be:	f10c 0460 	add.w	r4, ip, #96	; 0x60
  tqp->p_prev = (thread_t *)tqp;
 80031c2:	f8c6 9034 	str.w	r9, [r6, #52]	; 0x34
  SPID1.spi       = SPI1;
 80031c6:	f8df 9214 	ldr.w	r9, [pc, #532]	; 80033dc <main+0x43c>
 80031ca:	4969      	ldr	r1, [pc, #420]	; (8003370 <main+0x3d0>)
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 80031cc:	6204      	str	r4, [r0, #32]
  SPID1.spi       = SPI1;
 80031ce:	f8c0 901c 	str.w	r9, [r0, #28]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 80031d2:	f10c 0484 	add.w	r4, ip, #132	; 0x84
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80031d6:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80033e0 <main+0x440>
  usbp->state        = USB_STOP;
 80031da:	4b66      	ldr	r3, [pc, #408]	; (8003374 <main+0x3d4>)
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 80031dc:	6244      	str	r4, [r0, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80031de:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 80031e2:	4c65      	ldr	r4, [pc, #404]	; (8003378 <main+0x3d8>)
 80031e4:	7007      	strb	r7, [r0, #0]
  tqp->p_next = (thread_t *)tqp;
 80031e6:	f100 090c 	add.w	r9, r0, #12
  oqp->q_top     = bp + size;
 80031ea:	f106 0a74 	add.w	sl, r6, #116	; 0x74
  spip->config = NULL;
 80031ee:	6045      	str	r5, [r0, #4]
  spip->thread = NULL;
 80031f0:	6085      	str	r5, [r0, #8]
 80031f2:	6145      	str	r5, [r0, #20]
 80031f4:	62c4      	str	r4, [r0, #44]	; 0x2c
 80031f6:	f8c0 900c 	str.w	r9, [r0, #12]
 80031fa:	f101 040c 	add.w	r4, r1, #12
  tqp->p_prev = (thread_t *)tqp;
 80031fe:	f8c0 9010 	str.w	r9, [r0, #16]
  SPID2.spi       = SPI2;
 8003202:	485e      	ldr	r0, [pc, #376]	; (800337c <main+0x3dc>)
  oqp->q_counter = size;
 8003204:	f8c6 e038 	str.w	lr, [r6, #56]	; 0x38
  oqp->q_top     = bp + size;
 8003208:	f8c6 a040 	str.w	sl, [r6, #64]	; 0x40
  spip->state = SPI_STOP;
 800320c:	700f      	strb	r7, [r1, #0]
  spip->config = NULL;
 800320e:	604d      	str	r5, [r1, #4]
  spip->thread = NULL;
 8003210:	608d      	str	r5, [r1, #8]
 8003212:	614d      	str	r5, [r1, #20]
  tqp->p_next = (thread_t *)tqp;
 8003214:	60cc      	str	r4, [r1, #12]
  tqp->p_prev = (thread_t *)tqp;
 8003216:	610c      	str	r4, [r1, #16]
  iqp->q_notify  = infy;
 8003218:	62b5      	str	r5, [r6, #40]	; 0x28
  iqp->q_link    = link;
 800321a:	62f6      	str	r6, [r6, #44]	; 0x2c
  oqp->q_link    = link;
 800321c:	6536      	str	r6, [r6, #80]	; 0x50
 800321e:	61c8      	str	r0, [r1, #28]
 8003220:	701f      	strb	r7, [r3, #0]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8003222:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8003226:	4c56      	ldr	r4, [pc, #344]	; (8003380 <main+0x3e0>)
  usbp->config       = NULL;
 8003228:	605d      	str	r5, [r3, #4]
  ST_ENABLE_CLOCK();
 800322a:	4338      	orrs	r0, r7
 800322c:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
 8003230:	f10c 0030 	add.w	r0, ip, #48	; 0x30
  ST_ENABLE_STOP();
 8003234:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8003238:	6248      	str	r0, [r1, #36]	; 0x24
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 800323a:	4852      	ldr	r0, [pc, #328]	; (8003384 <main+0x3e4>)
 800323c:	6288      	str	r0, [r1, #40]	; 0x28
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 800323e:	3030      	adds	r0, #48	; 0x30
 8003240:	62c8      	str	r0, [r1, #44]	; 0x2c
  USBD1.otg       = OTG_FS;
 8003242:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003246:	6618      	str	r0, [r3, #96]	; 0x60
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 8003248:	f10c 0a24 	add.w	sl, ip, #36	; 0x24
  USBD1.otgparams = &fsparams;
 800324c:	484e      	ldr	r0, [pc, #312]	; (8003388 <main+0x3e8>)
    usbp->in_params[i]  = NULL;
 800324e:	621d      	str	r5, [r3, #32]
    usbp->out_params[i] = NULL;
 8003250:	631d      	str	r5, [r3, #48]	; 0x30
    usbp->in_params[i]  = NULL;
 8003252:	625d      	str	r5, [r3, #36]	; 0x24
    usbp->out_params[i] = NULL;
 8003254:	635d      	str	r5, [r3, #52]	; 0x34
    usbp->in_params[i]  = NULL;
 8003256:	629d      	str	r5, [r3, #40]	; 0x28
    usbp->out_params[i] = NULL;
 8003258:	639d      	str	r5, [r3, #56]	; 0x38
    usbp->in_params[i]  = NULL;
 800325a:	62dd      	str	r5, [r3, #44]	; 0x2c
    usbp->out_params[i] = NULL;
 800325c:	63dd      	str	r5, [r3, #60]	; 0x3c
  usbp->transmitting = 0;
 800325e:	811d      	strh	r5, [r3, #8]
  usbp->receiving    = 0;
 8003260:	815d      	strh	r5, [r3, #10]
  USBD1.wait      = NULL;
 8003262:	671d      	str	r5, [r3, #112]	; 0x70
  USBD1.tr = NULL;
 8003264:	675d      	str	r5, [r3, #116]	; 0x74
  USBD1.otgparams = &fsparams;
 8003266:	6658      	str	r0, [r3, #100]	; 0x64
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003268:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80033e4 <main+0x444>
  SCB->VTOR = CORTEX_VTOR_INIT;
 800326c:	4b47      	ldr	r3, [pc, #284]	; (800338c <main+0x3ec>)
 800326e:	f8c1 a020 	str.w	sl, [r1, #32]
 8003272:	ea4b 0b07 	orr.w	fp, fp, r7

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003276:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  ST_ENABLE_STOP();
 800327a:	f8c4 b008 	str.w	fp, [r4, #8]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800327e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003282:	f242 0ccf 	movw	ip, #8399	; 0x20cf
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003286:	2480      	movs	r4, #128	; 0x80
 8003288:	f8c1 c028 	str.w	ip, [r1, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800328c:	62ca      	str	r2, [r1, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 800328e:	618d      	str	r5, [r1, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8003290:	634d      	str	r5, [r1, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8003292:	60cd      	str	r5, [r1, #12]
  STM32_ST_TIM->CR2    = 0;
 8003294:	604d      	str	r5, [r1, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8003296:	614f      	str	r7, [r1, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8003298:	600f      	str	r7, [r1, #0]
 800329a:	f889 431c 	strb.w	r4, [r9, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800329e:	f8c9 0180 	str.w	r0, [r9, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80032a2:	f8c9 0000 	str.w	r0, [r9]
 80032a6:	609d      	str	r5, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a8:	68d8      	ldr	r0, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80032aa:	4939      	ldr	r1, [pc, #228]	; (8003390 <main+0x3f0>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80032ac:	f8df c138 	ldr.w	ip, [pc, #312]	; 80033e8 <main+0x448>
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 80032b0:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80032b4:	4020      	ands	r0, r4
  reg_value  =  (reg_value                                   |
 80032b6:	4301      	orrs	r1, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80032b8:	60d9      	str	r1, [r3, #12]
 80032ba:	f8dc 100c 	ldr.w	r1, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80032be:	4835      	ldr	r0, [pc, #212]	; (8003394 <main+0x3f4>)
  tqp->p_next = (thread_t *)tqp;
 80032c0:	4c35      	ldr	r4, [pc, #212]	; (8003398 <main+0x3f8>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80032c2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80032c6:	f8cc 100c 	str.w	r1, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80032ca:	6801      	ldr	r1, [r0, #0]
  ch.vtlist.vt_delta = (systime_t)-1;
 80032cc:	6262      	str	r2, [r4, #36]	; 0x24
 80032ce:	4339      	orrs	r1, r7
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d0:	f04f 0b20 	mov.w	fp, #32
 80032d4:	6001      	str	r1, [r0, #0]
 80032d6:	f883 e01f 	strb.w	lr, [r3, #31]
  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 80032da:	f104 011c 	add.w	r1, r4, #28
 80032de:	f883 b022 	strb.w	fp, [r3, #34]	; 0x22
  chTMStartMeasurementX(&tm);
 80032e2:	a802      	add	r0, sp, #8
  tmp->cumulative = (rttime_t)0;
 80032e4:	2300      	movs	r3, #0
  tmp->best       = (rtcnt_t)-1;
 80032e6:	9202      	str	r2, [sp, #8]
 80032e8:	6024      	str	r4, [r4, #0]
  tmp->cumulative = (rttime_t)0;
 80032ea:	2200      	movs	r2, #0
  tqp->p_prev = (thread_t *)tqp;
 80032ec:	6064      	str	r4, [r4, #4]
 80032ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80032f2:	61e1      	str	r1, [r4, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 80032f4:	6221      	str	r1, [r4, #32]
  tmp->worst      = (rtcnt_t)0;
 80032f6:	9503      	str	r5, [sp, #12]
  tmp->last       = (rtcnt_t)0;
 80032f8:	9504      	str	r5, [sp, #16]
  tmp->n          = (ucnt_t)0;
 80032fa:	9505      	str	r5, [sp, #20]
  ch.rlist.r_prio = NOPRIO;
 80032fc:	60a5      	str	r5, [r4, #8]
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 80032fe:	6124      	str	r4, [r4, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8003300:	6164      	str	r4, [r4, #20]
  ch.vtlist.vt_lasttime = (systime_t)0;
 8003302:	62a5      	str	r5, [r4, #40]	; 0x28
  ch.tm.offset = (rtcnt_t)0;
 8003304:	6765      	str	r5, [r4, #116]	; 0x74
  chTMStartMeasurementX(&tm);
 8003306:	f7ff fab3 	bl	8002870 <chTMStartMeasurementX.constprop.56>
  chTMStopMeasurementX(&tm);
 800330a:	a802      	add	r0, sp, #8
 800330c:	f7fd fdb0 	bl	8000e70 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8003310:	4a22      	ldr	r2, [pc, #136]	; (800339c <main+0x3fc>)
  REG_INSERT(tp);
 8003312:	f8d4 c014 	ldr.w	ip, [r4, #20]
  ch.tm.offset = tm.last;
 8003316:	9b04      	ldr	r3, [sp, #16]
 8003318:	6763      	str	r3, [r4, #116]	; 0x74
 800331a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  tqp->p_next = (thread_t *)tqp;
 800331e:	f102 0a10 	add.w	sl, r2, #16
  tp->p_prio = prio;
 8003322:	2340      	movs	r3, #64	; 0x40
  REG_INSERT(tp);
 8003324:	f8c4 c044 	str.w	ip, [r4, #68]	; 0x44
 8003328:	6195      	str	r5, [r2, #24]
 800332a:	f8c2 a010 	str.w	sl, [r2, #16]
  tqp->p_prev = (thread_t *)tqp;
 800332e:	f8c2 a014 	str.w	sl, [r2, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8003332:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
 8003336:	e059      	b.n	80033ec <main+0x44c>
 8003338:	40026400 	.word	0x40026400
 800333c:	40020400 	.word	0x40020400
 8003340:	40020800 	.word	0x40020800
 8003344:	40020c00 	.word	0x40020c00
 8003348:	200008a8 	.word	0x200008a8
 800334c:	40021000 	.word	0x40021000
 8003350:	40021c00 	.word	0x40021c00
 8003354:	00555155 	.word	0x00555155
 8003358:	55000100 	.word	0x55000100
 800335c:	55555545 	.word	0x55555545
 8003360:	55555550 	.word	0x55555550
 8003364:	20000870 	.word	0x20000870
 8003368:	08001431 	.word	0x08001431
 800336c:	20000920 	.word	0x20000920
 8003370:	20000d74 	.word	0x20000d74
 8003374:	20000950 	.word	0x20000950
 8003378:	06010046 	.word	0x06010046
 800337c:	40003800 	.word	0x40003800
 8003380:	e0042000 	.word	0xe0042000
 8003384:	00010016 	.word	0x00010016
 8003388:	08003910 	.word	0x08003910
 800338c:	e000ed00 	.word	0xe000ed00
 8003390:	05fa0300 	.word	0x05fa0300
 8003394:	e0001000 	.word	0xe0001000
 8003398:	20000b98 	.word	0x20000b98
 800339c:	20000da8 	.word	0x20000da8
 80033a0:	40026000 	.word	0x40026000
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40020000 	.word	0x40020000
 80033ac:	40015054 	.word	0x40015054
 80033b0:	55560000 	.word	0x55560000
 80033b4:	000aaa00 	.word	0x000aaa00
 80033b8:	00282080 	.word	0x00282080
 80033bc:	05555515 	.word	0x05555515
 80033c0:	60005000 	.word	0x60005000
 80033c4:	00060600 	.word	0x00060600
 80033c8:	02208081 	.word	0x02208081
 80033cc:	08003930 	.word	0x08003930
 80033d0:	08003830 	.word	0x08003830
 80033d4:	40005400 	.word	0x40005400
 80033d8:	40004400 	.word	0x40004400
 80033dc:	40013000 	.word	0x40013000
 80033e0:	06010016 	.word	0x06010016
 80033e4:	e000e100 	.word	0xe000e100
 80033e8:	e000edf0 	.word	0xe000edf0
  tp->p_mtxlist = NULL;
 80033ec:	66a5      	str	r5, [r4, #104]	; 0x68
  tp->p_epending = (eventmask_t)0;
 80033ee:	6665      	str	r5, [r4, #100]	; 0x64
  tp->p_refs = (trefs_t)1;
 80033f0:	f884 704e 	strb.w	r7, [r4, #78]	; 0x4e
  tp->p_name = NULL;
 80033f4:	64a5      	str	r5, [r4, #72]	; 0x48
  REG_INSERT(tp);
 80033f6:	6424      	str	r4, [r4, #64]	; 0x40
  tp->p_prio = prio;
 80033f8:	63a3      	str	r3, [r4, #56]	; 0x38
  tp->p_realprio = prio;
 80033fa:	66e3      	str	r3, [r4, #108]	; 0x6c
  REG_INSERT(tp);
 80033fc:	f8cc e010 	str.w	lr, [ip, #16]
 8003400:	f8c4 e014 	str.w	lr, [r4, #20]
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8003404:	f8c4 e018 	str.w	lr, [r4, #24]
  tlp->p_next = (thread_t *)tlp;
 8003408:	f104 0e54 	add.w	lr, r4, #84	; 0x54
 800340c:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
 8003410:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 800360c <main+0x66c>
 8003414:	f8c2 e000 	str.w	lr, [r2]
  default_heap.h_free.h.u.next = NULL;
 8003418:	6095      	str	r5, [r2, #8]
  default_heap.h_free.h.size = 0;
 800341a:	60d5      	str	r5, [r2, #12]
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800341c:	486f      	ldr	r0, [pc, #444]	; (80035dc <main+0x63c>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800341e:	4970      	ldr	r1, [pc, #448]	; (80035e0 <main+0x640>)
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8003420:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 8003610 <main+0x670>
  tp->p_realprio = prio;
 8003424:	9301      	str	r3, [sp, #4]
  tqp->p_next = (thread_t *)tqp;
 8003426:	f104 0258 	add.w	r2, r4, #88	; 0x58
 800342a:	65a2      	str	r2, [r4, #88]	; 0x58
  tqp->p_prev = (thread_t *)tqp;
 800342c:	65e2      	str	r2, [r4, #92]	; 0x5c
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800342e:	4a6d      	ldr	r2, [pc, #436]	; (80035e4 <main+0x644>)
  currp->p_state = CH_STATE_CURRENT;
 8003430:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8003434:	f020 0007 	bic.w	r0, r0, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8003438:	f021 0107 	bic.w	r1, r1, #7
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800343c:	f8cc 0000 	str.w	r0, [ip]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8003440:	6011      	str	r1, [r2, #0]
 8003442:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
 8003446:	b662      	cpsie	i
 8003448:	69a2      	ldr	r2, [r4, #24]
 800344a:	4967      	ldr	r1, [pc, #412]	; (80035e8 <main+0x648>)
 800344c:	6191      	str	r1, [r2, #24]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800344e:	f38b 8811 	msr	BASEPRI, fp
  REG_INSERT(tp);
 8003452:	6961      	ldr	r1, [r4, #20]
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8003454:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 8003614 <main+0x674>
 8003458:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 8003618 <main+0x678>
  tp->p_prio = prio;
 800345c:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8003460:	f504 72ba 	add.w	r2, r4, #372	; 0x174
 8003464:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  tp->p_state = CH_STATE_WTSTART;
 8003468:	2002      	movs	r0, #2
  REG_INSERT(tp);
 800346a:	f104 0278 	add.w	r2, r4, #120	; 0x78
  tp->p_realprio = prio;
 800346e:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
  tp->p_refs = (trefs_t)1;
 8003472:	f884 7096 	strb.w	r7, [r4, #150]	; 0x96
  tp->p_state = CH_STATE_WTSTART;
 8003476:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
  REG_INSERT(tp);
 800347a:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800347e:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8003482:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
  tp->p_mtxlist = NULL;
 8003486:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  tp->p_epending = (eventmask_t)0;
 800348a:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
  tp->p_name = NULL;
 800348e:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  REG_INSERT(tp);
 8003492:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8003496:	f8c4 e1b4 	str.w	lr, [r4, #436]	; 0x1b4
 800349a:	f8c4 a1d4 	str.w	sl, [r4, #468]	; 0x1d4
  tlp->p_next = (thread_t *)tlp;
 800349e:	f104 079c 	add.w	r7, r4, #156	; 0x9c
  REG_INSERT(tp);
 80034a2:	610a      	str	r2, [r1, #16]
  tqp->p_next = (thread_t *)tqp;
 80034a4:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
  chSchWakeupS(tp, MSG_OK);
 80034a8:	4610      	mov	r0, r2
  tlp->p_next = (thread_t *)tlp;
 80034aa:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
  tqp->p_next = (thread_t *)tqp;
 80034ae:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
  tqp->p_prev = (thread_t *)tqp;
 80034b2:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  REG_INSERT(tp);
 80034b6:	6162      	str	r2, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 80034b8:	f7ff f9aa 	bl	8002810 <chSchWakeupS.constprop.59>
 80034bc:	f385 8811 	msr	BASEPRI, r5
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 80034c0:	4a4a      	ldr	r2, [pc, #296]	; (80035ec <main+0x64c>)
 80034c2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80034c6:	f38b 8811 	msr	BASEPRI, fp
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80034ca:	7a32      	ldrb	r2, [r6, #8]
 80034cc:	9b01      	ldr	r3, [sp, #4]
 80034ce:	2a01      	cmp	r2, #1
 80034d0:	d075      	beq.n	80035be <main+0x61e>
  USART_TypeDef *u = sdp->usart;
 80034d2:	6f73      	ldr	r3, [r6, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80034d4:	4a46      	ldr	r2, [pc, #280]	; (80035f0 <main+0x650>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d06d      	beq.n	80035b6 <main+0x616>
 80034da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034de:	4293      	cmp	r3, r2
 80034e0:	d069      	beq.n	80035b6 <main+0x616>
    u->BRR = STM32_PCLK1 / config->speed;
 80034e2:	f240 4245 	movw	r2, #1093	; 0x445
 80034e6:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80034e8:	f244 0140 	movw	r1, #16448	; 0x4040
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80034ec:	2701      	movs	r7, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80034ee:	f242 122c 	movw	r2, #8492	; 0x212c
  u->SR = 0;
 80034f2:	2500      	movs	r5, #0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80034f4:	6119      	str	r1, [r3, #16]
  sdp->state = SD_READY;
 80034f6:	f04f 0802 	mov.w	r8, #2
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80034fa:	615f      	str	r7, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80034fc:	60da      	str	r2, [r3, #12]
  u->SR = 0;
 80034fe:	601d      	str	r5, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8003500:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f886 8008 	strb.w	r8, [r6, #8]
 8003508:	f385 8811 	msr	BASEPRI, r5

  sdStart(&SD2, NULL);
  /*
       * Starting Serial Driver 2 with default configuration.
       */
       palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7)); //tx for uart2
 800350c:	2004      	movs	r0, #4
 800350e:	f7ff fb77 	bl	8002c00 <_pal_lld_setgroupmode.constprop.14>
       palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7)); // rx for uart2
 8003512:	2008      	movs	r0, #8
 8003514:	f7ff fb74 	bl	8002c00 <_pal_lld_setgroupmode.constprop.14>

  chThdSleepMilliseconds(2000);
 8003518:	f644 6020 	movw	r0, #20000	; 0x4e20
 800351c:	f7fd fed0 	bl	80012c0 <chThdSleep>
 8003520:	2320      	movs	r3, #32
 8003522:	f383 8811 	msr	BASEPRI, r3
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8003526:	4b33      	ldr	r3, [pc, #204]	; (80035f4 <main+0x654>)
  REG_INSERT(tp);
 8003528:	6962      	ldr	r2, [r4, #20]
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800352a:	4833      	ldr	r0, [pc, #204]	; (80035f8 <main+0x658>)
  tp->p_refs = (trefs_t)1;
 800352c:	779f      	strb	r7, [r3, #30]
  tp->p_prio = prio;
 800352e:	2141      	movs	r1, #65	; 0x41
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8003530:	f8c3 032c 	str.w	r0, [r3, #812]	; 0x32c
  REG_INSERT(tp);
 8003534:	615a      	str	r2, [r3, #20]
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8003536:	f8c3 a34c 	str.w	sl, [r3, #844]	; 0x34c
 800353a:	f8c3 5330 	str.w	r5, [r3, #816]	; 0x330
  tp->p_state = CH_STATE_WTSTART;
 800353e:	f883 801c 	strb.w	r8, [r3, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8003542:	775d      	strb	r5, [r3, #29]
  tp->p_mtxlist = NULL;
 8003544:	639d      	str	r5, [r3, #56]	; 0x38
  tp->p_epending = (eventmask_t)0;
 8003546:	635d      	str	r5, [r3, #52]	; 0x34
  tp->p_name = NULL;
 8003548:	619d      	str	r5, [r3, #24]
  REG_INSERT(tp);
 800354a:	611c      	str	r4, [r3, #16]
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800354c:	f503 773b 	add.w	r7, r3, #748	; 0x2ec
  tp->p_realprio = prio;
 8003550:	63d9      	str	r1, [r3, #60]	; 0x3c
  tlp->p_next = (thread_t *)tlp;
 8003552:	f103 0624 	add.w	r6, r3, #36	; 0x24
  REG_INSERT(tp);
 8003556:	6113      	str	r3, [r2, #16]
  tqp->p_next = (thread_t *)tqp;
 8003558:	f103 0228 	add.w	r2, r3, #40	; 0x28
  chSchWakeupS(tp, MSG_OK);
 800355c:	4618      	mov	r0, r3
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800355e:	60df      	str	r7, [r3, #12]
  tp->p_prio = prio;
 8003560:	6099      	str	r1, [r3, #8]
  tlp->p_next = (thread_t *)tlp;
 8003562:	625e      	str	r6, [r3, #36]	; 0x24
  tqp->p_next = (thread_t *)tqp;
 8003564:	629a      	str	r2, [r3, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c
  REG_INSERT(tp);
 8003568:	6163      	str	r3, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 800356a:	f7ff f951 	bl	8002810 <chSchWakeupS.constprop.59>
 800356e:	f385 8811 	msr	BASEPRI, r5
 8003572:	4f22      	ldr	r7, [pc, #136]	; (80035fc <main+0x65c>)
 8003574:	4d22      	ldr	r5, [pc, #136]	; (8003600 <main+0x660>)

  /*
   * Normal main() thread activity: button checking.
   */
  while (true) {
    if(palReadPad(GPIOA, GPIOA_BUTTON) == PAL_HIGH){
 8003576:	4c23      	ldr	r4, [pc, #140]	; (8003604 <main+0x664>)
      chThdSleepMilliseconds(50);
      if(palReadPad(GPIOA, GPIOA_BUTTON) == PAL_LOW){
        btn_flag = TRUE;
        demo_mode = (demo_mode + 1) % NUM_OF_DEMOS;
 8003578:	4e23      	ldr	r6, [pc, #140]	; (8003608 <main+0x668>)
 800357a:	e002      	b.n	8003582 <main+0x5e2>
        chThdSleepMilliseconds(50);
      }
    }
    chThdSleepMilliseconds(5);
 800357c:	2032      	movs	r0, #50	; 0x32
 800357e:	f7fd fe9f 	bl	80012c0 <chThdSleep>
    if(palReadPad(GPIOA, GPIOA_BUTTON) == PAL_HIGH){
 8003582:	6923      	ldr	r3, [r4, #16]
 8003584:	07da      	lsls	r2, r3, #31
 8003586:	d5f9      	bpl.n	800357c <main+0x5dc>
      chThdSleepMilliseconds(50);
 8003588:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800358c:	f7fd fe98 	bl	80012c0 <chThdSleep>
      if(palReadPad(GPIOA, GPIOA_BUTTON) == PAL_LOW){
 8003590:	6923      	ldr	r3, [r4, #16]
 8003592:	07db      	lsls	r3, r3, #31
 8003594:	d4f2      	bmi.n	800357c <main+0x5dc>
        demo_mode = (demo_mode + 1) % NUM_OF_DEMOS;
 8003596:	682b      	ldr	r3, [r5, #0]
 8003598:	3301      	adds	r3, #1
 800359a:	fba6 1203 	umull	r1, r2, r6, r3
 800359e:	0852      	lsrs	r2, r2, #1
 80035a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80035a4:	1a9b      	subs	r3, r3, r2
        chThdSleepMilliseconds(50);
 80035a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
        btn_flag = TRUE;
 80035aa:	2201      	movs	r2, #1
        demo_mode = (demo_mode + 1) % NUM_OF_DEMOS;
 80035ac:	602b      	str	r3, [r5, #0]
        btn_flag = TRUE;
 80035ae:	703a      	strb	r2, [r7, #0]
        chThdSleepMilliseconds(50);
 80035b0:	f7fd fe86 	bl	80012c0 <chThdSleep>
 80035b4:	e7e2      	b.n	800357c <main+0x5dc>
    u->BRR = STM32_PCLK2 / config->speed;
 80035b6:	f640 028b 	movw	r2, #2187	; 0x88b
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	e794      	b.n	80034e8 <main+0x548>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(FALSE);
 80035be:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80035c2:	21c0      	movs	r1, #192	; 0xc0
 80035c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80035c8:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
 80035cc:	f889 1326 	strb.w	r1, [r9, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80035d0:	f8c9 3184 	str.w	r3, [r9, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80035d4:	f8c9 3004 	str.w	r3, [r9, #4]
 80035d8:	e77b      	b.n	80034d2 <main+0x532>
 80035da:	bf00      	nop
 80035dc:	200011af 	.word	0x200011af
 80035e0:	20010000 	.word	0x20010000
 80035e4:	20000e50 	.word	0x20000e50
 80035e8:	080038f0 	.word	0x080038f0
 80035ec:	08003920 	.word	0x08003920
 80035f0:	40011000 	.word	0x40011000
 80035f4:	20000e58 	.word	0x20000e58
 80035f8:	08002281 	.word	0x08002281
 80035fc:	20000da4 	.word	0x20000da4
 8003600:	20000dc8 	.word	0x20000dc8
 8003604:	40020000 	.word	0x40020000
 8003608:	aaaaaaab 	.word	0xaaaaaaab
 800360c:	08000331 	.word	0x08000331
 8003610:	20000e54 	.word	0x20000e54
 8003614:	080003e1 	.word	0x080003e1
 8003618:	080002e9 	.word	0x080002e9
 800361c:	00000000 	.word	0x00000000

08003620 <active_status>:
	...

08003630 <halted_status>:
 8003630:	00000001 00000000 00000000 00000000     ................

08003640 <ram_areas>:
 8003640:	08003950 200011a8 200011a8 200011a8     P9..... ... ... 
 8003650:	08003950 00000000 00000000 00000000     P9..............
 8003660:	08003950 00000000 00000000 00000000     P9..............
 8003670:	08003950 00000000 00000000 00000000     P9..............
 8003680:	08003950 00000000 00000000 00000000     P9..............
 8003690:	08003950 00000000 00000000 00000000     P9..............
 80036a0:	08003950 00000000 00000000 00000000     P9..............
 80036b0:	08003950 00000000 00000000 00000000     P9..............

080036c0 <zero_status>:
	...
 80036d0:	6c756e28 0000296c 00000000 00000000     (null)..........

080036e0 <ep0config>:
 80036e0:	00000000 08000561 08000491 080003f1     ....a...........
 80036f0:	00400040 20000800 20000800 00000001     @.@.... ... ....
 8003700:	20000810 00000000 00000000 00000000     ... ............
 8003710:	20414d44 6c696166 00657275 00000000     DMA failure.....
 8003720:	534d454d 00000000 6f727947 706f6373     MEMS....Gyroscop
 8003730:	000d0a65 4f525947 504f4353 334c2045     e...GYROSCOPE L3
 8003740:	30324447 74616420 0a0d3a61 00000000     GD20 data:......
 8003750:	253a6325 2e642563 64332e25 67656420     %c:%c%d.%.3d deg
 8003760:	0a0d732f 00000000 65636341 6f72656c     /s......Accelero
 8003770:	6574656d 000d0a72 45434341 4f52454c     meter...ACCELERO
 8003780:	4554454d 534c2052 3330334d 43484c44     METER LSM303DLHC
 8003790:	74616420 0a0d3a61 00000000 253a6325      data:......%c:%
 80037a0:	2e642563 64332e25 732f6d20 0a0d325e     c%d.%.3d m/s^2..
 80037b0:	00000000 706d6f43 0a737361 0000000d     ....Compass.....
 80037c0:	504d4f43 20535341 334d534c 4c443330     COMPASS LSM303DL
 80037d0:	64204348 3a617461 00000a0d 253a6325     HC data:....%c:%
 80037e0:	2e642563 64332e25 75614720 0a0d7373     c%d.%.3d Gauss..
	...

08003800 <axes>:
 8003800:	005a5958 00000000 00000000 00000000     XYZ.............

08003810 <i2c_cfg>:
 8003810:	00000001 00061a80 00000002 00000000     ................

08003820 <spi_cfg>:
 8003820:	00000000 40021000 000b0003 00000000     .......@........

08003830 <_stm32_dma_streams>:
 8003830:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8003840:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8003850:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8003860:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8003870:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8003880:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8003890:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 80038a0:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 80038b0:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 80038c0:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 80038d0:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 80038e0:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

080038f0 <ch_debug>:
 80038f0:	6e69616d 18801600 08440404 1814100c     main......D.....
 8003900:	1e1d1c00 00000000 00000000 00000000     ................

08003910 <fsparams>:
 8003910:	00000080 00000140 00000004 00000000     ....@...........
 8003920:	656c6469 00000000 00000000 00000000     idle............

08003930 <vmt>:
 8003930:	08001121 08001241 080011a1 080012b1     !...A...........
 8003940:	08001191 080012a1 08001111 08001231     ............1...
